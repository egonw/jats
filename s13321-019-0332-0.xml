<?xml version="1.0"?>
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="research-article" xml:lang="en">
      <front>
        <journal-meta>
          <journal-id journal-id-type="publisher-id">13321</journal-id>
          <journal-title-group>
            <journal-title>Journal of Cheminformatics</journal-title>
            <abbrev-journal-title abbrev-type="publisher">J Cheminform</abbrev-journal-title>
          </journal-title-group>
          <issn pub-type="epub">1758-2946</issn>
          <publisher>
            <publisher-name>Springer International Publishing</publisher-name>
            <publisher-loc>Cham</publisher-loc>
          </publisher>
        </journal-meta>
        <article-meta>
          <article-id pub-id-type="publisher-id">s13321-019-0332-0</article-id>
          <article-id pub-id-type="manuscript">332</article-id>
          <article-id pub-id-type="doi">10.1186/s13321-019-0332-0</article-id>
          <article-categories>
            <subj-group subj-group-type="heading">
              <subject>Research Article</subject>
            </subj-group>
            <subj-group subj-group-type="article-collection" specific-use="Regular">
              <subject>Programming Languages for Chemical Information</subject>
            </subj-group>
          </article-categories>
          <title-group>
            <article-title xml:lang="en">Chemoinformatics and structural bioinformatics in OCaml</article-title>
          </title-group>
          <contrib-group>
            <contrib contrib-type="author" corresp="yes" id="Au1">
              <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1377-944X</contrib-id>
              <name>
                <surname>Berenger</surname>
                <given-names>Francois</given-names>
              </name>
              <address>
                <email>HIDDEN</email>
              </address>
              <xref ref-type="aff" rid="Aff1">1</xref>
              <xref ref-type="corresp" rid="IDs1332101903320_cor1">a</xref>
            </contrib>
            <contrib contrib-type="author" id="Au2">
              <name>
                <surname>Zhang</surname>
                <given-names>Kam Y. J.</given-names>
              </name>
              <address>
                <email>HIDDEN</email>
              </address>
              <xref ref-type="aff" rid="Aff2">2</xref>
            </contrib>
            <contrib contrib-type="author" id="Au3">
              <name>
                <surname>Yamanishi</surname>
                <given-names>Yoshihiro</given-names>
              </name>
              <address>
                <email>HIDDEN</email>
              </address>
              <xref ref-type="aff" rid="Aff1">1</xref>
              <xref ref-type="aff" rid="Aff3">3</xref>
            </contrib>
            <aff id="Aff1">
              <label>1</label>
              <institution-wrap>
                <institution-id institution-id-type="ISNI">0000 0001 2110 1386</institution-id>
                <institution-id institution-id-type="GRID">grid.258806.1</institution-id>
                <institution content-type="org-division">Department of Bioscience and Bioinformatics, Faculty of Computer Science and Systems Engineering</institution>
                <institution content-type="org-name">Kyushu Institute of Technology</institution>
              </institution-wrap>
              <addr-line content-type="city">Iizuka</addr-line>
              <addr-line content-type="state">Fukuoka</addr-line>
              <country country="JP">Japan</country>
            </aff>
            <aff id="Aff2">
              <label>2</label>
              <institution-wrap>
                <institution-id institution-id-type="ISNI">0000000094465255</institution-id>
                <institution-id institution-id-type="GRID">grid.7597.c</institution-id>
                <institution content-type="org-division">Laboratory for Structural Bioinformatics, Center for Biosystems Dynamics Research</institution>
                <institution content-type="org-name">RIKEN</institution>
              </institution-wrap>
              <addr-line content-type="city">Yokohama</addr-line>
              <addr-line content-type="state">Kanagawa</addr-line>
              <country country="JP">Japan</country>
            </aff>
            <aff id="Aff3">
              <label>3</label>
              <institution-wrap>
                <institution-id institution-id-type="ISNI">0000 0004 1754 9200</institution-id>
                <institution-id institution-id-type="GRID">grid.419082.6</institution-id>
                <institution content-type="org-name">PRESTO, Japan Science and Technology Agency</institution>
              </institution-wrap>
              <addr-line content-type="city">Kawaguchi</addr-line>
              <addr-line content-type="state">Saitama</addr-line>
              <country country="JP">Japan</country>
            </aff>
          </contrib-group>
          <author-notes>
            <corresp id="IDs1332101903320_cor1">
              <label>a</label>
              <email>HIDDEN</email>
            </corresp>
          </author-notes>
          <pub-date date-type="pub" publication-format="electronic">
            <day>5</day>
            <month>2</month>
            <year>2019</year>
          </pub-date>
          <pub-date date-type="collection" publication-format="electronic">
            <month>12</month>
            <year>2019</year>
          </pub-date>
          <volume>11</volume>
          <issue seq="10">1</issue>
          <elocation-id>10</elocation-id>
          <history>
            <date date-type="registration">
              <day>22</day>
              <month>1</month>
              <year>2019</year>
            </date>
            <date date-type="received">
              <day>6</day>
              <month>9</month>
              <year>2018</year>
            </date>
            <date date-type="accepted">
              <day>22</day>
              <month>1</month>
              <year>2019</year>
            </date>
            <date date-type="online">
              <day>5</day>
              <month>2</month>
              <year>2019</year>
            </date>
          </history>
          <permissions>
            <copyright-statement content-type="compact">© The Author(s) 2019</copyright-statement>
            <copyright-year>2019</copyright-year>
            <copyright-holder>The Author(s)</copyright-holder>
            <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/">
              <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link xlink:href="http://creativecommons.org/publicdomain/zero/1.0/" ext-link-type="uri">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
            </license>
          </permissions>
          <abstract xml:lang="en" id="Abs1">
            <title>Abstract</title>
            <sec id="ASec1">
              <title>Background</title>
              <p id="Par1">OCaml is a functional programming language with strong static types, Hindley–Milner type inference and garbage collection. In this article, we share our experience in prototyping chemoinformatics and structural bioinformatics software in OCaml.</p>
            </sec>
            <sec id="ASec2">
              <title>Results</title>
              <p id="Par2">First, we introduce the language, list entry points for chemoinformaticians who would be interested in OCaml and give code examples. Then, we list some scientific open source software written in OCaml. We also present recent open source libraries useful in chemoinformatics. The parallelization of OCaml programs and their performance is also shown. Finally, tools and methods useful when prototyping scientific software in OCaml are given.</p>
            </sec>
            <sec id="ASec3">
              <title>Conclusions</title>
              <p id="Par3">In our experience, OCaml is a programming language of choice for method development in chemoinformatics and structural bioinformatics.</p>
            </sec>
          </abstract>
          <kwd-group xml:lang="en">
            <title>Keywords</title>
            <kwd>Chemoinformatics</kwd>
            <kwd>Structural bioinformatics</kwd>
            <kwd>Bisector tree</kwd>
            <kwd>Scientific software</kwd>
            <kwd>Software prototyping</kwd>
            <kwd>Open source</kwd>
            <kwd>Functional programming</kwd>
            <kwd>OCaml</kwd>
          </kwd-group>
          <funding-group>
            <award-group>
              <funding-source>
                <institution-wrap>
                  <institution>Japan Science and Technology Agency</institution>
                  <institution-id institution-id-type="doi" vocab="open-funder-registry">http://dx.doi.org/10.13039/501100002241</institution-id>
                </institution-wrap>
              </funding-source>
              <award-id award-type="FundRef grant">JPMJPR15D8</award-id>
              <principal-award-recipient>
                <name>
                  <surname>Yamanishi</surname>
                  <given-names>Yoshihiro</given-names>
                </name>
              </principal-award-recipient>
            </award-group>
            <award-group>
              <funding-source>
                <institution-wrap>
                  <institution>Japan Society for the Promotion of Science</institution>
                  <institution-id institution-id-type="doi" vocab="open-funder-registry">http://dx.doi.org/10.13039/501100001691</institution-id>
                </institution-wrap>
              </funding-source>
            </award-group>
            <award-group>
              <funding-source>
                <institution-wrap>
                  <institution>RIKEN ACCC</institution>
                </institution-wrap>
              </funding-source>
            </award-group>
          </funding-group>
          <custom-meta-group>
            <custom-meta>
              <meta-name>publisher-imprint-name</meta-name>
              <meta-value>Springer</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-issue-count</meta-name>
              <meta-value>1</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-article-count</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-pricelist-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-holder</meta-name>
              <meta-value>The Author(s)</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-contains-esm</meta-name>
              <meta-value>No</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-month</meta-name>
              <meta-value>1</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-day</meta-name>
              <meta-value>22</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-product</meta-name>
              <meta-value>ArchiveJournal</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-collection-editor</meta-name>
              <meta-value>Rajarshi Guha</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-grants-type</meta-name>
              <meta-value>OpenChoice</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>metadata-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>abstract-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodypdf-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodyhtml-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bibliography-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>esm-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>online-first</meta-name>
              <meta-value>false</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>pdf-file-reference</meta-name>
              <meta-value>BodyRef/PDF/13321_2019_Article_332.pdf</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>pdf-type</meta-name>
              <meta-value>Typeset</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>target-type</meta-name>
              <meta-value>OnlinePDF</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-type</meta-name>
              <meta-value>OriginalPaper</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-primary</meta-name>
              <meta-value>Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computer Applications in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Documentation and Information in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Theoretical and Computational Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computational Biology/Bioinformatics</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-collection</meta-name>
              <meta-value>Chemistry and Materials Science</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>open-access</meta-name>
              <meta-value>true</meta-value>
            </custom-meta>
          </custom-meta-group>
        </article-meta>
      </front>
      <body>
        <sec id="Sec1">
          <title>Introduction</title>
          <p id="Par4">There are several schools of thought in computer programming. Each school is represented by several programming languages and some languages are multi-paradigm.</p>
          <p id="Par5">In declarative languages (like SQL), a programmer writes a kind of mathematical specification of what to compute, and the compiler will automatically derive a program implementing this specification. Prolog [<xref ref-type="bibr" rid="CR1">1</xref>], is also such a programming language where the specification is given as a collection of logic predicates.</p>
          <p id="Par6">On the contrary, in imperative programming, the programmer writes in extensive details how to compute the result he wants. Ada, C, Fortran and Pascal are famous representatives of this style of programming.</p>
          <p id="Par7">In Object-Oriented programming, data structures and the allowed operations on them are grouped into classes. Classes can be hierarchically organized, and behavior inherited so that generic code can be reused between software components. C++, Java, Eiffel, Ruby and Python are famous members of this family of languages. Most Object-Oriented languages use the imperative style of programming.</p>
          <p id="Par8">In functional programming, a program is a collection of functions. State passing is done explicitly via function parameters. Functional programming has a mathematical taste and dates back to Lisp. Lisp, Scheme, OCaml, F#, Haskell, Scala, Racket and Clojure are representatives of the functional style of programming. There are several advantages to using functional programming [<xref ref-type="bibr" rid="CR2">2</xref>]. Since state passing is explicit, functional programs are easy to reason about. They easily fit in the head of the programmer. Some functional programming languages are pure (e.g. Haskell); they guarantee referential transparency, the fact that an expression can be replaced by its corresponding value without changing the program behavior. There are some articles about the productivity boost associated with functional programming [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>].</p>
          <p id="Par9">While there are not many, some functional programming libraries for chemoinformatics do exist. In Haskell, the ‘smiles’ library [<xref ref-type="bibr" rid="CR5">5</xref>] provides full support for the OpenSMILES specification [<xref ref-type="bibr" rid="CR6">6</xref>]. While the ‘radium’ library [<xref ref-type="bibr" rid="CR7">7</xref>] provides the periodic table plus readers and writers for SMILES and condensed formulas. In Scala, the ‘chem<inline-formula id="IEq1"><alternatives><mml:math id="IEq1_Math"><mml:msup><mml:mrow /><mml:mi mathvariant="normal">f</mml:mi></mml:msup></mml:math><tex-math id="IEq1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$^{\mathrm {f}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq1.gif" /></alternatives></inline-formula>’ library [<xref ref-type="bibr" rid="CR8">8</xref>] provides a purely functional cheminformatics toolkit [<xref ref-type="bibr" rid="CR9">9</xref>].</p>
          <p id="Par10">In this article, we concentrate on Objective Caml (OCaml [<xref ref-type="bibr" rid="CR10">10</xref>]), in the context of scientific software prototyping for chemoinformatics and structural bioinformatics. OCaml is a general purpose functional programming language developed at INRIA, the French national research institute for computer science, robotics and applied mathematics. OCaml focuses on expressiveness and safety. Some of the language’s strengths include its type system, with parametric polymorphism (called generics in Java, templates in C++) and type inference. Thanks to Hindley–Milner type inference [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR12">12</xref>], the OCaml programmer is freed from explicitly providing function parameters and result types. For a course on programming languages and types, we refer interested readers to Pierce [<xref ref-type="bibr" rid="CR13">13</xref>]. OCaml supports user-defined algebraic data types, records, sums/enums and pattern matching. Pattern matching is a generalization of the switch statement present in other languages. When pattern matching, a program is driven by the type of the parameter being matched upon. In OCaml, memory is managed automatically, by an incremental garbage collector, preventing memory corruption. Interactive use of OCaml is possible via a read-eval-print loop called the OCaml interpreter. Interacting with the interpreter is a standard way to test a function or to check that some functionality provided by a library works the way one understands it. In addition to its byte-code compiler and interpreter, OCaml offers a compiler that produces efficient executables. Tail-recursive functions are automatically translated to efficient loops by the OCaml compiler. OCaml also features an object-oriented layer, with multiple inheritance, parametric and virtual classes. While OCaml was initially used to develop symbolic computing applications, such as automatic theorem provers, compilers, interpreters and static program analyzers, it is now used to develop software in many other areas.</p>
          <p id="Par11">Functions are first-class values in OCaml. A function can be passed as an argument to, or returned by, another function. OCaml is a multi-paradigm language. For performance reasons, OCaml offers many imperative features (exceptions, modifiable variables, records, arrays and loop statements). OCaml built-in data types include not only integers, floating point numbers, booleans, characters and strings but also more advanced data types such as tuples, records, arrays and lists.</p>
          <p id="Par12">Large programs are easy to structure due to modules, which share some traits with classes in object-oriented programming. Modules can be organized hierarchically and parameterized over a number of other modules. Such a function, from modules to module is called a functor and allows high level generic programming.</p>
          <p id="Par13">OCaml’s evaluation strategy is strict. All parameters to a function are evaluated prior to entering the function’s body. The compilation of OCaml programs is fast. For example, the <inline-formula id="IEq2"><alternatives><mml:math id="IEq2_Math"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>3000</mml:mn></mml:mrow></mml:math><tex-math id="IEq2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim 3000$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq2.gif" /></alternatives></inline-formula> OCaml lines (without comments) of the consent software [<xref ref-type="bibr" rid="CR14">14</xref>] and its four executables compile from scratch and link in <inline-formula id="IEq3"><alternatives><mml:math id="IEq3_Math"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>3.8</mml:mn></mml:mrow></mml:math><tex-math id="IEq3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim 3.8$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq3.gif" /></alternatives></inline-formula> s (resp <inline-formula id="IEq4"><alternatives><mml:math id="IEq4_Math"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>1.1</mml:mn></mml:mrow></mml:math><tex-math id="IEq4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim 1.1$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq4.gif" /></alternatives></inline-formula>) using dune (version 1.6.2) and a single core (resp. up to all cores) of our desktop computer (16 cores, Intel Xeon 2.1GHz, 64GB RAM, Linux Ubuntu 18.04.1 LTS).</p>
          <p id="Par14">Strong static types are types which are enforced by the compiler. Due to the use of types and garbage collection, several run-time errors which plague other programming languages are absent from OCaml programs: null pointer exception, dereference after free, type cast exception, segmentation fault, unhandled switch cases and most memory leaks. In functional programming, more complex properties can be encoded and statically enforced by structuring code using monads [<xref ref-type="bibr" rid="CR15">15</xref>], which are pervasive in Haskell [<xref ref-type="bibr" rid="CR16">16</xref>], or by using dependent types (not available in OCaml, but in Coq [<xref ref-type="bibr" rid="CR17">17</xref>], Idris [<xref ref-type="bibr" rid="CR18">18</xref>, <xref ref-type="bibr" rid="CR19">19</xref>] and Agda [<xref ref-type="bibr" rid="CR20">20</xref>]). A function that is guaranteed to produce a result in a finite time is called total. Functions for which there is no such guarantee are called partial. For some functions, Idris can check if they are total. However, such advanced functional programming concepts are out of the scope of this article.</p>
          <p id="Par15">Despite not being very popular, OCaml is not a niche language. Most of its academic users work in computer science, on compilers and formal methods. But, OCaml is also used in bioinformatics [<xref ref-type="bibr" rid="CR21">21</xref>–<xref ref-type="bibr" rid="CR23">23</xref>], structural bioinformatics [<xref ref-type="bibr" rid="CR24">24</xref>–<xref ref-type="bibr" rid="CR27">27</xref>], chemoinformatics [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR28">28</xref>], systems biology [<xref ref-type="bibr" rid="CR29">29</xref>–<xref ref-type="bibr" rid="CR32">32</xref>] and ecotoxicology [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
          <p id="Par16">There are several industrial users of the language [<xref ref-type="bibr" rid="CR34">34</xref>] including Bloomberg, Citrix, Dassault Systèmes, Facebook [<xref ref-type="bibr" rid="CR35">35</xref>], Jane Street (a proprietary high frequency trading firm) and Microsoft.</p>
          <p id="Par17">OCaml has some successes in the industrial world: Lexifi’s Modeling Language for Finance [<xref ref-type="bibr" rid="CR36">36</xref>], the ASTRÉE Static Analyzer [<xref ref-type="bibr" rid="CR37">37</xref>] used by Airbus to certify on-board software and Microsoft’s static driver verifier [<xref ref-type="bibr" rid="CR38">38</xref>]. OCaml has several successes in the open-source world too: the Unison file synchronizer [<xref ref-type="bibr" rid="CR39">39</xref>], the MLdonkey [<xref ref-type="bibr" rid="CR40">40</xref>] multi-protocol peer-to-peer client, the Coq [<xref ref-type="bibr" rid="CR17">17</xref>] proof assistant [<xref ref-type="bibr" rid="CR41">41</xref>] and FFTW’s symbolic optimizer of fast Fourier transforms [<xref ref-type="bibr" rid="CR42">42</xref>].</p>
          <p id="Par18">In the remaining of this article, resources to learn OCaml are listed in “<xref rid="Sec3" ref-type="sec">Resources to learn OCaml</xref>” section. Explanations on types and how to read signatures of OCaml functions are given in “<xref rid="Sec4" ref-type="sec">Understanding OCaml type signatures</xref>” section. Tools for proficiency in OCaml are listed in “<xref rid="Sec5" ref-type="sec">An OCaml programming environment</xref>” section. Several uses cases of OCaml in Chemoinformatics and Structural Bioinformatics are given in “<xref rid="Sec7" ref-type="sec">OCaml in chemoinformatics and structural bioinformatics</xref>” section. The parallelization of scientific programs is dealt with in “<xref rid="Sec8" ref-type="sec">Accelerating chemoinformatics and structural bioinformatics in OCaml</xref>” section. Finally, strengths and weaknesses of the language and ecosystem are discussed (“<xref rid="Sec10" ref-type="sec">Scientific software prototyping in OCaml</xref>” and “<xref rid="Sec11" ref-type="sec">OCaml language and ecosystem drawbacks</xref>” sections), before concluding.</p>
        </sec>
        <sec id="Sec2" sec-type="methods">
          <title>Methods</title>
          <sec id="Sec3">
            <title>Resources to learn OCaml</title>
            <p id="Par19">There are several books introducing the language [<xref ref-type="bibr" rid="CR43">43</xref>–<xref ref-type="bibr" rid="CR45">45</xref>], some of them freely available online [<xref ref-type="bibr" rid="CR46">46</xref>–<xref ref-type="bibr" rid="CR48">48</xref>]. Other books [<xref ref-type="bibr" rid="CR49">49</xref>, <xref ref-type="bibr" rid="CR50">50</xref>] give an excellent introduction to functional programming.</p>
            <p id="Par20">The “Caml Trading” video, a talk given at Carnegie Mellon university [<xref ref-type="bibr" rid="CR51">51</xref>], explains in details why OCaml was chosen by a high frequency trading firm [<xref ref-type="bibr" rid="CR52">52</xref>, <xref ref-type="bibr" rid="CR53">53</xref>]. Like researchers, this company has the technical requirements of correctness, agility and performance.</p>
            <p id="Par21">To give a try at the language within a browser, OCamlPRO offers an OCaml interpreter and some basic lessons [<xref ref-type="bibr" rid="CR54">54</xref>]. To learn the language via the official documentation online [<xref ref-type="bibr" rid="CR55">55</xref>], here are the essential chapters: Chapter 1 “The core language”, Chapter 2 “The module system”, Chapter 4 “Labels and variants”, The Pervasives module (a set of functions which is always available to the programmer), The list module (the most useful data structure in functional programming). One should be able to start programming in OCaml after having read only this material.</p>
            <p id="Par22">The standard library documentation is available online [<xref ref-type="bibr" rid="CR56">56</xref>]. While it allows one to have an idea of the standard modules and their capabilities, it is not recommended for large scale software development. For real world programming, an extended standard library is necessary. For example OCaml-containers (code [<xref ref-type="bibr" rid="CR57">57</xref>] and documentation [<xref ref-type="bibr" rid="CR58">58</xref>]) or OCaml batteries-included (code [<xref ref-type="bibr" rid="CR59">59</xref>] and documentation [<xref ref-type="bibr" rid="CR60">60</xref>]) or Janestreet’s core (code [<xref ref-type="bibr" rid="CR61">61</xref>] and documentation [<xref ref-type="bibr" rid="CR62">62</xref>]).
</p>
            <p id="Par23">To give a taste of OCaml, Fig. <xref rid="Fig1" ref-type="fig">1</xref> shows the complete definition of a bisector-tree [<xref ref-type="bibr" rid="CR63">63</xref>]. A bisector tree is a data structure to store n-dimensional points provided a distance function between those points exists. Such a tree allows to do fast nearest neighbor searches and orthogonal queries [<xref ref-type="bibr" rid="CR64">64</xref>]. Vantage point trees [<xref ref-type="bibr" rid="CR65">65</xref>, <xref ref-type="bibr" rid="CR66">66</xref>] and <inline-formula id="IEq5"><alternatives><mml:math id="IEq5_Math"><mml:mi>μ</mml:mi></mml:math><tex-math id="IEq5_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mu$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq5.gif" /></alternatives></inline-formula>-trees [<xref ref-type="bibr" rid="CR67">67</xref>] are closely-related data-structures which could be used for the same purpose. Our implementation (opam package bst [<xref ref-type="bibr" rid="CR68">68</xref>]) is parameterized by a distance function and bucketized, i.e. leaves of a tree can hold up to <inline-formula id="IEq6"><alternatives><mml:math id="IEq6_Math"><mml:mrow><mml:mi>k</mml:mi><mml:mo>≥</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><tex-math id="IEq6_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k \ge 1$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq6.gif" /></alternatives></inline-formula> (user-chosen parameter) molecules.<fig id="Fig1"><label>Fig. 1</label><caption xml:lang="en"><p>OCaml code defining a bucketized bisector-tree. The code is parameterized by a point type (P.t). The implementation works with any point type, as long as it defines a distance function</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig1_HTML.png" id="MO1" /></fig></p>
          </sec>
          <sec id="Sec4">
            <title>Understanding OCaml type signatures</title>
            <sec>
              <p id="Par24">A type signature is a formal specification of the behavior of a function. Unfortunately, most of the time, this specification is incomplete and unless the function’s name is explicit enough, reading the documentation is necessary to understand the complete specification.</p>
            </sec>
            <sec>
              <p id="Par25">Since being able to read type signatures is essential in OCaml, we list in code as well as in plain English some of the type signatures of essential functions of the list module. The list module uses polymorphic types, i.e. a list can contain elements of any type, but a given list can only contain elements of the same type. <inline-formula id="IEq7"><alternatives><mml:math id="IEq7_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq7_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq7.gif" /></alternatives></inline-formula> and <inline-formula id="IEq8"><alternatives><mml:math id="IEq8_Math"><mml:mi>β</mml:mi></mml:math><tex-math id="IEq8_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq8.gif" /></alternatives></inline-formula> are standard names for polymorphic types.</p>
            </sec>
            <sec>
              <p id="Par26">For brevity later on, a few definitions are given hereafter.</p>
            </sec>
            <sec id="FPar1">
              <title>
                <bold>Definition 1</bold>
              </title>
              <p id="Par27">The syntax</p>
              <p id="Par28">
                <inline-formula id="IEq9">
                  <alternatives>
                    <mml:math id="IEq9_Math">
                      <mml:mrow>
                        <mml:mi mathvariant="monospace">apply</mml:mi>
                        <mml:mo>:</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>β</mml:mi>
                      </mml:mrow>
                    </mml:math>
                    <tex-math id="IEq9_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {apply} :\alpha \rightarrow \beta$$\end{document}</tex-math>
                    <inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq9.gif" />
                  </alternatives>
                </inline-formula>
              </p>
              <p id="Par29">defines the type of a function named apply from type <inline-formula id="IEq10"><alternatives><mml:math id="IEq10_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq10_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq10.gif" /></alternatives></inline-formula> to type <inline-formula id="IEq11"><alternatives><mml:math id="IEq11_Math"><mml:mi>β</mml:mi></mml:math><tex-math id="IEq11_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq11.gif" /></alternatives></inline-formula> in which <inline-formula id="IEq12"><alternatives><mml:math id="IEq12_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq12_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq12.gif" /></alternatives></inline-formula> and <inline-formula id="IEq13"><alternatives><mml:math id="IEq13_Math"><mml:mi>β</mml:mi></mml:math><tex-math id="IEq13_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq13.gif" /></alternatives></inline-formula> are type parameters. The equivalent C++ header file portion would be <fig id="Figa" position="anchor"><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Figa_HTML.png" position="anchor" id="MO2" /></fig></p>
            </sec>
            <sec id="FPar2">
              <title>
                <bold>Definition 2</bold>
              </title>
              <p id="Par30">Let’s call accumulate any function which takes an <inline-formula id="IEq14"><alternatives><mml:math id="IEq14_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq14_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq14.gif" /></alternatives></inline-formula>, a <inline-formula id="IEq15"><alternatives><mml:math id="IEq15_Math"><mml:mi>β</mml:mi></mml:math><tex-math id="IEq15_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq15.gif" /></alternatives></inline-formula> and returns an <inline-formula id="IEq16"><alternatives><mml:math id="IEq16_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq16_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq16.gif" /></alternatives></inline-formula>.</p>
              <p id="Par31">
                <inline-formula id="IEq17">
                  <alternatives>
                    <mml:math id="IEq17_Math">
                      <mml:mrow>
                        <mml:mi mathvariant="monospace">accumulate</mml:mi>
                        <mml:mo>:</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>β</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>α</mml:mi>
                      </mml:mrow>
                    </mml:math>
                    <tex-math id="IEq17_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {accumulate} :\alpha \rightarrow \beta \rightarrow \alpha$$\end{document}</tex-math>
                    <inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq17.gif" />
                  </alternatives>
                </inline-formula>
              </p>
            </sec>
            <sec id="FPar3">
              <title>
                <bold>Definition 3</bold>
              </title>
              <p id="Par32">Let’s call side-effect any function which takes an <inline-formula id="IEq18"><alternatives><mml:math id="IEq18_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq18_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq18.gif" /></alternatives></inline-formula> and returns nothing (in OCaml, nothing’s type is called unit).</p>
              <p id="Par33">
                <inline-formula id="IEq19">
                  <alternatives>
                    <mml:math id="IEq19_Math">
                      <mml:mrow>
                        <mml:mi mathvariant="monospace">side</mml:mi>
                        <mml:mo>-</mml:mo>
                        <mml:mi mathvariant="monospace">effect</mml:mi>
                        <mml:mo>:</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>u</mml:mi>
                        <mml:mi>n</mml:mi>
                        <mml:mi>i</mml:mi>
                        <mml:mi>t</mml:mi>
                      </mml:mrow>
                    </mml:math>
                    <tex-math id="IEq19_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {side-effect} :\alpha \rightarrow unit$$\end{document}</tex-math>
                    <inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq19.gif" />
                  </alternatives>
                </inline-formula>
              </p>
            </sec>
            <sec id="FPar4">
              <title>
                <bold>Definition 4</bold>
              </title>
              <p id="Par34">Let’s call predicate any function which takes an <inline-formula id="IEq20"><alternatives><mml:math id="IEq20_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq20_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq20.gif" /></alternatives></inline-formula> and returns a Boolean.</p>
              <p id="Par35">
                <inline-formula id="IEq21">
                  <alternatives>
                    <mml:math id="IEq21_Math">
                      <mml:mrow>
                        <mml:mi mathvariant="monospace">predicate</mml:mi>
                        <mml:mo>:</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>b</mml:mi>
                        <mml:mi>o</mml:mi>
                        <mml:mi>o</mml:mi>
                        <mml:mi>l</mml:mi>
                      </mml:mrow>
                    </mml:math>
                    <tex-math id="IEq21_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {predicate} :\alpha \rightarrow bool$$\end{document}</tex-math>
                    <inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq21.gif" />
                  </alternatives>
                </inline-formula>
              </p>
            </sec>
            <sec id="FPar5">
              <title>
                <bold>Definition 5</bold>
              </title>
              <p id="Par36">Let’s call comparison any function which takes two alphas and returns an integer.</p>
              <p id="Par37">
                <inline-formula id="IEq22">
                  <alternatives>
                    <mml:math id="IEq22_Math">
                      <mml:mrow>
                        <mml:mi mathvariant="monospace">comparison</mml:mi>
                        <mml:mo>:</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>α</mml:mi>
                        <mml:mo stretchy="false">→</mml:mo>
                        <mml:mi>i</mml:mi>
                        <mml:mi>n</mml:mi>
                        <mml:mi>t</mml:mi>
                      </mml:mrow>
                    </mml:math>
                    <tex-math id="IEq22_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {comparison} :\alpha \rightarrow \alpha \rightarrow int$$\end{document}</tex-math>
                    <inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq22.gif" />
                  </alternatives>
                </inline-formula>
              </p>
            </sec>
            <sec>
              <p id="Par38">Then, it becomes possible to explain some list functions and their type signatures.<def-list><def-item><term>cons:</term><def><p><inline-formula id="IEq23"><alternatives><mml:math id="IEq23_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq23_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha \rightarrow \alpha \ list \rightarrow \alpha \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq23.gif" /></alternatives></inline-formula></p><p id="Par39">The cons (construct) function takes an <inline-formula id="IEq24"><alternatives><mml:math id="IEq24_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq24_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq24.gif" /></alternatives></inline-formula>, a list of alphas and returns a list of alphas. The :: syntax operator is also available for the cons function. Hence, the OCaml expression <inline-formula id="IEq25"><alternatives><mml:math id="IEq25_Math"><mml:mrow><mml:mn mathvariant="monospace">1</mml:mn><mml:mo>:</mml:mo><mml:mo>:</mml:mo></mml:mrow></mml:math><tex-math id="IEq25_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {1 {:}:}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq25.gif" /></alternatives></inline-formula>[2;3;4] constructs the list [1;2;3;4] and <inline-formula id="IEq26"><alternatives><mml:math id="IEq26_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq26_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha = int$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq26.gif" /></alternatives></inline-formula>.</p></def></def-item><def-item><term>hd:</term><def><p><inline-formula id="IEq27"><alternatives><mml:math id="IEq27_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi></mml:mrow></mml:math><tex-math id="IEq27_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha \ list \rightarrow \alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq27.gif" /></alternatives></inline-formula></p><p id="Par40">hd (head) takes a list of alphas and returns an <inline-formula id="IEq28"><alternatives><mml:math id="IEq28_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq28_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq28.gif" /></alternatives></inline-formula> (the first one in the list).</p></def></def-item><def-item><term>tl:</term><def><p><inline-formula id="IEq29"><alternatives><mml:math id="IEq29_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq29_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha \ list \rightarrow \alpha \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq29.gif" /></alternatives></inline-formula></p><p id="Par41">tl (tail) takes a list of alphas and returns a list of alphas (all elements of the list except the first one). Note that head and tail will raise an exception if called on the empty list [].</p></def></def-item><def-item><term>length:</term><def><p><inline-formula id="IEq30"><alternatives><mml:math id="IEq30_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq30_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha \ list \rightarrow int$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq30.gif" /></alternatives></inline-formula></p><p id="Par42">length takes a list of alphas and returns an integer.</p></def></def-item><def-item><term>map:</term><def><p><inline-formula id="IEq31"><alternatives><mml:math id="IEq31_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>β</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>β</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq31_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow \beta ) \rightarrow \alpha \ list \rightarrow \beta \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq31.gif" /></alternatives></inline-formula></p><p id="Par43">This is the map function in Google’s map-reduce [<xref ref-type="bibr" rid="CR69">69</xref>]. map takes an apply, a list of alphas and returns a list of betas. Using the function with <inline-formula id="IEq32"><alternatives><mml:math id="IEq32_Math"><mml:mrow><mml:mi>α</mml:mi><mml:mo>=</mml:mo><mml:mi>β</mml:mi></mml:mrow></mml:math><tex-math id="IEq32_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha = \beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq32.gif" /></alternatives></inline-formula> is possible, but having the type signature using <inline-formula id="IEq33"><alternatives><mml:math id="IEq33_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq33_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq33.gif" /></alternatives></inline-formula> and <inline-formula id="IEq34"><alternatives><mml:math id="IEq34_Math"><mml:mi>β</mml:mi></mml:math><tex-math id="IEq34_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq34.gif" /></alternatives></inline-formula> makes the function more generic.</p></def></def-item><def-item><term>fold:</term><def><p><inline-formula id="IEq35"><alternatives><mml:math id="IEq35_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>β</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>β</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi></mml:mrow></mml:math><tex-math id="IEq35_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow \beta \rightarrow \alpha ) \rightarrow \alpha \rightarrow \beta \ list \rightarrow \alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq35.gif" /></alternatives></inline-formula></p><p id="Par44">The reduce in Google’s map-reduce [<xref ref-type="bibr" rid="CR69">69</xref>] is a kind of fold. fold takes an accumulator, an <inline-formula id="IEq36"><alternatives><mml:math id="IEq36_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq36_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq36.gif" /></alternatives></inline-formula>, a list of betas and returns an <inline-formula id="IEq37"><alternatives><mml:math id="IEq37_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq37_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq37.gif" /></alternatives></inline-formula>.</p></def></def-item><def-item><term>iter:</term><def><p><inline-formula id="IEq38"><alternatives><mml:math id="IEq38_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq38_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow unit) \rightarrow \alpha \ list \rightarrow unit$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq38.gif" /></alternatives></inline-formula></p><p id="Par45">iter (iterate) takes a side-effect, a list of alphas and returns nothing.</p></def></def-item><def-item><term>exists:</term><def><p><inline-formula id="IEq39"><alternatives><mml:math id="IEq39_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><tex-math id="IEq39_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow bool) \rightarrow \alpha \ list \rightarrow bool$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq39.gif" /></alternatives></inline-formula></p><p id="Par46">exists takes a predicate, a list of alphas and returns a Boolean.</p></def></def-item><def-item><term>filter:</term><def><p><inline-formula id="IEq40"><alternatives><mml:math id="IEq40_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq40_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow bool) \rightarrow \alpha \ list \rightarrow \alpha \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq40.gif" /></alternatives></inline-formula></p><p id="Par47">filter takes a predicate, a list of alphas and returns a list of alphas (the ones satisfying the predicate).</p></def></def-item><def-item><term>partition:</term><def><p><inline-formula id="IEq41"><alternatives><mml:math id="IEq41_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>b</mml:mi><mml:mi>o</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mrow /><mml:mo>∗</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq41_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow bool) \rightarrow \alpha \ list \rightarrow \alpha \ list * \alpha \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq41.gif" /></alternatives></inline-formula></p><p id="Par48">partition takes a predicate, a list of alphas and returns a pair of list of alphas (elements satisfying the predicate on the left, others on the right).</p></def></def-item><def-item><term>sort:</term><def><p><inline-formula id="IEq42"><alternatives><mml:math id="IEq42_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi><mml:mspace width="4pt" /><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq42_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(\alpha \rightarrow \alpha \rightarrow int) \rightarrow \alpha \ list \rightarrow \alpha \ list$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq42.gif" /></alternatives></inline-formula></p><p id="Par49">sort takes a comparison, a list of alphas and returns a list of alphas (sorted according to the order defined by the comparison function).</p></def></def-item></def-list>Programming most parts of the list module from scratch is an excellent exercise for any student of the language.</p>
            </sec>
          </sec>
          <sec id="Sec5">
            <title>An OCaml programming environment</title>
            <p id="Par50">Here follows a selection of tools for OCaml programming in a UNIX-like environment. While different users may use different tools, some of them are quite standard in a productive and modern development environment. <def-list><def-item><term>OPAM</term><def><p id="Par51">the OCaml Package Manager [<xref ref-type="bibr" rid="CR70">70</xref>] allows to automatically install OCaml software, libraries (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) and their dependencies (even system ones). OPAM is a source-based, user-level package manager. It can install a given compiler version and packages in a so-called “switch”, under the user’s home directory. The collection of open source OPAM packages is maintained by the community [<xref ref-type="bibr" rid="CR71">71</xref>].</p></def></def-item><def-item><term>opam-bundle</term><def><p id="Par52">can create a stand-alone, self-extracting and automatic installer for any OCaml software with an OPAM package description file [<xref ref-type="bibr" rid="CR72">72</xref>].</p></def></def-item><def-item><term>utop</term><def><p id="Par53">utop [<xref ref-type="bibr" rid="CR73">73</xref>] is an improved top-level (interactive interpreter). Utop supports line editing, history, automatic completion, colorful syntax highlighting and more. Utop can be controlled within Emacs or as a standalone terminal application. In the Python world, the equivalent of utop would be ipython.</p></def></def-item><def-item><term>Merlin</term><def><p id="Par54">is an editor helper [<xref ref-type="bibr" rid="CR74">74</xref>]. It provides completion, type information and source browsing (jump to definition/list uses) for Vim and Emacs. Thanks to Merlin, standard editors become full integrated development environments for OCaml.</p></def></def-item><def-item><term>Emacs</term><def><p id="Par55">with modes like tuareg, ocaml or merlin, writing OCaml programs under Emacs is productive. Vim also has good support for OCaml. Microsoft Visual Studio Code [<xref ref-type="bibr" rid="CR75">75</xref>] and Atom [<xref ref-type="bibr" rid="CR76">76</xref>] also have some support for OCaml.</p></def></def-item><def-item><term>Dune</term><def><p id="Par56">is the best choice to manage the compilation of OCaml projects. It is very fast, has no system dependencies and supports parallel builds on all platforms. Build descriptions are terse but still human-readable (see Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p></def></def-item><def-item><term>ocp-browser</term><def><p id="Par57">is a terminal program to browse the interface and documentation of all installed OCaml libraries in an OPAM switch. ocp-browser alleviates the need to search and read HTML documentation online while programming.</p></def></def-item><def-item><term>ocp-indent &amp; ocamlformat</term><def><p id="Par58">automate and standardize the indentation of OCaml source code. ocp-indent [<xref ref-type="bibr" rid="CR77">77</xref>] and ocamlformat [<xref ref-type="bibr" rid="CR78">78</xref>] integrate well with Emacs and Vim.</p></def></def-item></def-list><fig id="Fig2"><label>Fig. 2</label><caption xml:lang="en"><p>OPAM package description file for the bisector tree library. Such a file allows OPAM to automatically install/uninstall from source this library and all its transitive dependencies</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig2_HTML.png" id="MO3" /></fig><fig id="Fig3"><label>Fig. 3</label><caption xml:lang="en"><p>Complete build description file for the bisector tree library and it’s test executable</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig3_HTML.png" id="MO4" /></fig></p>
          </sec>
        </sec>
        <sec id="Sec6" sec-type="results">
          <title>Results</title>
          <sec id="Sec7">
            <title>OCaml in chemoinformatics and structural bioinformatics</title>
            <p id="Par59">We list some open source OCaml software that resulted from research in chemoinformatics and structural bioinformatics [<xref ref-type="bibr" rid="CR79">79</xref>].
</p>
            <p id="Par60">The bisector-tree data-structure describbed in the introduction is not a toy example. It can be used to accelerate similarity searches (Fig. <xref rid="Fig4" ref-type="fig">4</xref>).<fig id="Fig4"><label>Fig. 4</label><caption xml:lang="en"><p>Using a bisector-tree (BST) to accelerate similarity searches on a database of <inline-formula id="IEq43"><alternatives><mml:math id="IEq43_Math"><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup></mml:math><tex-math id="IEq43_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$10^6$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq43.gif" /></alternatives></inline-formula> PUBCHEM molecules. Molecular encoding is Faulon’s signature molecular descriptor [<xref ref-type="bibr" rid="CR80">80</xref>] (an unfolded-counted fingerprint) with height equal to one bond and parametrized over MOL2 atom types. The database is searched for all molecules with Tanimoto to query <inline-formula id="IEq44"><alternatives><mml:math id="IEq44_Math"><mml:mrow><mml:mo>≥</mml:mo><mml:mn>0.99</mml:mn></mml:mrow></mml:math><tex-math id="IEq44_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ge 0.99$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq44.gif" /></alternatives></inline-formula> (left; t = 0.01) or Tanimoto <inline-formula id="IEq46"><alternatives><mml:math id="IEq46_Math"><mml:mrow><mml:mo>≥</mml:mo><mml:mn>0.8</mml:mn></mml:mrow></mml:math><tex-math id="IEq46_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ge 0.8$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq46.gif" /></alternatives></inline-formula> (middle; t = 0.2). The brute force version is shown on the right. 50 molecules from the database were selected randomly to serve as queries. Creating the BST (database indexing) took approximately 5 min using a single core of our desktop computer</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig4_HTML.png" id="MO5" /></fig></p>
            <p id="Par61">For ligand-based virtual screening in 3D, the AutoCorrelation of Partial Charges method (ACPC [<xref ref-type="bibr" rid="CR28">28</xref>]) uses the autocorrelation function [<xref ref-type="bibr" rid="CR81">81</xref>] and linear binning [<xref ref-type="bibr" rid="CR82">82</xref>] to encode all atoms of a molecule into a rotation-translation invariant representation. ACPC allows to rank-order a database of compounds versus a query molecule and was released in open source (opam package acpc [<xref ref-type="bibr" rid="CR83">83</xref>]). ACPC performed remarkably well in retrospective ligand-based virtual screening experiments. At an average speed of 1649 molecule/s, ACPC reached an average median area under the curve of 0.81 on 40 Directory of Useful Decoys [<xref ref-type="bibr" rid="CR84">84</xref>] targets.</p>
            <p id="Par62">Consent [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR85">85</xref>] (opam package lbvs_consent [<xref ref-type="bibr" rid="CR86">86</xref>]) performs ligand-based virtual screening using consensus queries. When several active molecules are known, screening with all of them is recommended (instead of using just one). A consensus query can be created by screening serially with different ligands before merging similarity scores, or by combining chemical fingerprints. Consent was tested on 19 protein targets, 3776 known active and <inline-formula id="IEq48"><alternatives><mml:math id="IEq48_Math"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>2</mml:mn><mml:mo>×</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>6</mml:mn></mml:msup></mml:mrow></mml:math><tex-math id="IEq48_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim 2\times 10^6$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq48.gif" /></alternatives></inline-formula> inactive molecules from high throughput screening datasets. Three fingerprints were investigated (MACCS, ECFP4 and an unfolded fingerprint). Different consensus policies and consensus sizes (number of known actives) were benchmarked. A consensus fingerprint is always faster. In some circumstances, it can approach the performance of a consensus of scores in terms of Area Under the Receiver Operating Characteristic (ROC) Curve (AUC) and early retrieval.
</p>
            <p id="Par63">EleKit [<xref ref-type="bibr" rid="CR26">26</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] was the first structural bioinformatics software able to measure the similarity of a ligand’s electrostatic field with that of a protein binding at a protein-protein interface (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Ligands showing a high similarity in this setting are potential drugs breaking protein-protein interactions. EleKit was a complex software, driving PDB2PQR [<xref ref-type="bibr" rid="CR87">87</xref>], parsing PQR files, running the Adaptive Poisson-Boltzmann Solver (APBS [<xref ref-type="bibr" rid="CR88">88</xref>]) in parallel, parsing ABPS output files, creating and operating 3D Boolean masks.<fig id="Fig5"><label>Fig. 5</label><caption xml:lang="en"><p>Overview of EleKit applied to PDB codes 2B4J (<inline-formula id="IEq49"><alternatives><mml:math id="IEq49_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq49_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq49.gif" /></alternatives></inline-formula>) and 3LPU (<inline-formula id="IEq50"><alternatives><mml:math id="IEq50_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq50_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq50.gif" /></alternatives></inline-formula>). The “ligand-protein” is shown as a green surface in <inline-formula id="IEq51"><alternatives><mml:math id="IEq51_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq51_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq51.gif" /></alternatives></inline-formula> and <inline-formula id="IEq52"><alternatives><mml:math id="IEq52_Math"><mml:msub><mml:mn>2</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq52_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq52.gif" /></alternatives></inline-formula>. The “ligand-small-molecule” is shown as a smaller green surface in <inline-formula id="IEq53"><alternatives><mml:math id="IEq53_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq53_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq53.gif" /></alternatives></inline-formula> and <inline-formula id="IEq54"><alternatives><mml:math id="IEq54_Math"><mml:msub><mml:mn>2</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq54_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq54.gif" /></alternatives></inline-formula>. The receptor protein is shown as a gray cartoon in <inline-formula id="IEq55"><alternatives><mml:math id="IEq55_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq55_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq55.gif" /></alternatives></inline-formula> and <inline-formula id="IEq56"><alternatives><mml:math id="IEq56_Math"><mml:msub><mml:mn>1</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq56_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$1_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq56.gif" /></alternatives></inline-formula>. Electrostatic potential fields are calculated and stored in distinct grids (<inline-formula id="IEq57"><alternatives><mml:math id="IEq57_Math"><mml:msub><mml:mn>2</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq57_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq57.gif" /></alternatives></inline-formula> and <inline-formula id="IEq58"><alternatives><mml:math id="IEq58_Math"><mml:msub><mml:mn>2</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq58_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$2_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq58.gif" /></alternatives></inline-formula>). A boolean mask in 3D is created to select the solvent region nearby the interface (<inline-formula id="IEq59"><alternatives><mml:math id="IEq59_Math"><mml:msub><mml:mn>3</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq59_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$3_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq59.gif" /></alternatives></inline-formula> and <inline-formula id="IEq60"><alternatives><mml:math id="IEq60_Math"><mml:msub><mml:mn>3</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq60_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$3_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq60.gif" /></alternatives></inline-formula>). Finally, the similarity between electrostatic potentials in the masked region (<inline-formula id="IEq61"><alternatives><mml:math id="IEq61_Math"><mml:msub><mml:mn>4</mml:mn><mml:mi>A</mml:mi></mml:msub></mml:math><tex-math id="IEq61_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$4_{A}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq61.gif" /></alternatives></inline-formula> and <inline-formula id="IEq62"><alternatives><mml:math id="IEq62_Math"><mml:msub><mml:mn>4</mml:mn><mml:mi>B</mml:mi></mml:msub></mml:math><tex-math id="IEq62_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$4_{B}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq62.gif" /></alternatives></inline-formula>) is calculated using the Spearman rank correlation coefficient (figure adapted from Voet [<xref ref-type="bibr" rid="CR26">26</xref>])</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig5_HTML.png" id="MO6" /></fig></p>
            <p id="Par64">Also in structural bioinformatics, Fragger [<xref ref-type="bibr" rid="CR25">25</xref>, <xref ref-type="bibr" rid="CR89">89</xref>, <xref ref-type="bibr" rid="CR90">90</xref>] is a protein fragment picker for 3D structural queries. From a set of PDB files, Fragger can create a protein fragments database. All fragment lengths are supported. Using the triangular inequality, Fragger can efficiently search with a query fragment and a distance threshold. Matching fragments are ranked by distance to the query, which can contain structural gaps. The allowed amino acid sequences matching a query can be constrained. Fragger is meant for protein design, loop grafting and related activities.</p>
          </sec>
          <sec id="Sec8">
            <title>Accelerating chemoinformatics and structural bioinformatics in OCaml</title>
            <p id="Par66">OCaml executables are fast. In terms of speed, OCaml is placed just after Go in the Debian language shootout [<xref ref-type="bibr" rid="CR91">91</xref>]; the fastest language being C++ then C. However, execution speed is not the most important in a research setting. Programmer productivity is more important. In terms of verbosity, OCaml code is close to Python and far from Java (see Fig. <xref rid="Fig6" ref-type="fig">6</xref>). From past experience, an AUC calculation in OCaml is about 20 times faster than the equivalent python script [<xref ref-type="bibr" rid="CR92">92</xref>]. While performing an AUC calculation faster may not seem important, to scientifically validate a computational method, one might run thousands of such calculations.<fig id="Fig6"><label>Fig. 6</label><caption xml:lang="en"><p>Valid hello world programs to illustrate the <italic>idiomatic</italic> verbosity of Java, C++, OCaml and Python-2.7. Keep in mind that in many programming languages, programmers can make their source code arbitrarily small, sometimes to the point that a program is no more readable</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig6_HTML.png" id="MO7" /></fig></p>
            <p id="Par67">Since molecules can be processed independently, most chemoinformatics tasks are easy to parallelize. The Parmap OCaml library [<xref ref-type="bibr" rid="CR94">94</xref>] provides parallel iter, map and fold functions for arrays and lists on multi-core computers. Parallelizing code with Parmap is trivial (Fig. <xref rid="Fig7" ref-type="fig">7</xref>). Parmap preserves semantics while achieving nearly optimal speedup [<xref ref-type="bibr" rid="CR94">94</xref>] (Figs. <xref rid="Fig8" ref-type="fig">8</xref>, <xref rid="Fig9" ref-type="fig">9</xref>).<fig id="Fig7"><label>Fig. 7</label><caption xml:lang="en"><p>Git diff after parallelization of EleKit. Parallelizing EleKit using Parmap was a two lines change in <inline-formula id="IEq63"><alternatives><mml:math id="IEq63_Math"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>3000</mml:mn></mml:mrow></mml:math><tex-math id="IEq63_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sim 3000$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq63.gif" /></alternatives></inline-formula> lines of code. All program development and debugging was done on sequential code. With an electrostatic calculation run-time of approximately 2 min per small molecule, parallelization was mandatory for production use of EleKit on thousands of molecules</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig7_HTML.png" id="MO8" /></fig><fig id="Fig8"><label>Fig. 8</label><caption xml:lang="en"><p>Performance of ACPC in the electrostatic space, using Parmap for parallelization. Open Babel 2.3.9’s MACCS and FP4 C++ implementations run-times are shown to give an order of magnitude. Run-times were averaged over three runs. Protein target: Human immunodeficiency virus type 1 protease (HIVPR) from the Database of Useful Decoys Enhanced (DUDE [<xref ref-type="bibr" rid="CR93">93</xref>]); 26450 ligands and decoys</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig8_HTML.png" id="MO9" /></fig><fig id="Fig9"><label>Fig. 9</label><caption xml:lang="en"><p>Wall-clock time to analyze hundreds of molecules with EleKit and Parmap. Up to four cores, the parallelization performance is almost indistinguishable from a perfectly parallelizing program (theoretical limit)</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig9_HTML.png" id="MO10" /></fig></p>
            <p id="Par68">For stream computing, when a program cannot hold all items in memory (which is required by Parmap), we developed the parany library (opam package parany [<xref ref-type="bibr" rid="CR95">95</xref>]). Parany is more generic than parmap. It is structured around three functions. An unfold function called demux, an apply function called work and a fold/reduce function called mux.<list list-type="bullet"><list-item><p id="Par69"><inline-formula id="IEq64"><alternatives><mml:math id="IEq64_Math"><mml:mrow><mml:mi mathvariant="monospace">demux</mml:mi><mml:mo>:</mml:mo><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>α</mml:mi></mml:mrow></mml:math><tex-math id="IEq64_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {demux} :unit \rightarrow \alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq64.gif" /></alternatives></inline-formula></p></list-item><list-item><p id="Par70"><inline-formula id="IEq65"><alternatives><mml:math id="IEq65_Math"><mml:mrow><mml:mi mathvariant="monospace">work</mml:mi><mml:mo>:</mml:mo><mml:mi>α</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>β</mml:mi></mml:mrow></mml:math><tex-math id="IEq65_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {work} :\alpha \rightarrow \beta$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq65.gif" /></alternatives></inline-formula></p></list-item><list-item><p id="Par71"><inline-formula id="IEq66"><alternatives><mml:math id="IEq66_Math"><mml:mrow><mml:mi mathvariant="monospace">mux</mml:mi><mml:mo>:</mml:mo><mml:mi>β</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:math><tex-math id="IEq66_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\texttt {mux} :\beta \rightarrow unit$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="13321_2019_332_Article_IEq66.gif" /></alternatives></inline-formula></p></list-item></list>Some more complex technologies exist to write even higher performance OCaml programs. SPOC [<xref ref-type="bibr" rid="CR96">96</xref>] is an OCaml library allowing general purpose GPU programming, using Cuda or OpenCL kernels. SPOC allows to create specific data sets usable by those kernels and automatically manages memory transfers between CPU and GPU.</p>
            <p id="Par72">BER MetaOCaml [<xref ref-type="bibr" rid="CR97">97</xref>] is an OCaml dialect for multi-stage programming [<xref ref-type="bibr" rid="CR98">98</xref>]. It allows run-time C code generation and program execution. BER MetaOCaml can be used to compile domain-specific languages and automate the specialization of high-performance computational kernels.</p>
          </sec>
        </sec>
        <sec id="Sec9" sec-type="discussion">
          <title>Discussion</title>
          <sec id="Sec10">
            <title>Scientific software prototyping in OCaml</title>
            <p id="Par74">In an academic research setting, it is common for a software project to be severely under staffed, compared to industrial standards, i.e. a single person might be in charge of the full software life-cycle (requirements gathering, specification, design, implementation, speed optimization, parameter tuning, test and validation, release and packaging, maintenance). In research, requirements are ill-defined and changing. Since the purpose of the software is to scientifically show that an idea works, having a high confidence in the software is important. Moreover, during the course of the project, design decisions might change and impact the whole code-base. OCaml types and compiler allow to refactor software fast and without missing any place that needs changing (see Fig. <xref rid="Fig10" ref-type="fig">10</xref> for an example of refactoring that only took a few minutes). Thus, during prototyping, the programmer is not afraid to do drastic changes to the software (agility). In such a setting, and when using OCaml, we propose to abandon the practice of unit tests. Because, there is not enough manpower to write and maintain them. Note however that OCaml has tools for programmers who want to write unit [<xref ref-type="bibr" rid="CR99">99</xref>] or property-based tests [<xref ref-type="bibr" rid="CR100">100</xref>] as comments inside their code. Since the software will change a lot during its lifetime, maintaining unit tests would be too costly and slow down the pace of research. Of course, if we were using a dynamically-typed language such as Python or Ruby, such a decision would be risky and many problems discovered at run-time. Instead of unit tests, we propose to use regression tests and end-to-end validation, once a prototype is advanced enough. For example, a valid output can be verified by hand from a known input and added to a set of regression tests.<fig id="Fig10"><label>Fig. 10</label><caption xml:lang="en"><p>Git diff excerpt of an actual code refactoring in the SVM part of a category-QSAR software. Sometimes, the R svmpath package encounters numerical problems, like an exactly or computationally singular matrix. To deal with such rare cases, it was decided to drop a model from the bag of models. Since a bagging classifier with 21 models was being trained, dropping one or two models was deemed better than letting the whole software crash. Hence, an option type was introduced in the function optimal_lambda from file ‘svm_common.ml’, along with proper warning messages. Then, the compiler forced updating the rest of the code</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig10_HTML.png" id="MO11" /></fig></p>
            <p id="Par75">In the same vain, we propose to abandon OCaml interface files when prototyping. Having to maintain interface files slows down refactoring. Interface files of libraries should only be added once a project is going to be released.</p>
            <p id="Par76">When programming in OCaml, one strongly relies on the compiler to catch errors. It is common to see a complex but compiling OCaml program run without any run-time error, even when running for the first time. Programs written in Haskell have this exact same property.</p>
          </sec>
          <sec id="Sec11">
            <title>OCaml language and ecosystem drawbacks</title>
            <p id="Par77">When working in OCaml, if functors and module signatures are heavily used, compiler error messages can become hard to understand. Also, the required syntax is nontrivial and might need some practice.</p>
            <p id="Par78">For chemoinformatics, a parser for Simplified Molecular-Input Line-Entry System (SMILES [<xref ref-type="bibr" rid="CR101">101</xref>]) and a parser for SMiles ARbitrary Target Specification (SMARTS [<xref ref-type="bibr" rid="CR102">102</xref>]) are the most obvious missing libraries. Also, nowadays it would not be reasonable to do chemoinformatics research without using the functionalities of the Chemistry Development Kit (CDK [<xref ref-type="bibr" rid="CR103">103</xref>, <xref ref-type="bibr" rid="CR104">104</xref>]), Rdkit [<xref ref-type="bibr" rid="CR105">105</xref>] or Open Babel [<xref ref-type="bibr" rid="CR106">106</xref>]. Since there are no OCaml bindings to those libraries, our current solution is to write small programs interfacing with them, in order to extract or import data to/from them. By following the UNIX design principles [<xref ref-type="bibr" rid="CR107">107</xref>], it is easy to create, debug and maintain software that exchange data via text files. However, in some projects [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR26">26</xref>, <xref ref-type="bibr" rid="CR28">28</xref>], we have written parsers for parts of the PDB [<xref ref-type="bibr" rid="CR108">108</xref>], PQR [<xref ref-type="bibr" rid="CR87">87</xref>] and MOL2 [<xref ref-type="bibr" rid="CR109">109</xref>] file formats.</p>
            <p id="Par79">Currently, the OCaml ecosystem is weak in the Machine Learning field, especially when compared to Python and the Scikit-learn [<xref ref-type="bibr" rid="CR110">110</xref>] library. At least, there is one library for classification using random forests [<xref ref-type="bibr" rid="CR111">111</xref>] (opam package orandforest [<xref ref-type="bibr" rid="CR112">112</xref>]) and a numerical library (opam package owl [<xref ref-type="bibr" rid="CR113">113</xref>, <xref ref-type="bibr" rid="CR114">114</xref>]) with some machine learning functionalities like regression and neural networks. For deep learning, some OCaml bindings to TensorFlow [<xref ref-type="bibr" rid="CR115">115</xref>, <xref ref-type="bibr" rid="CR116">116</xref>] and PyTorch [<xref ref-type="bibr" rid="CR117">117</xref>] have been released recently. To palliate the deficiency in machine learning libraries, we have recently developed several OCaml packages taping into the R [<xref ref-type="bibr" rid="CR118">118</xref>] ecosystem; for support vector machines (opam package orsvm-e1071 [<xref ref-type="bibr" rid="CR119">119</xref>]), random forests (opam package orrandomForest [<xref ref-type="bibr" rid="CR120">120</xref>]) and gradient boosted trees (opam package orxgboost [<xref ref-type="bibr" rid="CR102">102</xref>]). We have also developed the classification performance metrics library in order to benchmark virtual screening experiments (opam package cpmlib [<xref ref-type="bibr" rid="CR121">121</xref>]). Cpmlib features ROC curves, AUC [<xref ref-type="bibr" rid="CR122">122</xref>], enrichment factor, power metric [<xref ref-type="bibr" rid="CR123">123</xref>] and Boltzmann-Enhanced Discrimination of ROC (BEDROC [<xref ref-type="bibr" rid="CR124">124</xref>]).</p>
            <p id="Par80">OCaml is best for back-end and system [<xref ref-type="bibr" rid="CR125">125</xref>] programming. To quickly annotate molecules or protein structures, rather than doing graphics programming in OCaml, we recommend generating BILD [<xref ref-type="bibr" rid="CR126">126</xref>] files. BILD files are simple, human-readable line-oriented text files, easy to generate by a program or by hand. They can be viewed within UCSF Chimera [<xref ref-type="bibr" rid="CR127">127</xref>] (Fig. <xref rid="Fig11" ref-type="fig">11</xref>).<fig id="Fig11"><label>Fig. 11</label><caption xml:lang="en"><p>Graphical annotation of a query molecule using a BILD file generated by the ACPC software for viewing with UCSF Chimera. A query molecule of the CDK2 protein target is annotated in the electrostatic space, based on atomic contributions to AUC. Transparent green balls highlight atoms which if masked (their contribution is removed from the molecular encoding/fingerprint) would decrease the AUC reached by this molecule in a similarity search</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_332_Fig11_HTML.png" id="MO12" /></fig></p>
            <p id="Par81">While OCaml is a portable language, not all programmers write portable programs. OCaml code can be automatically translated to JavaScript [<xref ref-type="bibr" rid="CR128">128</xref>] to target web browsers (opam package js_of_ocaml). But parallel programs or programs relying extensively on the Unix module might not work under Windows. Also, there may be less libraries/opam packages available under Windows. If Windows support is a primary concern, F# or Haskell [<xref ref-type="bibr" rid="CR16">16</xref>] might be safer programming language choices. If access to a comprehensive chemoinformatics library is a prime concern, Scala might be a safer choice since its interoperability with Java would allow using the Chemistry Development Kit.</p>
            <p id="Par82">For managers, the fact that there are few OCaml programmers available on the market is a concern. However, we feel that programmers can become proficient in the language quickly, so this is not a major concern.</p>
          </sec>
        </sec>
        <sec id="Sec12" sec-type="conclusions">
          <title>Conclusions</title>
          <p id="Par83">OCaml is a strongly typed programming language of the functional family. In this article, we have tried to share our experience in using it for Chemoinformatics and Structural Bioinformatics research.</p>
          <p id="Par84">This article should not be seen as an attempt at asserting the superiority of OCaml and/or functional programming over other programming languages and approaches. Rather, we encourage researchers to choose and use the tools that make them the most productive, even if those tools are not mainstream.</p>
          <p id="Par85">To us, OCaml has been proven quite productive for software prototyping in Chemoinformatics and Structural Bioinformatics method development. The software demonstrated here were used intensively and timely during scientific validation campaigns, on many molecules and protein targets. We have never regretted our choice of OCaml and still use it today.</p>
        </sec>
      </body>
      <back>
        <ack>
          <title>Authors' contributions</title>
          <sec>
            <p>FB wrote the software, ran computational experiments and prepared all figures and tables. All authors read and approved the final manuscript.</p>
          </sec>
          <sec id="FPar6">
            <title>Acknowlegements</title>
            <p id="Par87">FB is a JSPS international research fellow <ext-link xlink:href="http://www.jsps.go.jp/english" ext-link-type="uri">http://www.jsps.go.jp/english</ext-link>. This work was supported by JST PRESTO Grant Number JPMJPR15D8 and JSPS KAKENHI Grant Numbers 18H03334 and 18H02395. FB acknowledges the use of ChemAxon’s JChem (2017) <ext-link xlink:href="http://www.chemaxon.com" ext-link-type="uri">http://www.chemaxon.com</ext-link>. All authors acknowledge the use of Omega 2.5.1.4 from OpenEye Scientific Software, Santa Fe, NM <ext-link xlink:href="http://www.eyesopen.com" ext-link-type="uri">http://www.eyesopen.com</ext-link>. Some of the computing power used in this study was provided by RIKEN ACCC, on the Hokusai Large Memory Application Computing Server. FB thanks all participants in the OCaml open-source ecosystem for the many excellent libraries, tools and user support.</p>
          </sec>
          <sec id="FPar7">
            <title>Competing interests</title>
            <p id="Par88">The authors declare that they have no competing interests.</p>
          </sec>
          <sec id="FPar9">
            <title>Consent for publication</title>
            <p id="Par90">Not applicable.</p>
          </sec>
          <sec id="FPar8">
            <title>Ethics approval and consent to participate</title>
            <p id="Par89">Not applicable.</p>
          </sec>
          <sec>
            <title>Publisher's Note</title>
            <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
          </sec>
        </ack>
        <ref-list id="Bib1">
          <title>References</title>
          <ref-list>
            <ref id="CR1">
              <label>1.</label>
              <mixed-citation publication-type="other">Colmerauer A, Roussel P (1996) The birth of Prolog. In: History of programming languages—II. ACM, New York, pp 331–367. <ext-link xlink:href="10.1145/234286.1057820" ext-link-type="doi">https://doi.org/10.1145/234286.1057820</ext-link></mixed-citation>
            </ref>
            <ref id="CR2">
              <label>2.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Hughes</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Why functional programming matters</article-title>
                <source>Comput J</source>
                <year>1989</year>
                <volume>32</volume>
                <issue>2</issue>
                <fpage>98</fpage>
                <lpage>107</lpage>
                <pub-id pub-id-type="doi">10.1093/comjnl/32.2.98</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR3">
              <label>3.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Hudak</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Haskell vs Ada vs C++ vs Awk vs ... an experiment in software prototyping productivity</article-title>
                <source>Contract</source>
                <year>1994</year>
                <volume>14</volume>
                <issue>92–C</issue>
                <fpage>0153</fpage>
              </mixed-citation>
            </ref>
            <ref id="CR4">
              <label>4.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Wiger</surname>
                    <given-names>U</given-names>
                  </name>
                </person-group>
                <source>Four-fold increase in productivity and quality—industrial-strength functional programming in telecom-class products</source>
                <year>2001</year>
                <publisher-loc>Stockholm</publisher-loc>
                <publisher-name>Ericsson Telecom Ab</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR5">
              <label>5.</label>
              <mixed-citation publication-type="other">Pavel Y (2018) Full support of OpenSMILES specification for Haskell. <ext-link xlink:href="http://github.com/zmactep/smiles" ext-link-type="uri">http://github.com/zmactep/smiles</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR6">
              <label>6.</label>
              <mixed-citation publication-type="other">A, JC (2018) OpenSMILES specification version 1.0, 2016-05-15. <ext-link xlink:href="http://opensmiles.org/opensmiles.html" ext-link-type="uri">http://opensmiles.org/opensmiles.html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR7">
              <label>7.</label>
              <mixed-citation publication-type="other">Krzysztof L (2018) Haskell library for chemistry. <ext-link xlink:href="http://github.com/klangner/radium" ext-link-type="uri">http://github.com/klangner/radium</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR8">
              <label>8.</label>
              <mixed-citation publication-type="other">Stefan H (2018) Purely functional cheminformatics toolkit written in Scala. <ext-link xlink:href="http://github.com/stefan-hoeck/chemf" ext-link-type="uri">http://github.com/stefan-hoeck/chemf</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR9">
              <label>9.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Höck</surname>
                    <given-names>S</given-names>
                  </name>
                  <name>
                    <surname>Riedl</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">chemf: a purely functional chemistry toolkit</article-title>
                <source>J Cheminform</source>
                <year>2012</year>
                <volume>4</volume>
                <issue>1</issue>
                <fpage>38</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3sXptlyjtrc%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/1758-2946-4-38</pub-id>
                <pub-id pub-id-type="pmid">23253942</pub-id>
                <pub-id pub-id-type="pmcid">3660204</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR10">
              <label>10.</label>
              <mixed-citation publication-type="other">Leroy X, Doligez D, Frisch A, Garrigue J, Rémy D et al (2016) The OCaml system release 4.04: Documentation and user’s manual, Inria. <ext-link xlink:href="https://hal.inria.fr/hal-00930213v3/document" ext-link-type="uri">https://hal.inria.fr/hal-00930213v3/document</ext-link></mixed-citation>
            </ref>
            <ref id="CR11">
              <label>11.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Hindley</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The principal type-scheme of an object in combinatory logic</article-title>
                <source>Trans Am Math Soc</source>
                <year>1969</year>
                <volume>146</volume>
                <fpage>29</fpage>
                <lpage>60</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR12">
              <label>12.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Milner</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A theory of type polymorphism in programming</article-title>
                <source>J Comput Syst Sci</source>
                <year>1978</year>
                <volume>17</volume>
                <issue>3</issue>
                <fpage>348</fpage>
                <lpage>375</lpage>
                <pub-id pub-id-type="doi">10.1016/0022-0000(78)90014-4</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR13">
              <label>13.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Pierce</surname>
                    <given-names>BC</given-names>
                  </name>
                </person-group>
                <source>Types and programming languages</source>
                <year>2002</year>
                <publisher-loc>Cambridge</publisher-loc>
                <publisher-name>MIT press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR14">
              <label>14.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Berenger</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Vu</surname>
                    <given-names>O</given-names>
                  </name>
                  <name>
                    <surname>Meiler</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Consensus queries in ligand-based virtual screening experiments</article-title>
                <source>J Cheminform</source>
                <year>2017</year>
                <volume>9</volume>
                <issue>1</issue>
                <fpage>60</fpage>
                <pub-id pub-id-type="doi">10.1186/s13321-017-0248-5</pub-id>
                <pub-id pub-id-type="pmid">29185065</pub-id>
                <pub-id pub-id-type="pmcid">5705545</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR15">
              <label>15.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Wadler</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Comprehending monads</article-title>
                <source>Proceedings of the 1990 ACM conference on LISP and functional programming</source>
                <year>1990</year>
                <publisher-loc>New York</publisher-loc>
                <publisher-name>ACM</publisher-name>
                <fpage>61</fpage>
                <lpage>78</lpage>
                <pub-id pub-id-type="doi">10.1145/91556.91592</pub-id>
                <comment>(ISBN: 0-89791-368-X)</comment>
              </mixed-citation>
            </ref>
            <ref id="CR16">
              <label>16.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Peyton Jones</surname>
                    <given-names>SL</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Haskell 98: introduction</article-title>
                <source>J Funct Program</source>
                <year>2003</year>
                <volume>13</volume>
                <issue>1</issue>
                <fpage>0</fpage>
                <lpage>6</lpage>
                <pub-id pub-id-type="doi">10.1017/S0956796803000315</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR17">
              <label>17.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Barras</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Boutin</surname>
                    <given-names>S</given-names>
                  </name>
                  <name>
                    <surname>Cornes</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Courant</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Filliatre</surname>
                    <given-names>J-C</given-names>
                  </name>
                  <name>
                    <surname>Gimenez</surname>
                    <given-names>E</given-names>
                  </name>
                  <name>
                    <surname>Herbelin</surname>
                    <given-names>H</given-names>
                  </name>
                  <name>
                    <surname>Huet</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Munoz</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Murthy</surname>
                    <given-names>C</given-names>
                  </name>
                  <etal />
                </person-group>
                <source>The Coq proof assistant reference manual: version 6.1</source>
                <year>1997</year>
                <publisher-loc>Paris</publisher-loc>
                <publisher-name>INRIA</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR18">
              <label>18.</label>
              <mixed-citation publication-type="other">Brady E et al (2008) Idris, a language with dependent types. In: IFL 2008</mixed-citation>
            </ref>
            <ref id="CR19">
              <label>19.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Brady</surname>
                    <given-names>E</given-names>
                  </name>
                </person-group>
                <source>Type-driven development with Idris</source>
                <year>2017</year>
                <publisher-loc>Shelter Island</publisher-loc>
                <publisher-name>Manning Publications</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR20">
              <label>20.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Norell</surname>
                    <given-names>U</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Koopman</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Plasmeijer</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Swierstra</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Dependently typed programming in Agda</article-title>
                <source>6th international school on advanced functional programming, AFP 2008</source>
                <year>2009</year>
                <publisher-loc>Berlin, Heidelberg</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>230</fpage>
                <lpage>266</lpage>
                <pub-id pub-id-type="doi">10.1007/978-3-642-04652-0_5</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR21">
              <label>21.</label>
              <mixed-citation publication-type="other">Mondet S, Aksoy BA, Rozenberg L, Hodes I, Hammerbacher J (2017) Bioinformatics workflow management with the Wobidisco ecosystem. <ext-link xlink:href="10.1101/213884" ext-link-type="doi">https://doi.org/10.1101/213884</ext-link></mixed-citation>
            </ref>
            <ref id="CR22">
              <label>22.</label>
              <mixed-citation publication-type="other">Rubinsteyn A, Kodysh J, Hodes I, Mondet S, Aksoy BA, Finnigan JP, Bhardwaj N, Hammerbacher J (2017) Computational pipeline for the PGV-001 neoantigen vaccine trial. <ext-link xlink:href="10.1101/174516" ext-link-type="doi">https://doi.org/10.1101/174516</ext-link></mixed-citation>
            </ref>
            <ref id="CR23">
              <label>23.</label>
              <mixed-citation publication-type="other">Rozenberg L, Hammerbacher J (2018) Prohlatype: a probabilistic framework for HLA typing. <ext-link xlink:href="10.1101/244962" ext-link-type="doi">https://doi.org/10.1101/244962</ext-link></mixed-citation>
            </ref>
            <ref id="CR24">
              <label>24.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Jambon</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Andrieu</surname>
                    <given-names>O</given-names>
                  </name>
                  <name>
                    <surname>Combet</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Deléage</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Delfaud</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Geourjon</surname>
                    <given-names>C</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The SuMo server: 3D search for protein functional sites</article-title>
                <source>Bioinformatics</source>
                <year>2005</year>
                <volume>21</volume>
                <issue>20</issue>
                <fpage>3929</fpage>
                <lpage>3930</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2MXhtFWltrzN</pub-id>
                <pub-id pub-id-type="doi">10.1093/bioinformatics/bti645</pub-id>
                <pub-id pub-id-type="pmid">16141250</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR25">
              <label>25.</label>
              <mixed-citation publication-type="other">Berenger F, Simoncini D, Voet A, Shrestha R, Zhang KYJ (2018) Fragger: a protein fragment picker for structural queries [version 2; referees: 2 approved]. F1000Research 6(1722). <ext-link xlink:href="10.12688/f1000research.12486.2" ext-link-type="doi">https://doi.org/10.12688/f1000research.12486.2</ext-link></mixed-citation>
            </ref>
            <ref id="CR26">
              <label>26.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Voet</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Berenger</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Zhang</surname>
                    <given-names>KYJ</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Electrostatic similarities between protein and small molecule ligands facilitate the design of protein–protein interaction inhibitors</article-title>
                <source>PLoS ONE</source>
                <year>2013</year>
                <volume>8</volume>
                <issue>10</issue>
                <fpage>1</fpage>
                <lpage>9</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3sXhs1egs7fP</pub-id>
                <pub-id pub-id-type="doi">10.1371/journal.pone.0075762</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR27">
              <label>27.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Voet</surname>
                    <given-names>ARD</given-names>
                  </name>
                  <name>
                    <surname>Kumar</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Berenger</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Zhang</surname>
                    <given-names>KYJ</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Combining in silico and in cerebro approaches for virtual screening and pose prediction in SAMPL4</article-title>
                <source>J Comput Aided Mol Des</source>
                <year>2014</year>
                <volume>28</volume>
                <issue>4</issue>
                <fpage>363</fpage>
                <lpage>373</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2cXhtlSru7s%3D</pub-id>
                <pub-id pub-id-type="doi">10.1007/s10822-013-9702-2</pub-id>
                <pub-id pub-id-type="pmid">24446075</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR28">
              <label>28.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Berenger</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Voet</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Lee</surname>
                    <given-names>XY</given-names>
                  </name>
                  <name>
                    <surname>Zhang</surname>
                    <given-names>KYJ</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A rotation-translation invariant molecular descriptor of partial charges and its use in ligand-based virtual screening</article-title>
                <source>J Cheminform</source>
                <year>2014</year>
                <volume>6</volume>
                <issue>1</issue>
                <fpage>23</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2MXivFSktrk%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/1758-2946-6-23</pub-id>
                <pub-id pub-id-type="pmid">24887178</pub-id>
                <pub-id pub-id-type="pmcid">4030740</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR29">
              <label>29.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Danos</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Feret</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Fontana</surname>
                    <given-names>W</given-names>
                  </name>
                  <name>
                    <surname>Harmer</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Krivine</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Caires</surname>
                    <given-names>L</given-names>
                  </name>
                  <name>
                    <surname>Vasconcelos</surname>
                    <given-names>VT</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Rule-based modelling of cellular signalling</article-title>
                <source>CONCUR 2007—concurrency theory</source>
                <year>2007</year>
                <publisher-loc>Berlin</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>17</fpage>
                <lpage>41</lpage>
                <pub-id pub-id-type="doi">10.1007/978-3-540-74407-8_3</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR30">
              <label>30.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Feret</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Danos</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Krivine</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Harmer</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Fontana</surname>
                    <given-names>W</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Internal coarse-graining of molecular systems</article-title>
                <source>Proc Natl Acad Sci</source>
                <year>2009</year>
                <volume>106</volume>
                <issue>16</issue>
                <fpage>6453</fpage>
                <lpage>6458</lpage>
                <pub-id pub-id-type="doi">10.1073/pnas.0809908106</pub-id>
                <pub-id pub-id-type="pmid">19346467</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR31">
              <label>31.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Deeds</surname>
                    <given-names>EJ</given-names>
                  </name>
                  <name>
                    <surname>Krivine</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Feret</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Danos</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Fontana</surname>
                    <given-names>W</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Combinatorial complexity and compositional drift in protein interaction networks</article-title>
                <source>PLoS ONE</source>
                <year>2012</year>
                <volume>7</volume>
                <issue>3</issue>
                <fpage>1</fpage>
                <lpage>14</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC38XktF2ju7c%3D</pub-id>
                <pub-id pub-id-type="doi">10.1371/journal.pone.0032032</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR32">
              <label>32.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Boutillier</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Maasha</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Li</surname>
                    <given-names>X</given-names>
                  </name>
                  <name>
                    <surname>Medina-Abarca</surname>
                    <given-names>HF</given-names>
                  </name>
                  <name>
                    <surname>Krivine</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Feret</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Cristescu</surname>
                    <given-names>I</given-names>
                  </name>
                  <name>
                    <surname>Forbes</surname>
                    <given-names>AG</given-names>
                  </name>
                  <name>
                    <surname>Fontana</surname>
                    <given-names>W</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The Kappa platform for rule-based modeling</article-title>
                <source>Bioinformatics</source>
                <year>2018</year>
                <volume>34</volume>
                <issue>13</issue>
                <fpage>583</fpage>
                <lpage>592</lpage>
                <pub-id pub-id-type="doi">10.1093/bioinformatics/bty272</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR33">
              <label>33.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Charles</surname>
                    <given-names>S</given-names>
                  </name>
                  <name>
                    <surname>Veber</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Delignette-Muller</surname>
                    <given-names>ML</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">MOSAIC: a web-interface for statistical analyses in ecotoxicology</article-title>
                <source>Environ Sci Pollut Res</source>
                <year>2018</year>
                <volume>25</volume>
                <issue>12</issue>
                <fpage>11295</fpage>
                <lpage>11302</lpage>
                <pub-id pub-id-type="doi">10.1007/s11356-017-9809-4</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR34">
              <label>34.</label>
              <mixed-citation publication-type="other">INRIA (2018) Caml Consortium. <ext-link xlink:href="http://caml.inria.fr/consortium" ext-link-type="uri">http://caml.inria.fr/consortium</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR35">
              <label>35.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Calcagno</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Distefano</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Dubreil</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Gabi</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Hooimeijer</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Luca</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>O’Hearn</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Papakonstantinou</surname>
                    <given-names>I</given-names>
                  </name>
                  <name>
                    <surname>Purbrick</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Rodriguez</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Havelund</surname>
                    <given-names>K</given-names>
                  </name>
                  <name>
                    <surname>Holzmann</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Joshi</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Moving fast with software verification</article-title>
                <source>NASA formal methods</source>
                <year>2015</year>
                <publisher-loc>Cham</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>3</fpage>
                <lpage>11</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR36">
              <label>36.</label>
              <mixed-citation publication-type="other">Peyton Jones S, Eber J-M, Seward J (2000) Composing contracts: an adventure in financial engineering (functional pearl). In: Proceedings of the fifth ACM SIGPLAN international conference on functional programming. ICFP ’00. ACM, New York, NY, USA, pp 280–292. <ext-link xlink:href="10.1145/351240.351267" ext-link-type="doi">https://doi.org/10.1145/351240.351267</ext-link></mixed-citation>
            </ref>
            <ref id="CR37">
              <label>37.</label>
              <mixed-citation publication-type="other">Miné A, Mauborgne L, Rival X, Feret J, Cousot P, Kastner D, Wilhelm S, Ferdinand C (2016) Taking static analysis to the next level: proving the absence of run-time errors and data races with Astrée. In: Eighth European congress on embedded real time software and systems, Toulouse, France</mixed-citation>
            </ref>
            <ref id="CR38">
              <label>38.</label>
              <mixed-citation publication-type="other">Ball T, Rajamani SK (2002) The slam project: debugging system software via static analysis. In: Proceedings of the 29th ACM SIGPLAN-SIGACT symposium on principles of programming languages. POPL ’02. ACM, New York, NY, USA, pp 1–3. <ext-link xlink:href="10.1145/503272.503274" ext-link-type="doi">https://doi.org/10.1145/503272.503274</ext-link></mixed-citation>
            </ref>
            <ref id="CR39">
              <label>39.</label>
              <mixed-citation publication-type="other">Pierce BC, Vouillon J (2004) What’s in unison? A formal specification and reference implementation of a file synchronizer. Technical report MS-CIS-03-36, Department of Computer and Information Science, University of Pennsylvania</mixed-citation>
            </ref>
            <ref id="CR40">
              <label>40.</label>
              <mixed-citation publication-type="other">Le Fessant F, Patarin S (2003) MLdonkey, a multi-network peer-to-peer file-sharing program. Research report RR-4797. INRIA</mixed-citation>
            </ref>
            <ref id="CR41">
              <label>41.</label>
              <mixed-citation publication-type="other">INRIA (2018) The Coq proof assistant. <ext-link xlink:href="http://coq.inria.fr" ext-link-type="uri">http://coq.inria.fr</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR42">
              <label>42.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Frigo</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A fast Fourier transform compiler</article-title>
                <source>Proceedings of the ACM SIGPLAN 1999 conference on programming language design and implementation, PLDI '99</source>
                <year>1999</year>
                <publisher-loc>New York</publisher-loc>
                <publisher-name>ACM</publisher-name>
                <fpage>169</fpage>
                <lpage>180</lpage>
                <pub-id pub-id-type="doi">10.1145/301618.301661</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR43">
              <label>43.</label>
              <mixed-citation publication-type="other">Chailloux E, Manoury P, Pagano B (2007) Développement d'applications avec Objective Caml. O’REILLY &amp; Associates, France. <ext-link xlink:href="https://caml.inria.fr/pub/docs/oreilly-book/ocaml-ora-book.pdf" ext-link-type="uri">https://caml.inria.fr/pub/docs/oreilly-book/ocaml-ora-book.pdf</ext-link><bold>(ISBN: 2-84177-121-0)</bold></mixed-citation>
            </ref>
            <ref id="CR44">
              <label>44.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Minsky</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Madhavapeddy</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Hickey</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <source>Real World OCaml: functional programming for the masses</source>
                <year>2013</year>
                <publisher-loc>Sebastopol</publisher-loc>
                <publisher-name>O’Reilly Media Inc</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR45">
              <label>45.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Whitington</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <source>OCaml from the very beginning</source>
                <year>2013</year>
                <publisher-loc>Birmingham</publisher-loc>
                <publisher-name>Coherent Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR46">
              <label>46.</label>
              <mixed-citation publication-type="other">Emmanuel C, Pascal M, Bruno P (2018) Developing applications with objective Caml. <ext-link xlink:href="http://caml.inria.fr/pub/docs/oreilly-book/html" ext-link-type="uri">http://caml.inria.fr/pub/docs/oreilly-book/html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR47">
              <label>47.</label>
              <mixed-citation publication-type="other">Minsky Y, Madhavapeddy A, Hickey J (2018) Real World OCaml. <ext-link xlink:href="http://v1.realworldocaml.org/v1/en/html" ext-link-type="uri">http://v1.realworldocaml.org/v1/en/html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR48">
              <label>48.</label>
              <mixed-citation publication-type="other">Xavier L, Didier R (2018) Unix system programming in OCaml. <ext-link xlink:href="http://ocaml.github.io/ocamlunix" ext-link-type="uri">http://ocaml.github.io/ocamlunix</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR49">
              <label>49.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Lipovaca</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <source>Learn you a Haskell for great good!</source>
                <year>2011</year>
                <publisher-loc>San Francisco</publisher-loc>
                <publisher-name>No Starch Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR50">
              <label>50.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Abelson</surname>
                    <given-names>H</given-names>
                  </name>
                  <name>
                    <surname>Sussman</surname>
                    <given-names>GJ</given-names>
                  </name>
                  <name>
                    <surname>Sussman</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <source>Structure and interpretation of computer programs</source>
                <year>1996</year>
                <edition>2</edition>
                <publisher-loc>Cambridge</publisher-loc>
                <publisher-name>The MIT Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR51">
              <label>51.</label>
              <mixed-citation publication-type="other">Yaron M (2018) Caml trading. <ext-link xlink:href="http://www.youtube.com/watch?v=hKcOkWzj0_s" ext-link-type="uri">www.youtube.com/watch?v=hKcOkWzj0_s</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR52">
              <label>52.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Minsky</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Weeks</surname>
                    <given-names>S</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Caml trading—experiences with functional programming on wall street</article-title>
                <source>J Funct Program</source>
                <year>2008</year>
                <volume>18</volume>
                <issue>4</issue>
                <fpage>553</fpage>
                <lpage>564</lpage>
                <pub-id pub-id-type="doi">10.1017/S095679680800676X</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR53">
              <label>53.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Minsky</surname>
                    <given-names>Y</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">OCaml for the Masses</article-title>
                <source>Commun ACM</source>
                <year>2011</year>
                <volume>54</volume>
                <issue>11</issue>
                <fpage>53</fpage>
                <lpage>58</lpage>
                <pub-id pub-id-type="doi">10.1145/2018396.2018413</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR54">
              <label>54.</label>
              <mixed-citation publication-type="other">OCamlPRO (2018) Try OCaml. <ext-link xlink:href="http://try.ocamlpro.com" ext-link-type="uri">http://try.ocamlpro.com</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR55">
              <label>55.</label>
              <mixed-citation publication-type="other">Xavier L, Damien D, Alain F, Jacques G, Didier R, Jérôme V (2018) The OCaml system release 4.07. <ext-link xlink:href="https://caml.inria.fr/pub/docs/manual-ocaml" ext-link-type="uri">https://caml.inria.fr/pub/docs/manual-ocaml</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR56">
              <label>56.</label>
              <mixed-citation publication-type="other">Xavier L, Damien D, Alain F, Jacques G, Didier R, Jérôme V (2018) The standard library. <ext-link xlink:href="http://caml.inria.fr/pub/docs/manual-ocaml/stdlib.html" ext-link-type="uri">http://caml.inria.fr/pub/docs/manual-ocaml/stdlib.html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR57">
              <label>57.</label>
              <mixed-citation publication-type="other">Simon C (2018) OCaml-containers. <ext-link xlink:href="http://github.com/c-cube/ocaml-containers" ext-link-type="uri">http://github.com/c-cube/ocaml-containers</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR58">
              <label>58.</label>
              <mixed-citation publication-type="other">Simon C (2018) OCaml-containers documentation. <ext-link xlink:href="http://simon.cedeela.fr/ocaml-containers/last/containers/index.html" ext-link-type="uri">http://simon.cedeela.fr/ocaml-containers/last/containers/index.html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR59">
              <label>59.</label>
              <mixed-citation publication-type="other">community O (2018) OCaml batteries included. <ext-link xlink:href="https://github.com/ocaml-batteries-team/batteries-included" ext-link-type="uri">https://github.com/ocaml-batteries-team/batteries-included</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR60">
              <label>60.</label>
              <mixed-citation publication-type="other">community, O (2018) Batteries user guide. <ext-link xlink:href="http://ocaml-batteries-team.github.io/batteries-included/hdoc2" ext-link-type="uri">http://ocaml-batteries-team.github.io/batteries-included/hdoc2</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR61">
              <label>61.</label>
              <mixed-citation publication-type="other">Street J (2018) Janestreet core. <ext-link xlink:href="https://github.com/janestreet/core" ext-link-type="uri">https://github.com/janestreet/core</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR62">
              <label>62.</label>
              <mixed-citation publication-type="other">Street J (2018) Jane street core documentation. <ext-link xlink:href="http://ocaml.janestreet.com/ocaml-core/latest/doc/core" ext-link-type="uri">http://ocaml.janestreet.com/ocaml-core/latest/doc/core</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR63">
              <label>63.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Kalantari</surname>
                    <given-names>I</given-names>
                  </name>
                  <name>
                    <surname>McDonald</surname>
                    <given-names>G</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A data structure and an algorithm for the nearest point problem</article-title>
                <source>IEEE Trans Softw Eng</source>
                <year>1983</year>
                <volume>5</volume>
                <fpage>631</fpage>
                <lpage>634</lpage>
                <pub-id pub-id-type="doi">10.1109/TSE.1983.235263</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR64">
              <label>64.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Berg</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Cheong</surname>
                    <given-names>O</given-names>
                  </name>
                  <name>
                    <surname>Kreveld</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Overmars</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <source>Computational geometry: algorithms and applications</source>
                <year>2008</year>
                <edition>3</edition>
                <publisher-loc>Santa Clara</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <pub-id pub-id-type="doi">10.1007/978-3-540-77974-2</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR65">
              <label>65.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Uhlmann</surname>
                    <given-names>JK</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Satisfying general proximity/similarity queries with metric trees</article-title>
                <source>Inf Process Lett</source>
                <year>1991</year>
                <volume>40</volume>
                <issue>4</issue>
                <fpage>175</fpage>
                <lpage>179</lpage>
                <pub-id pub-id-type="doi">10.1016/0020-0190(91)90074-R</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR66">
              <label>66.</label>
              <mixed-citation publication-type="other">Yianilos PN (1993) Data structures and algorithms for nearest neighbor search in general metric spaces. In: Proceedings of the fourth annual ACM-SIAM symposium on discrete algorithms. SODA ’93. SIAM, Philadelphia, pp 311–321</mixed-citation>
            </ref>
            <ref id="CR67">
              <label>67.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Xu</surname>
                    <given-names>H</given-names>
                  </name>
                  <name>
                    <surname>Agrafiotis</surname>
                    <given-names>DK</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Nearest neighbor search in general metric spaces using a tree data structure with a simple heuristic</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>2003</year>
                <volume>43</volume>
                <issue>6</issue>
                <fpage>1933</fpage>
                <lpage>1941</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD3sXot1Oisrw%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci034150f</pub-id>
                <pub-id pub-id-type="pmid">14632443</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR68">
              <label>68.</label>
              <mixed-citation publication-type="other">Francois B (2018) Bisector tree implementation in OCaml. <ext-link xlink:href="http://github.com/UnixJunkie/bisec-tree" ext-link-type="uri">http://github.com/UnixJunkie/bisec-tree</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR69">
              <label>69.</label>
              <mixed-citation publication-type="other">Dean J, Ghemawat S (2004) MapReduce: simplified data processing on large clusters. In: Proceedings of the 6th conference on symposium on opearting systems design &amp; implementation, vol 6. OSDI’04. USENIX Association, Berkeley, CA, USA, p 10</mixed-citation>
            </ref>
            <ref id="CR70">
              <label>70.</label>
              <mixed-citation publication-type="other">OCamlPRO (2018) OCaml package manager. <ext-link xlink:href="http://opam.ocaml.org" ext-link-type="uri">http://opam.ocaml.org</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR71">
              <label>71.</label>
              <mixed-citation publication-type="other">community, O (2018) OPAM repository. <ext-link xlink:href="http://github.com/ocaml/opam-repository" ext-link-type="uri">http://github.com/ocaml/opam-repository</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR72">
              <label>72.</label>
              <mixed-citation publication-type="other">Louis G (2018) opam-bundle. <ext-link xlink:href="http://github.com/AltGr/opam-bundle" ext-link-type="uri">http://github.com/AltGr/opam-bundle</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR73">
              <label>73.</label>
              <mixed-citation publication-type="other">Jérémie D (2018) Universal toplevel for OCaml. <ext-link xlink:href="http://github.com/ocaml-community/utop" ext-link-type="uri">http://github.com/ocaml-community/utop</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR74">
              <label>74.</label>
              <mixed-citation publication-type="other">Frédéric B, Thomas R (2018) Context sensitive completion for OCaml in Vim and Emacs. <ext-link xlink:href="http://github.com/ocaml/merlin" ext-link-type="uri">http://github.com/ocaml/merlin</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR75">
              <label>75.</label>
              <mixed-citation publication-type="other">Microsoft (2018) Visual studio code. <ext-link xlink:href="https://code.visualstudio.com" ext-link-type="uri">https://code.visualstudio.com</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR76">
              <label>76.</label>
              <mixed-citation publication-type="other">GitHub (2018) A hackable text editor. <ext-link xlink:href="http://atom.io" ext-link-type="uri">http://atom.io</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR77">
              <label>77.</label>
              <mixed-citation publication-type="other">OCamlPRO (2018) Indentation tool for OCaml. <ext-link xlink:href="http://github.com/OCamlPro/ocp-indent" ext-link-type="uri">http://github.com/OCamlPro/ocp-indent</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR78">
              <label>78.</label>
              <mixed-citation publication-type="other">Hugo H (2018) Auto-formatter for OCaml code. <ext-link xlink:href="http://github.com/ocaml-ppx/ocamlformat" ext-link-type="uri">http://github.com/ocaml-ppx/ocamlformat</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR79">
              <label>79.</label>
              <mixed-citation publication-type="other">Bérenger F (2016) Nouveaux Logiciels Pour la Biologie Structurale Computationnelle et la Chémoinformatique. PhD thesis, Paris, CNAM</mixed-citation>
            </ref>
            <ref id="CR80">
              <label>80.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Faulon</surname>
                    <given-names>J-L</given-names>
                  </name>
                  <name>
                    <surname>Visco</surname>
                    <given-names>DP</given-names>
                  </name>
                  <name>
                    <surname>Pophale</surname>
                    <given-names>RS</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The signature molecular descriptor. 1. Using extended valence sequences in QSAR and QSPR studies</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>2003</year>
                <volume>43</volume>
                <issue>3</issue>
                <fpage>707</fpage>
                <lpage>720</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD3sXitlams7k%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci020345w</pub-id>
                <pub-id pub-id-type="pmid">12767129</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR81">
              <label>81.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Moreau</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Broto</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The autocorrelation of a topological structure: a new molecular descriptor</article-title>
                <source>Nouv J Chim</source>
                <year>1980</year>
                <volume>4</volume>
                <issue>6</issue>
                <fpage>359</fpage>
                <lpage>360</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaL3cXkvVSlt74%3D</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR82">
              <label>82.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Wand</surname>
                    <given-names>MP</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Fast computation of multivariate kernel estimators</article-title>
                <source>J Comput Graph Stat</source>
                <year>1994</year>
                <volume>3</volume>
                <issue>4</issue>
                <fpage>433</fpage>
                <lpage>445</lpage>
                <pub-id pub-id-type="doi">10.1080/10618600.1994.10474656</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR83">
              <label>83.</label>
              <mixed-citation publication-type="other">Francois B (2018) Chemoinformatics tool for ligand-based virtual screening. <ext-link xlink:href="http://github.com/UnixJunkie/ACPC" ext-link-type="uri">http://github.com/UnixJunkie/ACPC</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR84">
              <label>84.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Huang</surname>
                    <given-names>N</given-names>
                  </name>
                  <name>
                    <surname>Shoichet</surname>
                    <given-names>BK</given-names>
                  </name>
                  <name>
                    <surname>Irwin</surname>
                    <given-names>JJ</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Benchmarking sets for molecular docking</article-title>
                <source>J Med Chem</source>
                <year>2006</year>
                <volume>49</volume>
                <issue>23</issue>
                <fpage>6789</fpage>
                <lpage>6801</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD28XhtFehurzI</pub-id>
                <pub-id pub-id-type="doi">10.1021/jm0608356</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR85">
              <label>85.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Berenger</surname>
                    <given-names>F</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">UnixJunkie/consent: release for publication</article-title>
                <source>J Cheminform</source>
                <year>2017</year>
                <pub-id pub-id-type="doi">10.5281/zenodo.1006728</pub-id>
                <pub-id pub-id-type="pmid">29185065</pub-id>
                <pub-id pub-id-type="pmcid">5705545</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR86">
              <label>86.</label>
              <mixed-citation publication-type="other">Francois B (2018) Ligand-based virtual screening with consensus queries. <ext-link xlink:href="http://github.com/UnixJunkie/consent" ext-link-type="uri">http://github.com/UnixJunkie/consent</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR87">
              <label>87.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Dolinsky</surname>
                    <given-names>TJ</given-names>
                  </name>
                  <name>
                    <surname>Nielsen</surname>
                    <given-names>JE</given-names>
                  </name>
                  <name>
                    <surname>McCammon</surname>
                    <given-names>JA</given-names>
                  </name>
                  <name>
                    <surname>Baker</surname>
                    <given-names>NA</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">PDB2PQR: an automated pipeline for the setup of Poisson–Boltzmann electrostatics calculations</article-title>
                <source>Nucleic Acids Res</source>
                <year>2004</year>
                <volume>32</volume>
                <fpage>665</fpage>
                <lpage>667</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2cXlvFKmsbY%3D</pub-id>
                <pub-id pub-id-type="doi">10.1093/nar/gkh381</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR88">
              <label>88.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Baker</surname>
                    <given-names>NA</given-names>
                  </name>
                  <name>
                    <surname>Sept</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Joseph</surname>
                    <given-names>S</given-names>
                  </name>
                  <name>
                    <surname>Holst</surname>
                    <given-names>MJ</given-names>
                  </name>
                  <name>
                    <surname>McCammon</surname>
                    <given-names>JA</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Electrostatics of nanosystems: application to microtubules and the ribosome</article-title>
                <source>Proc Natl Acad Sci</source>
                <year>2001</year>
                <volume>98</volume>
                <issue>18</issue>
                <fpage>10037</fpage>
                <lpage>10041</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD3MXmvFWisbc%3D</pub-id>
                <pub-id pub-id-type="doi">10.1073/pnas.181342398</pub-id>
                <pub-id pub-id-type="pmid">11517324</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR89">
              <label>89.</label>
              <mixed-citation publication-type="other">Berenger F (2017) UnixJunkie/fragger: release for Publication in F1000R. <ext-link xlink:href="10.5281/zenodo.877320" ext-link-type="doi">https://doi.org/10.5281/zenodo.877320</ext-link></mixed-citation>
            </ref>
            <ref id="CR90">
              <label>90.</label>
              <mixed-citation publication-type="other">Francois B (2018) A protein fragments picker. <ext-link xlink:href="http://github.com/UnixJunkie/fragger" ext-link-type="uri">http://github.com/UnixJunkie/fragger</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR91">
              <label>91.</label>
              <mixed-citation publication-type="other">Gouy I (2018) Debian language shootout. <ext-link xlink:href="http://benchmarksgame-team.pages.debian.net/benchmarksgame" ext-link-type="uri">http://benchmarksgame-team.pages.debian.net/benchmarksgame</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR92">
              <label>92.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Swamidass</surname>
                    <given-names>SJ</given-names>
                  </name>
                  <name>
                    <surname>Azencott</surname>
                    <given-names>C-A</given-names>
                  </name>
                  <name>
                    <surname>Daily</surname>
                    <given-names>K</given-names>
                  </name>
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A CROC stronger than ROC: measuring, visualizing and optimizing early retrieval</article-title>
                <source>Bioinformatics</source>
                <year>2010</year>
                <volume>26</volume>
                <issue>10</issue>
                <fpage>1348</fpage>
                <lpage>1356</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3cXlvVWqt7w%3D</pub-id>
                <pub-id pub-id-type="doi">10.1093/bioinformatics/btq140</pub-id>
                <pub-id pub-id-type="pmid">20378557</pub-id>
                <pub-id pub-id-type="pmcid">2865862</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR93">
              <label>93.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Mysinger</surname>
                    <given-names>MM</given-names>
                  </name>
                  <name>
                    <surname>Carchia</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Irwin</surname>
                    <given-names>JJ</given-names>
                  </name>
                  <name>
                    <surname>Shoichet</surname>
                    <given-names>BK</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Directory of useful decoys, enhanced (DUD-E): better ligands and decoys for better benchmarking</article-title>
                <source>J Med Chem</source>
                <year>2012</year>
                <volume>55</volume>
                <issue>14</issue>
                <fpage>6582</fpage>
                <lpage>6594</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC38XovFaku7c%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/jm300687e</pub-id>
                <pub-id pub-id-type="pmid">22716043</pub-id>
                <pub-id pub-id-type="pmcid">3405771</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR94">
              <label>94.</label>
              <mixed-citation publication-type="other">Danelutto M, Cosmo RD (2012) A minimal disruption skeleton experiment: seamless map and reduce embedding in OCaml. Procedia Comput Sci 9:1837–1846. <ext-link xlink:href="10.1016/j.procs.2012.04.202" ext-link-type="doi">https://doi.org/10.1016/j.procs.2012.04.202</ext-link>. Proceedings of the International Conference on Computational Science, ICCS 2012</mixed-citation>
            </ref>
            <ref id="CR95">
              <label>95.</label>
              <mixed-citation publication-type="other">Francois B (2018) parany. <ext-link xlink:href="http://github.com/UnixJunkie/parany" ext-link-type="uri">http://github.com/UnixJunkie/parany</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR96">
              <label>96.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Bourgoin</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Chailloux</surname>
                    <given-names>E</given-names>
                  </name>
                  <name>
                    <surname>Lamotte</surname>
                    <given-names>J-L</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Efficient abstractions for GPGPU programming</article-title>
                <source>Int J Parallel Program</source>
                <year>2014</year>
                <volume>42</volume>
                <issue>4</issue>
                <fpage>583</fpage>
                <lpage>600</lpage>
                <pub-id pub-id-type="doi">10.1007/s10766-013-0261-x</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR97">
              <label>97.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Kiselyov</surname>
                    <given-names>O</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Codish</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Sumii</surname>
                    <given-names>E</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The design and implementation of BER MetaOCaml</article-title>
                <source>Functional and logic programming</source>
                <year>2014</year>
                <publisher-loc>Cham</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>86</fpage>
                <lpage>102</lpage>
                <pub-id pub-id-type="doi">10.1007/978-3-319-07151-0_6</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR98">
              <label>98.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Taha</surname>
                    <given-names>W</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Lengauer</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Batory</surname>
                    <given-names>DS</given-names>
                  </name>
                  <name>
                    <surname>Consel</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Odersky</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A gentle introduction to multi-stage programming</article-title>
                <source>Domain-specific program generation, international seminar, Dagstuhl Castle, Germany, March 23–28, 2003</source>
                <year>2004</year>
                <publisher-loc>Berlin, Heidelberg</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>30</fpage>
                <lpage>50</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR99">
              <label>99.</label>
              <mixed-citation publication-type="other">Le Gall S (2018) ounit. <ext-link xlink:href="http://github.com/gildor478/ounit" ext-link-type="uri">http://github.com/gildor478/ounit</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR100">
              <label>100.</label>
              <mixed-citation publication-type="other">Cruanes S (2018) qcheck. <ext-link xlink:href="https://github.com/c-cube/qcheck" ext-link-type="uri">https://github.com/c-cube/qcheck</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR101">
              <label>101.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Weininger</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">SMILES, a chemical language and information system. 1. Introduction to methodology and encoding rules</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1988</year>
                <volume>28</volume>
                <issue>1</issue>
                <fpage>31</fpage>
                <lpage>36</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaL1cXnsVeqsA%3D%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00057a005</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR102">
              <label>102.</label>
              <mixed-citation publication-type="other">Daylight Chemical Information Systems Inc. SMARTS. <ext-link xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html." ext-link-type="uri">http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html.</ext-link> Accessed 1 Dec 2018</mixed-citation>
            </ref>
            <ref id="CR103">
              <label>103.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Willighagen</surname>
                    <given-names>EL</given-names>
                  </name>
                  <name>
                    <surname>Mayfield</surname>
                    <given-names>JW</given-names>
                  </name>
                  <name>
                    <surname>Alvarsson</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Berg</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Carlsson</surname>
                    <given-names>L</given-names>
                  </name>
                  <name>
                    <surname>Jeliazkova</surname>
                    <given-names>N</given-names>
                  </name>
                  <name>
                    <surname>Kuhn</surname>
                    <given-names>S</given-names>
                  </name>
                  <name>
                    <surname>Pluskal</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Rojas-Chertó</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Spjuth</surname>
                    <given-names>O</given-names>
                  </name>
                  <name>
                    <surname>Torrance</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Evelo</surname>
                    <given-names>CT</given-names>
                  </name>
                  <name>
                    <surname>Guha</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Steinbeck</surname>
                    <given-names>C</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The Chemistry Development Kit (CDK) v2.0: atom typing, depiction, molecular formulas, and substructure searching</article-title>
                <source>J Cheminform</source>
                <year>2017</year>
                <volume>9</volume>
                <issue>1</issue>
                <fpage>33</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC1cXntl2jt7o%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/s13321-017-0220-4</pub-id>
                <pub-id pub-id-type="pmid">29086040</pub-id>
                <pub-id pub-id-type="pmcid">5461230</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR104">
              <label>104.</label>
              <mixed-citation publication-type="other">contributors C (2018) Chemistry development kit. <ext-link xlink:href="http://cdk.github.io" ext-link-type="uri">http://cdk.github.io</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR105">
              <label>105.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Tosco</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Stiefl</surname>
                    <given-names>N</given-names>
                  </name>
                  <name>
                    <surname>Landrum</surname>
                    <given-names>G</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Bringing the MMFF force field to the rdkit: implementation and validation</article-title>
                <source>J Cheminform</source>
                <year>2014</year>
                <volume>6</volume>
                <issue>1</issue>
                <fpage>37</fpage>
                <pub-id pub-id-type="doi">10.1186/s13321-014-0037-3</pub-id>
                <pub-id pub-id-type="pmcid">4116604</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR106">
              <label>106.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>O’Boyle</surname>
                    <given-names>NM</given-names>
                  </name>
                  <name>
                    <surname>Banck</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>James</surname>
                    <given-names>CA</given-names>
                  </name>
                  <name>
                    <surname>Morley</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Vandermeersch</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Hutchison</surname>
                    <given-names>GR</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Open babel: an open chemical toolbox</article-title>
                <source>J Cheminform</source>
                <year>2011</year>
                <volume>3</volume>
                <issue>1</issue>
                <fpage>33</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3MXhsVWjurbF</pub-id>
                <pub-id pub-id-type="doi">10.1186/1758-2946-3-33</pub-id>
                <pub-id pub-id-type="pmid">21982300</pub-id>
                <pub-id pub-id-type="pmcid">3198950</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR107">
              <label>107.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Raymond</surname>
                    <given-names>ES</given-names>
                  </name>
                </person-group>
                <source>The art of unix programming</source>
                <year>2004</year>
                <publisher-loc>Indianapolis</publisher-loc>
                <publisher-name>Addison-Wesley Professional</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR108">
              <label>108.</label>
              <mixed-citation publication-type="other">wwwPDB (2008) Protein data bank contents guide: atomic coordinate entry format description version 3.30. wwwPDB, Piscataway, NJ, USA</mixed-citation>
            </ref>
            <ref id="CR109">
              <label>109.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Tripos</surname>
                    <given-names>I</given-names>
                  </name>
                </person-group>
                <source>Tripos Mol2 file format</source>
                <year>2005</year>
                <publisher-loc>St. Louis</publisher-loc>
                <publisher-name>Tripos Inc</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR110">
              <label>110.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Pedregosa</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Varoquaux</surname>
                    <given-names>G</given-names>
                  </name>
                  <name>
                    <surname>Gramfort</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Michel</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Thirion</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Grisel</surname>
                    <given-names>O</given-names>
                  </name>
                  <name>
                    <surname>Blondel</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Prettenhofer</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Weiss</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Dubourg</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Vanderplas</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Passos</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Cournapeau</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Brucher</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Perrot</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>Duchesnay</surname>
                    <given-names>E</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Scikit-learn: machine learning in Python</article-title>
                <source>J Mach Learn Res</source>
                <year>2011</year>
                <volume>12</volume>
                <fpage>2825</fpage>
                <lpage>2830</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR111">
              <label>111.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Breiman</surname>
                    <given-names>L</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Random forests</article-title>
                <source>Mach Learn</source>
                <year>2001</year>
                <volume>45</volume>
                <issue>1</issue>
                <fpage>5</fpage>
                <lpage>32</lpage>
                <pub-id pub-id-type="doi">10.1023/A:1010933404324</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR112">
              <label>112.</label>
              <mixed-citation publication-type="other">Bastian T (2018) ORandForest. <ext-link xlink:href="http://github.com/tobast/ORandForest" ext-link-type="uri">http://github.com/tobast/ORandForest</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR113">
              <label>113.</label>
              <mixed-citation publication-type="other">Wang L (2017) Owl: a general-purpose numerical library in OCaml. CoRR. <ext-link xlink:href="http://arxiv.org/abs/1707.09616" ext-link-type="uri">arXiv:1707.09616</ext-link></mixed-citation>
            </ref>
            <ref id="CR114">
              <label>114.</label>
              <mixed-citation publication-type="other">Wang L (2018) Owl-OCaml scientific and engineering computing. <ext-link xlink:href="http://github.com/owlbarn/owl" ext-link-type="uri">http://github.com/owlbarn/owl</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR115">
              <label>115.</label>
              <mixed-citation publication-type="other">Abadi M, Barham P, Chen J, Chen Z, Davis A, Dean J, Devin M, Ghemawat S, Irving G, Isard M, Kudlur M, Levenberg J, Monga R, Moore S, Murray DG, Steiner B, Tucker P, Vasudevan V, Warden P, Wicke M, Yu Y, Zheng X (2016) Tensorflow: a system for large-scale machine learning. In: Proceedings of the 12th USENIX conference on operating systems design and implementation. OSDI’16. USENIX Association, Berkeley, CA, USA, pp 265–283</mixed-citation>
            </ref>
            <ref id="CR116">
              <label>116.</label>
              <mixed-citation publication-type="other">Mazare L (2018) tensorflow-ocaml. <ext-link xlink:href="http://github.com/LaurentMazare/tensorflow-ocaml" ext-link-type="uri">http://github.com/LaurentMazare/tensorflow-ocaml</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR117">
              <label>117.</label>
              <mixed-citation publication-type="other">Mazare L (2018) ocaml-torch. <ext-link xlink:href="http://github.com/LaurentMazare/ocaml-torch" ext-link-type="uri">http://github.com/LaurentMazare/ocaml-torch</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR118">
              <label>118.</label>
              <mixed-citation publication-type="other">R Core Team (2018) R: a language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria</mixed-citation>
            </ref>
            <ref id="CR119">
              <label>119.</label>
              <mixed-citation publication-type="other">Berenger F (2018) orsvm\_e1071 - OCaml wrapper to R packages e1071 and svmpath. <ext-link xlink:href="http://github.com/UnixJunkie/orsvm-e1071" ext-link-type="uri">http://github.com/UnixJunkie/orsvm-e1071</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR120">
              <label>120.</label>
              <mixed-citation publication-type="other">Berenger F (2018) orrandomForest—classification or regression using random forests. <ext-link xlink:href="http://github.com/UnixJunkie/orrandomForest" ext-link-type="uri">http://github.com/UnixJunkie/orrandomForest</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR121">
              <label>121.</label>
              <mixed-citation publication-type="other">Berenger F (2018) cpm—classification performance metrics library. <ext-link xlink:href="http://github.com/UnixJunkie/cpmlib" ext-link-type="uri">http://github.com/UnixJunkie/cpmlib</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR122">
              <label>122.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Bradley</surname>
                    <given-names>AP</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The use of the area under the ROC curve in the evaluation of machine learning algorithms</article-title>
                <source>Pattern Recogn</source>
                <year>1997</year>
                <volume>30</volume>
                <issue>7</issue>
                <fpage>1145</fpage>
                <lpage>1159</lpage>
                <pub-id pub-id-type="doi">10.1016/S0031-3203(96)00142-2</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR123">
              <label>123.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Lopes</surname>
                    <given-names>JCD</given-names>
                  </name>
                  <name>
                    <surname>dos Santos</surname>
                    <given-names>FM</given-names>
                  </name>
                  <name>
                    <surname>Martins-José</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Augustyns</surname>
                    <given-names>K</given-names>
                  </name>
                  <name>
                    <surname>De Winter</surname>
                    <given-names>H</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The power metric: a new statistically robust enrichment-type metric for virtual screening applications with early recovery capability</article-title>
                <source>J Cheminform</source>
                <year>2017</year>
                <volume>9</volume>
                <issue>1</issue>
                <fpage>7</fpage>
                <pub-id pub-id-type="doi">10.1186/s13321-016-0189-4</pub-id>
                <pub-id pub-id-type="pmid">28203291</pub-id>
                <pub-id pub-id-type="pmcid">5289935</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR124">
              <label>124.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Truchon</surname>
                    <given-names>J-F</given-names>
                  </name>
                  <name>
                    <surname>Bayly</surname>
                    <given-names>CI</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Evaluating virtual screening methods: good and bad metrics for the early recognition problem</article-title>
                <source>J Chem Inf Model</source>
                <year>2007</year>
                <volume>47</volume>
                <issue>2</issue>
                <fpage>488</fpage>
                <lpage>508</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2sXhsVCgtLY%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci600426e</pub-id>
                <pub-id pub-id-type="pmid">17288412</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR125">
              <label>125.</label>
              <mixed-citation publication-type="other">Leroy X, Rémy D (2014) Unix system programming in OCaml</mixed-citation>
            </ref>
            <ref id="CR126">
              <label>126.</label>
              <mixed-citation publication-type="other">UCSF (2018) Chimera BILD file format. <ext-link xlink:href="http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/bild.html" ext-link-type="uri">http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/bild.html</ext-link>. Accessed 2018-12-01</mixed-citation>
            </ref>
            <ref id="CR127">
              <label>127.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Pettersen</surname>
                    <given-names>EF</given-names>
                  </name>
                  <name>
                    <surname>Goddard</surname>
                    <given-names>TD</given-names>
                  </name>
                  <name>
                    <surname>Huang</surname>
                    <given-names>CC</given-names>
                  </name>
                  <name>
                    <surname>Couch</surname>
                    <given-names>GS</given-names>
                  </name>
                  <name>
                    <surname>Greenblatt</surname>
                    <given-names>DM</given-names>
                  </name>
                  <name>
                    <surname>Meng</surname>
                    <given-names>EC</given-names>
                  </name>
                  <name>
                    <surname>Ferrin</surname>
                    <given-names>TE</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">UCSF Chimera—a visualization system for exploratory research and analysis</article-title>
                <source>J Comput Chem</source>
                <year>2004</year>
                <volume>25</volume>
                <issue>13</issue>
                <fpage>1605</fpage>
                <lpage>1612</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2cXmvVOhsbs%3D</pub-id>
                <pub-id pub-id-type="doi">10.1002/jcc.20084</pub-id>
                <pub-id pub-id-type="pmid">15264254</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR128">
              <label>128.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Vouillon</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Balat</surname>
                    <given-names>V</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">From bytecode to JavaScript: the Js of ocaml compiler</article-title>
                <source>Softw Pract Exp</source>
                <year>2014</year>
                <volume>44</volume>
                <issue>8</issue>
                <fpage>951</fpage>
                <lpage>972</lpage>
                <pub-id pub-id-type="doi">10.1002/spe.2187</pub-id>
              </mixed-citation>
            </ref>
          </ref-list>
        </ref-list>
      </back>
    </article>
