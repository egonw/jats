<?xml version="1.0"?>
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="review-article" xml:lang="en">
      <?properties open_access?>
      <front>
        <journal-meta>
          <journal-id journal-id-type="publisher-id">13321</journal-id>
          <journal-title-group>
            <journal-title>Journal of Cheminformatics</journal-title>
            <abbrev-journal-title abbrev-type="publisher">J Cheminform</abbrev-journal-title>
          </journal-title-group>
          <issn pub-type="epub">1758-2946</issn>
          <publisher>
            <publisher-name>Springer International Publishing</publisher-name>
            <publisher-loc>Cham</publisher-loc>
          </publisher>
        </journal-meta>
        <article-meta>
          <article-id pub-id-type="publisher-id">s13321-019-0331-1</article-id>
          <article-id pub-id-type="manuscript">331</article-id>
          <article-id pub-id-type="doi">10.1186/s13321-019-0331-1</article-id>
          <article-categories>
            <subj-group subj-group-type="heading">
              <subject>Review</subject>
            </subj-group>
            <subj-group subj-group-type="article-collection" specific-use="Regular">
              <subject>Programming Languages for Chemical Information</subject>
            </subj-group>
          </article-categories>
          <title-group>
            <article-title xml:lang="en">Programming languages in chemistry: a review of HTML5/JavaScript</article-title>
          </title-group>
          <contrib-group>
            <contrib contrib-type="author" corresp="yes" id="Au1">
              <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5547-309X</contrib-id>
              <name>
                <surname>Theisen</surname>
                <given-names>Kevin J.</given-names>
              </name>
              <address>
                <email>HIDDEN</email>
              </address>
              <xref ref-type="aff" rid="Aff1">1</xref>
              <xref ref-type="corresp" rid="IDs1332101903311_cor1">a</xref>
            </contrib>
            <aff id="Aff1">
              <label>1</label>
              <institution-wrap>
                <institution content-type="org-name">iChemLabs, LLC.</institution>
              </institution-wrap>
              <addr-line content-type="street">7305 Hancock Village Dr #525</addr-line>
              <addr-line content-type="postcode">23112</addr-line>
              <addr-line content-type="city">Chesterfield</addr-line>
              <addr-line content-type="state">VA</addr-line>
              <country country="US">USA</country>
            </aff>
          </contrib-group>
          <author-notes>
            <corresp id="IDs1332101903311_cor1">
              <label>a</label>
              <email>HIDDEN</email>
            </corresp>
          </author-notes>
          <pub-date date-type="pub" publication-format="electronic">
            <day>5</day>
            <month>2</month>
            <year>2019</year>
          </pub-date>
          <pub-date date-type="collection" publication-format="electronic">
            <month>12</month>
            <year>2019</year>
          </pub-date>
          <volume>11</volume>
          <issue seq="11">1</issue>
          <elocation-id>11</elocation-id>
          <history>
            <date date-type="registration">
              <day>22</day>
              <month>1</month>
              <year>2019</year>
            </date>
            <date date-type="received">
              <day>7</day>
              <month>9</month>
              <year>2018</year>
            </date>
            <date date-type="accepted">
              <day>22</day>
              <month>1</month>
              <year>2019</year>
            </date>
            <date date-type="online">
              <day>5</day>
              <month>2</month>
              <year>2019</year>
            </date>
          </history>
          <permissions>
            <copyright-statement content-type="compact">Â© The Author(s) 2019</copyright-statement>
            <copyright-year>2019</copyright-year>
            <copyright-holder>The Author(s)</copyright-holder>
            <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/">
              <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link xlink:href="http://creativecommons.org/publicdomain/zero/1.0/" ext-link-type="uri">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
            </license>
          </permissions>
          <abstract xml:lang="en" id="Abs1">
            <title>Abstract</title>
            <p id="Par1">This is one part of a series of reviews concerning the application of programming languages in chemistry, edited by Dr. Rajarshi Guha. This article reviews the JavaScript technology as it applies to the chemistry discipline. A discussion of the history, scope and technical details of the programming language is presented.</p>
          </abstract>
          <kwd-group xml:lang="en">
            <title>Keywords</title>
            <kwd>JavaScript</kwd>
            <kwd>HTML5</kwd>
            <kwd>Programming</kwd>
            <kwd>Chemistry</kwd>
            <kwd>Cheminformatics</kwd>
            <kwd>Computational chemistry</kwd>
          </kwd-group>
          <custom-meta-group>
            <custom-meta>
              <meta-name>publisher-imprint-name</meta-name>
              <meta-value>Springer</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-issue-count</meta-name>
              <meta-value>1</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-article-count</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-pricelist-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-holder</meta-name>
              <meta-value>The Author(s)</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-contains-esm</meta-name>
              <meta-value>No</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-month</meta-name>
              <meta-value>1</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-day</meta-name>
              <meta-value>22</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-product</meta-name>
              <meta-value>ArchiveJournal</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-collection-editor</meta-name>
              <meta-value>Rajarshi Guha</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-grants-type</meta-name>
              <meta-value>OpenChoice</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>metadata-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>abstract-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodypdf-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodyhtml-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bibliography-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>esm-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>online-first</meta-name>
              <meta-value>false</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>pdf-file-reference</meta-name>
              <meta-value>BodyRef/PDF/13321_2019_Article_331.pdf</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>pdf-type</meta-name>
              <meta-value>Typeset</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>target-type</meta-name>
              <meta-value>OnlinePDF</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-type</meta-name>
              <meta-value>ReviewPaper</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-primary</meta-name>
              <meta-value>Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computer Applications in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Documentation and Information in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Theoretical and Computational Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computational Biology/Bioinformatics</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-collection</meta-name>
              <meta-value>Chemistry and Materials Science</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>open-access</meta-name>
              <meta-value>true</meta-value>
            </custom-meta>
          </custom-meta-group>
        </article-meta>
      </front>
      <body>
        <sec id="Sec1">
          <title>Introduction</title>
          <p id="Par49">Computer literacy is an essential skill for scientists. Computers can execute the same operations humans can perform, but far more consistently and at rates far beyond human capability, allowing researchers to investigate numerous hypotheses in short order. Programmers have even more advantages, as they can directly communicate with the computer to achieve their desired goals, as opposed to relying on software someone else has created for another purpose.</p>
          <p id="Par50">Many programming languages have been developed to facilitate instructions to the computer. Each has its advantages, which is why they each exist. Each programming language also has its disadvantages, which is why the rest exist.</p>
          <p id="Par51">When the Internet was introduced, society quickly changed, not just in allowing computers to communicate with each other, but by allowing people to communicate with each other, nearly instantaneously from around the world. JavaScript (JS) is a programming language born of the Internet. From a crude and basic programming language for creating cheap, gimmicky effects on web pages, it has developed into a ubiquitous and flexible technology where engine performance is regarded as a crowning achievement among browser developers. Today, every computational device, from desktops to laptops to mobile phones and Augmented Reality (AR) devices has essential access to the Internet, and therefore contains a web browser wherein JavaScript can be run. As a result, JavaScript is one of the most important programming languages in existence.</p>
          <p id="Par52">This review investigates the relevance and impact of JavaScript on the chemistry discipline. We begin by discussing the history of the programming language; then we investigate the scope and features of the language and how it applies to chemistry; last, an outline of the technical details of the JavaScript programming language is presented to allow those interested in chemistry and cheminformatics to effectively create JavaScript applications.</p>
        </sec>
        <sec id="Sec2">
          <title>What is JavaScript?</title>
          <p id="Par53">JavaScript is a programming language enabling developers to interact with the functionality provided by web browsers. More specifically, JavaScript is a scripting language, which means (a) traditionally, JavaScript source code is interpreted at runtime and not pre-compiled into byte code and (b) practically, its main purpose is to modify the behavior of another application typically written in a different programming language, in which it is interpreted and run in real time.</p>
          <p id="Par54">While JavaScript is aptly named as a scripting language, the first part of the name misleadingly refers to the Java programming language [<xref ref-type="bibr" rid="CR1">1</xref>]. JavaScript has no functional relationship with the Java programming language. The Java part of JavaScript was used to inspire interest in the new scripting language, as Java was and still is a very popular programming language; additionally the original Netscape browser that included JavaScript was written in Java. JavaScript has since become an essential and arguably more important programming language than the one inspiring its name. Hence, the programming language many developers use today to build and interact with web applications is famously known as JavaScript.</p>
          <sec id="Sec3">
            <title>Origin</title>
            <p id="Par55">In the early days of the Internet, the web browser provided users with static pages to view information. Innovators at Netscape Communications, producers of the popular Netscape Navigator browser, believed web sites should provide more dynamic material and a programming language would provide a solution. In 1995, Brendan Eich, an employee of Netscape Communications, developed what is now known as JavaScript [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
            <p id="Par56">Initially, JavaScript only provided basic features, but the power of such a programming language on the web was quickly realized, and the continued success of Netscape Navigator was, in no small part, a reflection of that power. Alternatives to JavaScript were inevitable and a number of companies started to produce more feature-rich browser plug-ins that would install their platforms into browsers to be run in web pages. Adobe Flash [<xref ref-type="bibr" rid="CR3">3</xref>], Java applets [<xref ref-type="bibr" rid="CR4">4</xref>] and Microsoft Silverlight [<xref ref-type="bibr" rid="CR5">5</xref>] are a few well known examples. These plug-ins became popular solutions for developers, but a hindrance for users as plug-ins required installations, had to be frequently updated, and were prone to security issues. Plug-ins eventually fell out of favor with users as HTML5 arrived and JavaScript evolved. Flash, Java applets and Silverlight are all now deprecated technologies.</p>
            <p id="Par57">Other companies, instead of replacing JavaScript, attempted to modify and extend the language in an attempt to control it (a process known as âembrace, extend and extinguishâ). In 1996, Microsoft produced JScript [<xref ref-type="bibr" rid="CR6">6</xref>], which was a reverse engineered version of JavaScript for their Internet Explorer (IE) browser. IE would now be accessible to JavaScript developers, but the implementation was deceitful. Proprietary features specific to IE were built into JScript. As a result, users were forced to use IE for many online applications, impeding the open web in a process known as fragmentation. Fragmentation produces an anti-competitive, positive feedback loop giving a dominant group (in this case, the dominant browser, IE) power over the future direction of the Internet. These attempts ultimately failed due to healthy competition amongst browser developers. Microsoft browsers now aim to legitimately support JavaScript. Creative methods for fragmenting the JavaScript language continue to exist with TypeScript from Microsoft [<xref ref-type="bibr" rid="CR7">7</xref>] and Dart from Google [<xref ref-type="bibr" rid="CR8">8</xref>], which aim to provide a more familiar programming syntax for developers and compile into standard JavaScript.</p>
            <p id="Par58">JavaScript has survived many challenges since its inception, and a lot of credit should be given to the Netscape team for their foresight. In order to protect the JavaScript language early on, the Netscape team pushed for an open standardization of the language, and they were successful. We all benefit from the universal and strong support for JavaScript in every existing browser today. In spite of the attempts to replace or commandeer the standard, JavaScript persisted and has become a signature programming language for most developers, and remains an important tool for the scientific communities including chemists.</p>
          </sec>
          <sec id="Sec4">
            <title>ECMAScript</title>
            <p id="Par59">The European Computer Manufacturers Association, now known as Ecma International [<xref ref-type="bibr" rid="CR9">9</xref>], took over the governance and standardization of JavaScript in 1996 and continues to maintain the specification for the language to this day. The JavaScript specification is officially named ECMAScript, defined by the ECMA-262 standard published by Ecma International [<xref ref-type="bibr" rid="CR10">10</xref>]. So paradoxically, JavaScript led to the development of the ECMAScript standard that now governs the development of JavaScript. JavaScript also contains functionality to access technology standards not governed by Ecma International, such as HTML5 &lt;canvas> [<xref ref-type="bibr" rid="CR11">11</xref>] and Web Graphics Library (WebGL) [<xref ref-type="bibr" rid="CR12">12</xref>] for 2D and 3D graphics in webpages.</p>
            <p id="Par60">JavaScript is not the only implementation of ECMAScript. Due to the large number of developers programming in JavaScript (and therefore ECMAScript), ECMAScript has been used as the framework to develop other, non-browser-based technologies. Node.js [<xref ref-type="bibr" rid="CR13">13</xref>] compiles ECMAScript for server systems. ActionScript [<xref ref-type="bibr" rid="CR14">14</xref>] was an Adobe implementation of ECMAScript providing scripting functionality to the now deprecated Adobe Flash Player platform. Rhino [<xref ref-type="bibr" rid="CR15">15</xref>] and its replacement Nashorn engine [<xref ref-type="bibr" rid="CR16">16</xref>], provide Java based ECMAScript scripting environments in Java applications. The multitude of ECMAScript implementations causes confusion as many engines based on ECMAScript are described as providing a JavaScript environment in their particular platform. This is false and due to name recognition. JavaScript is strictly the web based implementation of ECMAScript for internet browser engines.</p>
            <p id="Par61">While ECMAScript certainly has a range of utility and implementation across a variety of platforms, this review focuses on the JavaScript implementation of ECMAScript as it applies to client side HTML5.</p>
          </sec>
          <sec id="Sec5">
            <title>HTML5</title>
            <p id="Par62">The content we view on the Internet is made possible by a union of several technologies, mainly Hypertext Markup Language (HTML), Cascading Style Sheets (CSS) and JavaScript. HTML is an Extensible Markup Language (XML) protocol defining the Document Object Model (DOM). XML is a protocol defined by a clear and extensible syntax of elements and properties [<xref ref-type="bibr" rid="CR17">17</xref>]. The DOM is an organization of the elements and properties defining the data for the page. CSS provides a powerful way to control the rendering properties of elements in the DOM, as well as selectors for efficiently styling classes and groups. JavaScript is the programming language that allows a developer to perform functions and interact with the DOM.</p>
            <p id="Par63">HTML5 is a moniker describing the most recent iteration of these internet technologies, namely it is the current version (version 5) of HTML. HTML4 defined most of the history of the Internet. HTML4 provided only limited functionality to website authors; therefore solutions like Flash and Java applets came into existence. HTML5 defines features previously only available in plug-ins, directly through native browser functionality while providing extensibility not possible with previous versions of HTML.</p>
            <p id="Par64">New web technologies emerged, such as native video support, localStorage, &lt;canvas>, WebSockets and many more, allowing developers to fully support any application, natively in the browser. Access to these features needed to be facilitated, and the programming language to control all this additional functionality is JavaScript, the native browser language. JavaScript became much more powerful due to the evolution of HTML.</p>
            <p id="Par65">At the time of writing this review, HTML5 has had many years to mature. We now see HTML5 applications across every platform imaginable, fueled by the growth of mobile devices where internet browsers are first class citizens. It is this wealth of functionality, access and ease of distribution that has lead to JavaScript becoming an essential programming language for scientists and especially for chemists. Several large, open source, JavaScript chemistry libraries are actively maintained, including the ChemDoodle Web Components [<xref ref-type="bibr" rid="CR18">18</xref>], Kekule.js [<xref ref-type="bibr" rid="CR19">19</xref>] and 3Dmol.js [<xref ref-type="bibr" rid="CR20">20</xref>], to support the chemistry community.</p>
          </sec>
        </sec>
        <sec id="Sec6">
          <title>Features</title>
          <p id="Par66">JavaScript is not developed with scientists in mind and is not, in any way, optimized for the sciences. The first high level programming language, Fortran [<xref ref-type="bibr" rid="CR21">21</xref>] (âFORmula TRANslationâ), was specifically designed to support advanced mathematical and scientific equations, and due to its performance, is still used today in many academic circles. Python [<xref ref-type="bibr" rid="CR22">22</xref>] is a scripting language with an easy to learn syntax and core libraries dedicated to scientific computing. Yet, JavaScript exhibits a number of unique qualities greatly benefiting scientists. Development tools are available on every scientistâs computer through a web browser, free of charge. Distribution through the Internet is intrinsically supported. The free availability is essential to the core goals of science to distribute fact and information and to inspire and educate individuals to pursue knowledge. Regardless, there are a number of caveats to using JavaScript, and any scientific programmer should be aware of all of the technical features discussed below.</p>
          <sec id="Sec7">
            <title>Performance</title>
            <p id="Par67">The speed of calculations is a top priority when considering a programming language. The faster an application is, the more calculations it can compute and the more users it can serve. JavaScript performs on the slower end of programming languages. As a scripting language being run in a web browser, JavaScript cannot be faster than the platform it runs on, typically a C [<xref ref-type="bibr" rid="CR23">23</xref>] derivative. The interpretation of JavaScript at runtime makes it inherently slower than its platform environment, even when taking advantage of just-in-time (JIT) compilation. Simple JavaScript applications can provide a quick and efficient interface, but will suffer as the complexity of calculations increases. Chemistry algorithms are especially sensitive, where molecules are represented as graph data structures. Runtimes for graph theoretical algorithms will scale exponentially as molecule size increases.</p>
            <p id="Par68">The "<xref rid="Sec29" ref-type="sec">Performance results</xref>" section describes some tests to compare JavaScript and Java performance for cheminformatics tasks. Runtimes are clearly slower for JavaScript, but maybe acceptable if simple data is run in an efficient browser. However, as the data structures become more complex, the runtimes for JavaScript increase significantly and at a greater rate than Java. The results also highlight another issue: JavaScript performance varies widely between browsers, and this must be considered when creating any JavaScript application, as users will have their preferred browser. Extrapolating to the most expensive computational chemistry tasks, a fully ab initio quantum mechanics calculation would take days on a super computer, and would surely be wasted as a JavaScript implementation. However, there have been some implementations of intensive chemistry algorithms in JavaScript. Ertl et al. demonstrated a fully functional database with graph isomorphism searching directly in JavaScript [<xref ref-type="bibr" rid="CR24">24</xref>], transpiled from OpenChemLib [<xref ref-type="bibr" rid="CR25">25</xref>] (transpiled source code is automatically generated from source code in another programming language). The JavaScript cheminformatics library, Kekule.js, includes molecular geometry optimization features transpiled from OpenBabel [<xref ref-type="bibr" rid="CR26">26</xref>]. GLmol has an extension allowing it to create full molecular surfaces for proteins based on the EDTSurf algorithm [<xref ref-type="bibr" rid="CR27">27</xref>]. Not one performs at commercially acceptable speeds.</p>
            <p id="Par69">Poor performance is further compounded when trying to target mobile platforms, as mobile devices typically have less powerful hardware than traditional computers. This is a serious burden on the developer, as special care is needed when crafting JavaScript applications, and the efficiency of written code must always be scrutinized. Web sites and applications that are slow to load or execute will be immediately ignored by web surfers and penalized by search engines.</p>
            <p id="Par70">It is clear that native implementations will always have a significant performance advantage over JavaScript implementations. Regardless, there are encouraging trends as technology evolves: we continue to see more powerful processors on smaller devices, mitigating performance issues. Eventually, the slow JavaScript applications of today will be the fast applications of tomorrow. And for now, JavaScriptâs poor performance is far outweighed by its ubiquity on all platforms.</p>
          </sec>
          <sec id="Sec8">
            <title>Distribution</title>
            <p id="Par71">When creating any application, a developer intends to reach as many users as possible. Developers therefore choose a programming language suited to the platforms presentable to the largest number of potential users. Because each Operating System (OS) is unique (Windows executables cannot be run natively on macOS, for instance), significant resources are required to port applications to each platform. If these resources are not available, the choice becomes which users to exclude. Fortunately, some programming languages were conceived to obviate that choice by providing a layer over the native platform of several operating systems, so code can be âwritten once and run everywhereâ (coined by Sun Microsystems), thereby maximizing the developerâs effort. This was the inspiration to create the Java programming language; to allow developers to provide applications across Windows, macOS (formerly Macintosh and Mac OS X), Linux and others. Java remains a popular programming language today for producing scientific applications. Similarly, JavaScript became the programming language of the web; every significant web browser in existence, across traditional, mobile and emerging platforms, has built-in support for JavaScript. Many popular platforms, such as iOS, do not support Java, but do support JavaScript. In this way, JavaScript has surpassed Java as a universal programming language; no other programming language rivals JavaScript in its accessibility.</p>
            <p id="Par72">On mobile systems in particular, there is significant disagreement among developers about native implementations versus web based systems. Phones are technological Swiss army knives. Yet many of their features are not accessible in JavaScript (similar to how native desktop OS features are not always available in Java). To further capitalize on JavaScript work, systems like PhoneGap [<xref ref-type="bibr" rid="CR28">28</xref>] and Cordova [<xref ref-type="bibr" rid="CR29">29</xref>] use the native WebView components of the mobile operating systems to create native apps that can take advantage of features not available in mobile web browsers. WebView based solutions also provide a means for deployment through popular mobile app stores. Currently, a different approach for creating mobile apps using just web technologies called a Progressive Web Application (PWA) [<xref ref-type="bibr" rid="CR30">30</xref>] is gaining popularity among developers. Such JavaScript implementations can help chemistry software developers avoid significant development costs for each platform.</p>
            <p id="Par73">Another reason JavaScript is easy to distribute is no pre-compilation is required, nor is the creation of an executable. It is important to understand, while a server is required to host and distribute web applications, as a scripting language, JavaScript source code is downloaded and interpreted at runtime. Therefore, licensing becomes very important as JavaScript source code is difficult to protect, and is very easy to view, understand, modify and copy. Owners of proprietary projects must keep this in mind. Open source projects may benefit from this as the code is readily accessible when used, but special care should be taken to understand oneâs own licenses or the licenses associated with the JavaScript libraries being integrated. For instance, the commonly used General Public License (GPL) [<xref ref-type="bibr" rid="CR31">31</xref>] will automatically become enforceable for JavaScript code as the mere act of accessing a web page running GPL licensed JavaScript code requires that code to be distributed to client machines.</p>
            <p id="Par74">Finally, due to the issues involved in distributing large JavaScript projects, several JavaScript source processors exist, including Google Closure Compiler [<xref ref-type="bibr" rid="CR32">32</xref>], the Yahoo! User Interface (YUI) [<xref ref-type="bibr" rid="CR33">33</xref>] library and UglifyJS [<xref ref-type="bibr" rid="CR34">34</xref>]. These tools can minify and optimize source code by using certain patterns to shrink the size of JavaScript source downloads and optimize the code for more efficient performance (minification is a term specific to web technologies such as JavaScript, where small download sizes are optimal, and should not be confused with chemical applications of minimization, such as energy minimization or waste minimization). Such post-processing is strongly recommended when writing usable scientific programs. Some of these tools also have the ability to obfuscate JavaScript source, and when run completely, will destroy any intentionally public Application Programming Interface (API), but may help to protect proprietary code. It should be clear though, no amount of JavaScript obfuscation will be able to stop a determined hacker from reverse engineering or finding vulnerabilities in JavaScript work.</p>
          </sec>
          <sec id="Sec9">
            <title>Security</title>
            <p id="Par75">Aspects of the JavaScript programming language make security an important concern. Traditional applications run on the OS. Users will verify the legitimacy of the programs they use or rely on virus scans to protect their computers. JavaScript, however, is run on webpages just by visiting them. Given the vast number of users visiting web pages continuously, JavaScript is a prime vector for hackers to distribute harmful software. To reduce risk, JavaScript is sandboxed in the web browser and does not have access to the same features essential to other programming languages. There is no access to the file system or the system clipboard for copy and paste functionality. Browser producers may impose further restrictions, including ignoring running code attempting to identify and track users or disabling JavaScript based ads in web pages. Performance intensive applications may also be throttled by browsers. For example, there are limits to the resources available to WebGL canvases, and any long running algorithms may be halted.</p>
            <p id="Par76">The client side execution of JavaScript leaves it open to another attack vector. Since JavaScript is interpreted at runtime, any capable developer can remove, modify or inject their own behavior into web applications. This introduces special concerns for products enforcing integrity of data, such as eLearning systems. If grading mechanisms for such a system are exposed in JavaScript, a student can simply modify relevant code when running that application to achieve a perfect score without doing the exercises. System vulnerability can be compounded, as individuals without programming knowledge may naÃ¯vely rely on 3rd party hacks to control the JavaScript software, exposing them to malicious behavior including the wide-scale transmission and monitoring of information about the application and its users.</p>
            <p id="Par77">If any personal or proprietary data is processed in JavaScript, the data will have to be downloaded and accessible to the user, compromising any confidentiality. Regardless of the best practices a company should uphold, new laws are now ratified to protect user information. The European Union (EU) began to enforce the General Data Protection Regulation (GDPR) in 2018 [<xref ref-type="bibr" rid="CR35">35</xref>], requiring all companies to gain consent for the acquisition and handling of user information. Handling of data in JavaScript is also troublesome for electronic laboratory notebooks, where 21 CFR Part 11 [<xref ref-type="bibr" rid="CR36">36</xref>] compliance is required. So JavaScript applications need to be built in a way to protect the integrity of systems and the confidentiality of information. These considerations are essential, but inherently difficult, for small scientific startup companies.</p>
            <p id="Par78">There are some common practices a developer should follow when creating JavaScript applications. Hypertext Transfer Protocol encrypted using Transport Layer Security (HTTPS) [<xref ref-type="bibr" rid="CR37">37</xref>] utilizes a Secure Sockets Layer (SSL) technology to encrypt communications between users and a server, protecting them from hackers and data snooping. Implementation of HTTPS requires significant technical knowledge to implement, and financial resources for the SSL certificate, but without it, users are left vulnerable. Any unprotected web application will, at best, be viewed suspiciously and will ultimately be penalized by search engines. Sensitive data should only be handled in JavaScript when absolutely necessary. Any user information, for instance, proprietary molecular data, should be encrypted and sent to a properly administered server for any storage or processing.</p>
            <p id="Par79">The accessibility of JavaScript applications is worthwhile to scientists, although security issues are a significant concern. Another powerful quality of JavaScript makes up for this weakness. As a web technology, JavaScript has built-in, real-time access to server resources, protecting user information and proprietary algorithms on an administered server. Any technology can then be distributed through a JavaScript graphical user interface (GUI). As a result, JavaScript possesses a unique ability for making even the most specific, hard to use, and unsupported scientific code bases accessible to users around the world. JavaScript truly facilitates collaboration and the dissemination of knowledge.</p>
          </sec>
          <sec id="Sec10">
            <title>Legacy code</title>
            <p id="Par80">As web applications grew, developers pursued creative ways to engage with users in JavaScript, the primary restriction being that content on a page was limited to what was downloaded. If content was to be changed, for example based on information in a server database, the web interface needed to communicate the changes to a server, then re-download the new content to be viewed, forcing the user to tolerate a reload of the web page. Microsoft introduced a new solution to this in 1999 with the XMLHTTP ActiveX control in Internet Explorer [<xref ref-type="bibr" rid="CR38">38</xref>]. This new technique facilitated direct access to a server in JavaScript. As an asynchronous call, connections to the server would not block the responsiveness of the interface, and the direct communication of information back to the JavaScript call allowed the developer a powerful technique to interact with the user. All other browsers adopted this technique as the standard web technology, XMLHTTPRequest (XHR). Development patterns making use of the XHR object became known as Asynchronous JavaScript and XML (AJAX).</p>
            <p id="Par81">For security reasons, AJAX requests were limited to contacting the host origin, but HTML5 brought XHR2, which provided a new protocol to allow XMLHTTPRequest to contact and validate connections to external origins.</p>
            <p id="Par82">A system utilizing AJAX to communicate chemical information to the server can take advantage of any chemistry technology in existence. Even old legacy code can be hosted on a server and accessed with a JavaScript GUI. Proprietary code can be protected, and programs requiring advanced expertise and resources to compile and run can be deployed as a service. CPU intensive algorithms, such as energy minimization or quantum mechanics calculations, can be hosted on powerful servers, so users have an alternative to longer run times on their less powerful computer. Many chemistry databases are working to provide services through AJAX. One notable example is the Macromolecular Transmission Format (MMTF) [<xref ref-type="bibr" rid="CR39">39</xref>] JavaScript libraries distributed by the Research Collaboratory for Structural Bioinformatics (RCSB), aimed to improve Protein Data Bank (PDB) handling in web applications.</p>
            <p id="Par83">Although XML is stated as part of the AJAX process, any protocol may be used to communicate with the server. Most applications use JavaScript Object Notation (JSON) [<xref ref-type="bibr" rid="CR40">40</xref>], which is a protocol for defining data structures in JavaScript. JSON is a native feature in JavaScript syntax, so JSON in JavaScript source is easily written and efficiently processed. Several JSON formats were conceived specifically for chemistry. The ChemDoodle JSON format is designed as a minimalistic and extensible definition for molecules and their associated chemical and graphical objects and properties, both in 2D and 3D [<xref ref-type="bibr" rid="CR41">41</xref>]. Both the open source ChemDoodle Web Components and OpenBabel provide support for ChemDoodle JSON. The OpenChemistry project [<xref ref-type="bibr" rid="CR42">42</xref>] has also defined a Chemical JSON format [<xref ref-type="bibr" rid="CR43">43</xref>]. OpenEye proposed a chemistry oriented JSON format with a focus on extensibility, but it has ceased to exist. Use of the browser <italic>JSON.stringify()</italic> and <italic>JSON.parse()</italic> functions allows the developer to convert between JavaScript and String objects, to facilitate JSON communication with a server through AJAX.</p>
            <p id="Par84">Another popular chemistry protocol for the web is Chemical Markup Langauge (CML) [<xref ref-type="bibr" rid="CR44">44</xref>]. CML is an XML format, just like HTML, so CML can be embedded directly in the DOM, but it must be manually processed to be handled in JavaScript, unlike JSON formats. CML is a mature chemistry protocol with support in a number of toolkits, making it a prime choice for server side handling.</p>
            <p id="Par85">Another method to use legacy code bases in JavaScript is called transpilation, where source from another programming language is automatically converted into JavaScript source. The JavaScript vulnerabilities in performance and security remain. JSME [<xref ref-type="bibr" rid="CR45">45</xref>] was transpiled from a Java applet to JavaScript with the use of the Google Web Toolkit (GWT) compiler [<xref ref-type="bibr" rid="CR46">46</xref>]. Kekule.js developers use Emscripten [<xref ref-type="bibr" rid="CR47">47</xref>] to port functionality from the C library, OpenBabel, to JavaScript. JSmol [<xref ref-type="bibr" rid="CR48">48</xref>] is a transpilation of the Jmol Java applet into JavaScript making use of the SwingJS tool [<xref ref-type="bibr" rid="CR49">49</xref>]. There are three considerations when using a transpilation tool: (1) the process will not be perfect, so the resulting code will have to be scrutinized, and likely post-edited, to ensure proper behavior; (2) the transpiled code may be injected with a middle layer introducing overhead in the application, compounding the performance issues in JavaScript possibly leading to the inconvenience of loading screens; (3) the resulting transpiled code, constructed by a machine, is difficult for the average developer to decipher. Transpiled source code defeats the purpose of open source software in JavaScript, as the original code base is necessary to make any changes, and the transpilation process must be run again to produce a JavaScript result. Proprietary code transpiled into JavaScript is inherently more prone to reverse engineering than the original source. Transpilation is best reserved for GUIs when the authors do not have the technical ability or opportunity to create a complementary JavaScript project.</p>
            <p id="Par86">Some JavaScript applications are impractical due to performance and security issues. Through servers, JavaScript developers can protect their systems and users and benefit from existing technology. This is very important for chemists, as there is a significant amount of computational innovation across many programming languages since the inception of computer systems. We want to retain access to the work of the computational chemists of the past. In the end, JavaScript applications excel at providing graphical user interfaces when paired with server side functionality.</p>
          </sec>
          <sec id="Sec11">
            <title>Graphics</title>
            <p id="Par87">Several steps were necessary to bring JavaScript to its current excellence in visualization. JavaScript originally only manipulated HTML DOM elements and CSS. So the early chemistry interfaces were limited to input forms allowing some calculation to be output. Further work allowed for the presentation of periodic tables. WebElements [<xref ref-type="bibr" rid="CR50">50</xref>] and Ptable [<xref ref-type="bibr" rid="CR51">51</xref>] are two of the earliest examples. Rendering of molecular structures was not practical with just the HTML elements available; Adam Grossman demonstrated a simplistic molecule viewer with just HTML elements and CSS [<xref ref-type="bibr" rid="CR52">52</xref>].</p>
            <p id="Par88">The advent of HTML5 and the introduction of the &lt;canvas> element enabled JavaScript to create graphics. With the &lt;canvas> element, a JavaScript developer can draw 2D graphics in a DOM element. When text rendering capability was added to &lt;canvas>, chemists had all the tools necessary for publication quality 2D graphics natively on the web. The ChemDoodle Web Components library [<xref ref-type="bibr" rid="CR18">18</xref>] was the first JavaScript solution for rendering 2D chemical structures using &lt;canvas>. Several tools attempted to use &lt;canvas> to render orthographic 3D structures, including CanvasMol [<xref ref-type="bibr" rid="CR53">53</xref>], ChemDoodle and TwirlyMol [<xref ref-type="bibr" rid="CR54">54</xref>]. More complex PDB structures incorporating ribbon diagrams were successfully rendered by Jolecule [<xref ref-type="bibr" rid="CR55">55</xref>] using just &lt;canvas> graphics in 2D.</p>
            <p id="Par89">Introducing 3D hardware accelerated graphics as a JavaScript ability was the next step. WebGL was introduced to provide JavaScript bindings for OpenGL, specifically OpenGL ES 2, through the &lt;canvas> element. The ChemDoodle Web Components library was again the first toolkit to provide 3D graphics of molecules using WebGL [<xref ref-type="bibr" rid="CR56">56</xref>]. SpiderGL [<xref ref-type="bibr" rid="CR57">57</xref>] was also documented. GLmol [<xref ref-type="bibr" rid="CR58">58</xref>], and associated forks (a fork is a copy of the original project where new developers typically work towards a different goal), are based on the three.js WebGL library [<xref ref-type="bibr" rid="CR59">59</xref>].</p>
            <p id="Par90">Scalable Vector Graphics (SVG) [<xref ref-type="bibr" rid="CR60">60</xref>] is a complementary graphical feature in HTML5. SVG is an XML protocol defining 2D drawing instructions for graphics, but lacks capability for defining 3D objects. HTML5 &lt;canvas> is based on a bitmap buffer, so the scale and resolution of the screen or device must be properly taken into account for clear graphics. SVG rendering is independent of the resolution or scale of the device. Creating dynamic applications with SVG is more difficult as any changes require DOM manipulation.</p>
            <p id="Par91">The most important interface enabled by these graphical features is a chemical sketcher. Chemistry is unique because a molecular structure is the core unit to be communicated. The browser natively supports other interfaces through forms containing text fields and check boxes and calendars, but lacks a chemical sketcher. The availability of a JavaScript based chemical sketcher is therefore essential to chemists. The first example of a chemical sketcher in JavaScript was jsMolEditor [<xref ref-type="bibr" rid="CR61">61</xref>]. Currently, advanced, open source, chemical drawing interfaces exist in pure JavaScript, including the ChemDoodle sketcher [<xref ref-type="bibr" rid="CR62">62</xref>], Ketcher [<xref ref-type="bibr" rid="CR63">63</xref>] and in Kekule.js.</p>
            <p id="Par92">One serious topic involving interfaces is accessibility for individuals with disabilities. Chemistry software developers should concern themselves with making their work accessible. HTML5 introduced features for controlling graphics and sound, and touch screens allow many creative input solutions through software and hardware accessories. JavaScript is present on these emerging platforms, with APIs to work with traditional mouse and keyboard events as well as touchscreen events and gestures. This is beneficial for organizations creating educational products as the Americans with Disabilities Act (ADA) requires accessibility considerations in chemistry software in the United States [<xref ref-type="bibr" rid="CR64">64</xref>]. Many governing bodies enforce accessibility in public software as well, adhering to the Web Content Accessibility Guidelines (WCAG) specification [<xref ref-type="bibr" rid="CR65">65</xref>], which is an International Organization for Standardization (ISO) standard. Through JavaScript, the communication of chemistry between individuals and computers has never been easier.</p>
            <p id="Par93">Chemical applications on the web greatly expanded with the capability of communicating chemistry in both 2D and 3D in JavaScript. Currently, almost every major chemistry related software product has integrated a web based interface using JavaScript. Two notable examples are SciFinder, and a new solution from the Chemical Abstracts Service (CAS), SciFinder-n [<xref ref-type="bibr" rid="CR66">66</xref>], using JavaScript interfaces to provide further access. SciFinder presents the venerable CAS content collection, a clear validation of the importance of JavaScript interfaces in commercial chemistry products.</p>
          </sec>
          <sec id="Sec12">
            <title>Further innovation</title>
            <p id="Par94">Many new JavaScript features continue to be conceived. A feature called localStorage (and its companion sessionStorage) allows JavaScript applications to store information through page loads [<xref ref-type="bibr" rid="CR67">67</xref>]; Web Workers provides a framework for multi-threaded JavaScript applications [<xref ref-type="bibr" rid="CR68">68</xref>]; the &lt;audio> tag allows sounds to be played in JavaScript [<xref ref-type="bibr" rid="CR69">69</xref>]; WebSockets allows a continuous link between a JavaScript application and a web server for direct and constant communication [<xref ref-type="bibr" rid="CR70">70</xref>]. Continued innovation in JavaScript is a direct result of developersâ work to provide solutions on the web.</p>
          </sec>
        </sec>
        <sec id="Sec13">
          <title>Programming</title>
          <p id="Par95">JavaScript exhibits the common aspects of most programming languages. Semantics and a syntax familiar to programmers are defined to communicate with the computer. There are primitives, functions and for loops. JavaScript also harbors a number of significant differences including its scopes and context, the global namespace and the need for browser standardization. In this section, an outline of important topics for programming chemistry in JavaScript is presented. Many resources exist to introduce those interested in computer science to programming. JavaScript is a web technology, and the vast majority of instructional material for JavaScript can be found freely on the Internet. We will be focusing on the technicalities of JavaScript programming. The instruction begins with a reinforcement of JavaScript basics to prepare readers for more complex constructs, leading to the implementation of Object Oriented Programming (OOP) in JavaScript and how chemistry can be represented.</p>
          <p id="Par96">At the time of this writing, the latest version of ECMAScript is version 9, also known as ECMAScript 2018 [<xref ref-type="bibr" rid="CR10">10</xref>]. Technologies evolve rapidly and information herein may become obsolete as changes are made.</p>
          <sec id="Sec14">
            <title>Reinforcing the basics</title>
            <p id="Par97">JavaScript is an easy language to learn, but a very difficult one to master. Additionally, certain programming constructs can be coded using many different syntactical approaches, making the language very inconsistent. Yet, this lack of rigidity makes the language very malleable, and the possibilities are only restricted by the creativity of the developer. Developers attempting to create the complex applications necessary for chemistry without fully understanding the unique aspects of the language will encounter serious issues. Most importantly, an understanding of scope, context and closures is necessary to properly direct the behavior of JavaScript applications. These topics are covered in more detail in the following sections.</p>
            <p id="Par98">Several source code listings accompany the following topics. There are several ways to execute JavaScript code. The first is through a browserâs JavaScript console. The second is by including JavaScript directly in the DOM for a loaded web page using &lt;script> tags. The third is through the import of a JavaScript source file in a web page, typically with a .js extension.</p>
            <sec id="Sec15">
              <title>Integrated Development Environment</title>
              <p id="Par99">An Integrated Development Environment (IDE) is a powerful tool for developers to quickly address mistakes and errors when writing code. IDEs are less practical for JavaScript. While several IDEs exist, core JavaScript behavior does not come from a standard compiler, but through each of the individual browsers. So no IDE can truly provide an accurate development environment. It is often best to write JavaScript code and then test it in each browser being targeted, typically all of them.</p>
              <p id="Par100">Fortunately, each browser contains a JavaScript console for examining errors, running snippets of code, altering interpreted code and more. For instance, in Chrome, we can access the JavaScript console by selecting the <bold>View>Developer>JavaScript Console</bold> menu item. Figure shows the JavaScript console in Google Chrome.<fig id="Figa" position="anchor"><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Figa_HTML.png" position="anchor" /></fig></p>
              <p id="Par101">We can output to the JavaScript console using the <italic>console.log()</italic> function as shown in ListingÂ <xref rid="Fig1" ref-type="fig">1</xref>. The JavaScript interpreter will ignore comments in source code, designated as any text on a line preceded by a pair of forward slashes (//).</p>
              <fig id="Fig1">
                <label>Listing 1</label>
                <caption xml:lang="en">
                  <p>Using the console.log() function</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig1_HTML.png" />
              </fig>
              <p id="Par102">Note that JavaScript strings should typically be declared with single quotes. There is no difference between a JavaScript string created with single quotes and one created with double quotes. However, JavaScript works in an HTML environment where any XML strings will undoubtedly contain double quotes. Using single quotes allows the quick writing of strings with double quotes included, without having to escape them or deal with difficult to find string construction errors.</p>
            </sec>
            <sec id="Sec16">
              <title>Browser standardization</title>
              <p id="Par103">One of the significant drawbacks to creating JavaScript applications is the lack of a standard compiler. ECMAScript defines the JavaScript language; implementation is left up to each browser. This fragments the web ecosystem and developers would be unaware of any issues in the browsers they do not use. Fortunately, there are well supported JavaScript projects aiming to standardize JavaScript behavior across browsers. jQuery [<xref ref-type="bibr" rid="CR71">71</xref>] and Sencha [<xref ref-type="bibr" rid="CR72">72</xref>] are popular examples. These libraries were essential in the past, as huge discrepancies between JavaScript implementations existed, but are becoming less important as modern browsers work to achieve a more consistent implementation. Reliance on browser standardization libraries should only be allowed when code maintenance is improved, such as with the DOM manipulation features of jQuery.</p>
              <p id="Par104">As HTML5 continues to evolve, new features continue to be invented and extensions to old features are introduced. Each of the browsers is developed independently on its own schedule, so implementation of HTML5 features is far from synchronized. Polyfills can be used to inject behavior before features are natively implemented, and removed when the features are universally available. For instance, <italic>requestAnimationFrame()</italic> is recommended for WebGL animations, while <italic>setTimeout()</italic> is the traditional function for working with timers. A polyfill can check if <italic>requestAnimationFrame()</italic> exists, and if not, create one using the <italic>setTimeout()</italic> function.</p>
            </sec>
            <sec id="Sec17">
              <title>Variable typing</title>
              <p id="Par105">JavaScript is an untyped programming language (also referred to as weakly typed), which means the interpreter will not care what type of data is defined to a variable until evaluating an expression. A variable can be declared as a number, and then later set to a string. The freedom an untyped programming language provides is very powerful, but it is necessary for algorithm logic to be aware of the variable types, and to avoid changing them, as the interpreter will automatically cast mixed types to the same type for execution, leading to unexpected results or errors.</p>
              <p id="Par106">To overcome some issues with variable typing, JavaScript includes a pair of strict equality operators, <italic>===</italic> and <italic>!==</italic>, in addition to the typical equality operators, <italic>==</italic> and <italic>!=</italic>. The typical operators will match values even if the variable types are different, for instance the number 10 will match the string â10â, and the number 0 will match the Boolean false. The strict operators not only check for value equivalence, but also that the types of values on both sides of the operator are equivalent. The strict equality operators are therefore less error prone and should always be preferred in application logic.</p>
            </sec>
            <sec id="Sec18">
              <title>Declaring variables</title>
              <p id="Par107">Originally, a variable could be created in one of two ways in JavaScript, without a keyword or with the <italic>var</italic> keyword. ECMAScript 6 introduced two new ways of declaring variables using the <italic>let</italic> and <italic>const</italic> keywords.</p>
              <p id="Par108">The <italic>var</italic> and <italic>let</italic> keywords are very similar, and most well written code would not see any difference in behavior when switching between the declarations. Technically, <italic>var</italic> binds a variableâs visibility to the closest enclosing function or global scope, while <italic>let</italic> binds a variableâs visibility to the closest enclosing block or global scope. The differences between the behavior of the <italic>var</italic> and <italic>let</italic> declarations can be seen in ListingsÂ <xref rid="Fig2" ref-type="fig">2</xref> and <xref rid="Fig3" ref-type="fig">3</xref>. A variable can be accessed before it is first declared with the <italic>var</italic> keyword; this is referred to as variable hoisting, and can cause errors if not properly understood. Using <italic>let</italic> will help to avoid programming errors if the same variable name is accidentally declared twice in the same scope since an error will be thrown. Using <italic>let</italic> also avoids semantics issues when multiple scopes have access to the same variable. This has important ramifications, especially when utilizing the for loop variable to generate functions, which are common when building JavaScript interfaces.</p>
              <fig id="Fig2">
                <label>Listing 2</label>
                <caption xml:lang="en">
                  <p>Using the var keyword</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig2_HTML.png" />
              </fig>
              <fig id="Fig3">
                <label>Listing 3</label>
                <caption xml:lang="en">
                  <p>Using the let keyword</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig3_HTML.png" />
              </fig>
              <p id="Par109">Additionally, using <italic>let</italic> provides more control in the global scope, as such declared variables will not be defined to the <italic>window</italic> object. The <italic>window</italic> object is the standard, top-level, JavaScript object. While older code will typically use the <italic>var</italic> keyword as it was the only option, <italic>let</italic> should now always be used instead.</p>
              <p id="Par110">The <italic>const</italic> keyword declares an unchangeable variable, similar to the <italic>final</italic> modifier in Java. If a <italic>const</italic> variable is assigned to an object, the objectâs properties can be changed, while the variable pointer to the object cannot. This technique is useful when creating a value that should remain consistent throughout the lifetime of the application, such as core bond order variables in cheminformatics toolkits.</p>
              <p id="Par111">If no keyword is used when declaring a variable, the visibility of the variable becomes global regardless of the scope it is in, polluting the global namespace and potentially causing issues. This should never be done.</p>
            </sec>
            <sec id="Sec19">
              <title>Lexical scope</title>
              <p id="Par112">JavaScript is meant to be executed for a web page, and source can be interpreted at any point for a page, before or after the DOM is closed. So unlike traditional application source code that is compiled and run, JavaScript code is run by loading a web page into the browser.</p>
              <p id="Par113">Due to the need for JavaScript to access all the aspects of a web page, the main programming construct is basically a giant resource pool. This pool is specifically called the global scope and the union of all variables defined in the global scope is called the global namespace. Lexical scope in JavaScript is therefore more complex than in other languages. Everything and anything pertaining to the webpage can be accessed in JavaScript through the global scope, exposing implementation and behavior to other parts of the application, other developers and even users during runtime. JavaScript resources do not persist between page loads (an exception is the <italic>window.name</italic> variable as well as <italic>localStorage</italic> and <italic>sessionStorage</italic>).</p>
              <p id="Par114">When a function is defined, a new scope is produced, denoted by a pair of enclosing curly braces. This is called a local scope. All scopes have access to the variables contained within and in parent scopes up to the global scope, but do not have access to variables in their child scopes. The combination of a function with its own scope and all of the variables the function has access is known in JavaScript as a closure. Closures are an important concept in JavaScript. When only using the <italic>let</italic> variable declaration, any statement block curly brace pairs will define a local scope, not just functions.</p>
              <p id="Par115">In addition to exposing implementation, the global scope can become a hindrance to programming, as care is needed to avoid name clashes that would overwrite previously defined variables. As multiple libraries are included into a webpage, such conflicts are inevitable. In chemistry, every library will undoubtedly contain a âMoleculeâ class. The increased probability of conflict caused by creating global variables is called global namespace pollution. Avoiding pollution is a requirement for any usable scientific library. Techniques for doing so are discussed in the "<xref rid="Sec23" ref-type="sec">Object Oriented Programming</xref>" section.</p>
            </sec>
            <sec id="Sec20">
              <title>Undefined values</title>
              <p id="Par116">It is also important to represent values that have not yet been set, and JavaScript has two keywords for this: <italic>undefined</italic> and <italic>null</italic>. This can lead to confusion, as many programmers are familiar with the <italic>null</italic> keyword from other languages. In JavaScript, <italic>undefined</italic> refers to a variable that has been declared, but not assigned, while <italic>null</italic> is actually an object used by a developer to represent nothing. Therefore, the <italic>null</italic> keyword would only be useful for specific logic as it must be assigned, and is never necessary. The <italic>undefined</italic> keyword should always be used to check for unassigned variables as shown in Listing <xref rid="Fig4" ref-type="fig">4</xref>.</p>
              <fig id="Fig4">
                <label>Listing 4</label>
                <caption xml:lang="en">
                  <p>Behavior of undefined and null</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig4_HTML.png" />
              </fig>
            </sec>
            <sec id="Sec21">
              <title>Creating objects</title>
              <p id="Par117">Objects can be created in JavaScript by assigning a variable to curly brace pairs as shown in ListingÂ <xref rid="Fig5" ref-type="fig">5</xref>. An array (which is special object) can be declared similarly, but with square bracket pairs. Notice we can use JSON to fully define object parameters. Object properties, including functions, can be redefined at any point during runtime.</p>
              <fig id="Fig5">
                <label>Listing 5</label>
                <caption xml:lang="en">
                  <p>Creating an object</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig5_HTML.png" />
              </fig>
            </sec>
            <sec id="Sec22">
              <title>Creating functions</title>
              <p id="Par118">Functions also have unique behaviors in JavaScript, as functions are first class objects and can be assigned properties. ListingÂ <xref rid="Fig6" ref-type="fig">6</xref> shows how we create a function.</p>
              <fig id="Fig6">
                <label>Listing 6</label>
                <caption xml:lang="en">
                  <p>A function declaration</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig6_HTML.png" />
              </fig>
              <p id="Par119">The created function is now an object in its enclosing scope. The function can be accessed as an object by using the function name and can be executed by using the function name followed by an invoking pair of parentheses.</p>
              <p id="Par120">Notice the included semicolons after every declaration, even for functions as in line 4 of ListingÂ <xref rid="Fig6" ref-type="fig">6</xref>. While semicolons are not required in JavaScript, including them makes code easier to read, helps the interpreter and will remove any ambiguities that may arise.</p>
              <p id="Par121">JavaScript primitives perform in a similar manner to primitives in other programming languages. JavaScript primitives are passed as values when included as a parameter in a function, while objects are passed as pointers, which means manipulation of an object inside of a function will change the original object used to call the function. JavaScript functions can return data, as in other languages, but if no return statement is included in a function, <italic>undefined</italic> will be automatically returned upon completion.</p>
              <p id="Par122">We can alternatively create the function with a more obvious object syntax as shown in ListingÂ <xref rid="Fig7" ref-type="fig">7</xref>. Any data is assigned to the function to avoid polluting the global namespace. The method of creating a function shown in ListingÂ <xref rid="Fig6" ref-type="fig">6</xref> is called a function declaration, while ListingÂ <xref rid="Fig7" ref-type="fig">7</xref> uses a function expression. Only function declarations are subject to hoisting by the JavaScript interpreter and will be available at any time in its enclosing scope.</p>
              <fig id="Fig7">
                <label>Listing 7</label>
                <caption xml:lang="en">
                  <p>A function expression</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig7_HTML.png" />
              </fig>
              <p id="Par123">Functions form the basis for class creation in JavaScript, which will lead to the implementation of OOP; this method of programming is essential for implementing chemistry algorithms.</p>
            </sec>
          </sec>
          <sec id="Sec23">
            <title>Object Oriented Programming</title>
            <p id="Par124">In contrast to procedural programming, OOP enforces a data structure centric logic for software development. Such a paradigm produces code that is easier to read, compartmentalized, reusable and less prone to errors. This model is particularly beneficial for chemistry applications, as molecules are represented as graph data structures. When properly implemented in JavaScript, OOP APIs benefit from protection of implementation details and a reduction in global namespace pollution. Many resources exist for introducing OOP to the interested developer. The following section discusses the implementation of OOP in JavaScript.</p>
            <sec id="Sec24">
              <title>Classes</title>
              <p id="Par125">Object oriented programs build consistent instantiations of objects from defined classes. An object is programmatically instantiated from a class definition by invoking the class constructor. In JavaScript, a class constructor is represented as a basic function as shown in ListingÂ <xref rid="Fig8" ref-type="fig">8</xref>.</p>
              <fig id="Fig8">
                <label>Listing 8</label>
                <caption xml:lang="en">
                  <p>A basic class using a function expression</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig8_HTML.png" />
              </fig>
              <p id="Par126">The <italic>new</italic> keyword is used to instantiate an object from the class definition as shown on line 12 of ListingÂ <xref rid="Fig8" ref-type="fig">8</xref>. Once instantiated, associated class functions are accessible from the object. Functions declared inside of the constructor are called privileged functions and can access private variables defined in the constructor scope, but will be created anew for each instance.</p>
              <p id="Par127">JavaScript classes are not traditional classes, as would be found in OOP languages like Java and C++, which provide strict mechanisms for defining and extending classes. Instead, JavaScript uses the <italic>prototype</italic> keyword to describe inheritable properties for objects as shown in ListingÂ <xref rid="Fig9" ref-type="fig">9</xref>. Functions set to the prototype are only created once for all instances. As a result, prototype functions are more efficient than privileged functions.</p>
              <fig id="Fig9">
                <label>Listing 9</label>
                <caption xml:lang="en">
                  <p>Defining a class using prototype</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig9_HTML.png" />
              </fig>
              <p id="Par128">One of the most important aspects of OOP is extending classes. A child of the <italic>Atom</italic> class, called <italic>Atom3D</italic>, implementing a <italic>z</italic>-coordinate, is created in ListingÂ <xref rid="Fig10" ref-type="fig">10</xref>. Checking class types in JavaScript is possible with the <italic>instanceof</italic> operator in expressions.</p>
              <fig id="Fig10">
                <label>Listing 10</label>
                <caption xml:lang="en">
                  <p>Extending a class</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig10_HTML.png" />
              </fig>
              <p id="Par129">The prototype system in JavaScript facilitates extending parent class functionality. When an instantiated object calls a function, the interpreter first checks the objectâs parameters in search of the function. If it cannot find the function, then the prototypeâs parameters (through the <italic>__ proto__</italic> parameter) are checked, and then the prototypeâs prototype, and so forth until the core <italic>Object</italic> prototype is reached. Functions defined to the prototype all point to a single instantiation, so at any time, the behavior can be changed for all instances of the class at once. Prototype based classes are therefore very powerful, and allow malleability not possible in traditional OOP languages because classes would be defined at compile time and unmodifiable.</p>
              <p id="Par130">ECMAScript 6 added traditional <italic>class</italic> syntax. While classes written this way will be more familiar to developers of other OOP languages, the underlying implementation in JavaScript still relies on the prototype system. Therefore, the JavaScript <italic>class</italic> syntax should be avoided, as it implies behavior not consistent with the way prototype classes work.</p>
            </sec>
            <sec id="Sec25">
              <title>Context</title>
              <p id="Par131">Another peculiarity of JavaScript behavior is context, due to the unique scoping system. Context concerns what the <italic>this</italic> keyword references. Typically, in JavaScript, the <italic>this</italic> keyword allows programmatic access to the object performing the function, similar to standard OOP languages. So a created object will have the <italic>this</italic> keyword referencing itself and in any owned functions. Similarly, if the <italic>new</italic> keyword is used to instantiate a class object, all of the instantiated objectâs functions will be able to access the instance they are bound to through the <italic>this</italic> keyword.</p>
              <p id="Par132">In the global namespace, <italic>this</italic> refers to the <italic>window</italic> object. In any functions created outside of objects, <italic>this</italic> also refers to the <italic>window</italic> object, unless the source is being interpreted in strict mode, <italic>vide infra</italic>, in which case <italic>this</italic> is undefined. There is an exception if the function acts as an event handler set through the <italic>addEventListener()</italic> function or through an inline on-event handler, and in these cases <italic>this</italic> refers to the DOM object firing the event.</p>
              <p id="Par133">There are also methods for overriding the reference of <italic>this</italic> in JavaScript. ECMAScript 3 added the <italic>call()</italic> and <italic>apply()</italic> functions for defining what the context, and therefore the <italic>this</italic> keyword, refers to during the immediate execution of a function. ECMAScript 5 added the <italic>bind()</italic> function to explicitly set the context for a given function regardless of how it is called.</p>
            </sec>
            <sec id="Sec26">
              <title>Immediately invoked function expression</title>
              <p id="Par134">The openness of JavaScript resources through the global scope introduces programming issues for developers. An interesting JavaScript quirk can be used to provide a cleaner solution utilizing the grouping operator. The grouping operator should be familiar to all developers, as it is represented by a pair of parentheses in expressions to denote execution order precedence.</p>
              <p id="Par135">Programming language compilers typically implement the grouping operator by creating an unnamed temporary variable in the execution of an expression, otherwise known as an anonymous variable. JavaScript allows functions in expressions, and when a grouping operator surrounds a single function expression, the function itself is encapsulated as an anonymous variable. Therefore, source can be interpreted and executed without producing anything directly accessible in the current scopeâs namespace, and hiding any internal variables from the outer scope, in essence, creating an anonymous closure. The anonymous function can then be invoked with a subsequent pair of parentheses. Such a construct is called an immediately invoked function expression (IIFE). An example is shown in ListingÂ <xref rid="Fig11" ref-type="fig">11</xref>.</p>
              <fig id="Fig11">
                <label>Listing 11</label>
                <caption xml:lang="en">
                  <p>Implementing a library package using an IIFE</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig11_HTML.png" />
              </fig>
              <p id="Par136">The final pair of parentheses used for invoking the function can be included inside or outside of the closing parenthesis of the grouping operator; its positioning makes no difference to the behavior.</p>
              <p id="Par137">IIFEs are incredibly useful in JavaScript programs, as such constructs produce a closure where variable visibility can be restricted, and the only variables set to outer scopes are what the developer intends to provide access to. In ListingÂ <xref rid="Fig11" ref-type="fig">11</xref>, developers cannot modify the <italic>version</italic> variable at runtime, protecting internal implementation details relying on the variable, while still providing read-only access to the version through the lone <italic>Chemistry</italic> variable defined to the global namespace (a credible scientific library should always include programmatic read-only access to its version). This technique can be extrapolated to entire class definitions. ListingÂ <xref rid="Fig12" ref-type="fig">12</xref> shows the <italic>Atom</italic> class in an IIFE. Notice how the <italic>isAllowedSymbol()</italic> function is local to the IIFE and cannot be changed without modifying the source directly before interpretation. The developer wrote the function to facilitate functionality in the class, but does not want the function to be visible to others at runtime. Due to the local variables encouraged by IIFEs, JavaScript source code processors can be even more efficient at minifying source.</p>
              <fig id="Fig12">
                <label>Listing 12</label>
                <caption xml:lang="en">
                  <p>Privatizing variables in a class within a module</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig12_HTML.png" />
              </fig>
              <p id="Par138">Many issues arise from the uniqueness of the JavaScript programming language. Cheminformatics applications in JavaScript can suffer if aspects of the code are exposed, given the complexity of chemistry based data structures and algorithms. JavaScript developers can address these issues by expertly working with the behavior of JavaScript interpreters and using IIFEs. IIFEs form the groundwork for building large and complex programs in JavaScript by giving developers control over the visibility of the components of an application.</p>
            </sec>
            <sec id="Sec27">
              <title>Module pattern</title>
              <p id="Par139">Taking a step further, using IIFEs to create organized object oriented code is modeled by the module design pattern [<xref ref-type="bibr" rid="CR73">73</xref>]. An IIFE facilitates OOP by providing a means to encapsulate JavaScript code, controlling implementation visibility while the module pattern organizes classes and functionality. IIFEs allow the simulation of an import system by passing variables through the invoking pair of parentheses. ListingÂ <xref rid="Fig13" ref-type="fig">13</xref> shows the import of the <italic>console</italic> global variable. Execution is now more efficient as the interpreter does not need to search for the <italic>console</italic> variable up through the global scope. Source code processors can further minify the IIFE source, as the <italic>console</italic> variable is now a local parameter. The <italic>undefined</italic> keyword is provided to the IIFE as the last parameter, even though it is not present in the invoking pair of parentheses. The additional parameter is provided because <italic>undefined</italic> can be declared as a variable name in JavaScript, and locally overriding the <italic>undefined</italic> variable to something that hasnât been declared protects code logic from interference.</p>
              <fig id="Fig13">
                <label>Listing 13</label>
                <caption xml:lang="en">
                  <p>Using imports in a module</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig13_HTML.png" />
              </fig>
              <p id="Par140">A library written in a single IIFE would quickly become unmanageable, and so several IIFEs can be used to link individual segments of logic, referred to as modules, into a single library utilizing parameter imports. ListingÂ <xref rid="Fig14" ref-type="fig">14</xref> shows how the module pattern can be used to organize discrete classes. Classes can then be easily added and removed.</p>
              <fig id="Fig14">
                <label>Listing 14</label>
                <caption xml:lang="en">
                  <p>Creating a linked library with IIFEs</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig14_HTML.png" />
              </fig>
              <p id="Par141">The module design pattern aids developers in writing more organized source code, where individual classes can be independent, allowing for extensible and sustainable libraries. By creating a linked library based on IIFEs, controlled access can be provided through a single variable placed in the global namespace. This is the best practice for avoiding global namespace pollution. While development is facilitated by this pattern, care must be taken when considering the dependencies linked into each module and their order in source.</p>
              <p id="Par142">Since modules are discrete segments of code, many developers separate modules into individual files that can be organized, reused and included in applications only when needed. The separation of modules into files results in the ability to build JavaScript files into custom libraries. To aid in the packaging of large JavaScript libraries, many tools exist to work with JavaScript module files, including Browserify [<xref ref-type="bibr" rid="CR74">74</xref>] and webpack [<xref ref-type="bibr" rid="CR75">75</xref>]. The module pattern is so influential that ECMAScript 6 added core module file support allowing functionality to be better organized with a defined <italic>export</italic> and <italic>import</italic> syntax, thereby standardizing how complex module-based libraries are declared.</p>
            </sec>
            <sec id="Sec28">
              <title>Strict mode</title>
              <p id="Par143">Strict mode was introduced in ECMAScript 5 and allows the interpreter to reduce its flexibility in handling JavaScript source, so interpretation can be more clearly performed and less error prone. Developers must abide by additional restrictions when writing JavaScript code in strict mode. As a result, optimizations can be employed by the interpreter that would not be successful when interpreting random JavaScript source. Strict mode is initiated for the global scope or a function scope by including the <italic>âuse strictâ;</italic> phrase at the top of the scope as shown in ListingÂ <xref rid="Fig15" ref-type="fig">15</xref>.</p>
              <fig id="Fig15">
                <label>Listing 15</label>
                <caption xml:lang="en">
                  <p>Using strict mode in a module</p>
                </caption>
                <graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_331_Fig15_HTML.png" />
              </fig>
              <p id="Par144">While strict mode is an important technique for writing better JavaScript applications, third party libraries should be integrated carefully in strict mode scopes as those libraries may not be compatible with strict mode.</p>
            </sec>
          </sec>
        </sec>
        <sec id="Sec29">
          <title>Performance results</title>
          <p id="Par145">TableÂ <xref rid="Tab1" ref-type="table">1</xref> compares runtimes for reading the PDB entry 3CC2 into a data structure in memory from a string. Total times consist of 10 consecutive runs, after a 10 run warm up period is ignored. Bond deduction was disabled for both languages. TableÂ <xref rid="Tab2" ref-type="table">2</xref> compares runtimes for perceiving the Euler facet ring set for C60 fullerene, while TableÂ <xref rid="Tab3" ref-type="table">3</xref> collects runtimes for perceiving the Euler facet ring set for the unit cell of the LTA zeolite ignoring periodicity. Total times consist of 1000 consecutive runs, after a 100 run warm up period is ignored. The graph reduction step of the algorithm was removed in both languages, as the Java algorithm created a copy of the data structure, while JavaScript did not, leading to a biased overhead. The ring search algorithm was allowed to run to completion without any cutoffs. All tests were performed on a 2017 iMac running macOS 10.13.6 with a 4.2 GHz Intel Core i7. JavaScript tests were performed in Google Chrome Version 68.0.3440.84, Apple Safari Version 11.1.2 (13605.3.8) and Mozilla Firefox 61.0.1. The ChemDoodle Java API v2.4.1 [<xref ref-type="bibr" rid="CR76">76</xref>] and the JavaScript ChemDoodle Web Components v8.0.0 were used, where the algorithms in both libraries were written by the same individual. Each test was run 5 times, with the fastest time recorded.<table-wrap id="Tab1"><label>Table 1</label><caption xml:lang="en"><p>Reading the PDB entry 3CC2 into a data structure in memory from a string</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" /><th align="left"><p>Runtime (ms)</p></th></tr></thead><tbody><tr><td align="left"><p>Java</p></td><td char="." align="char"><p>795</p></td></tr><tr><td align="left"><p>JavaScript (Google Chrome)</p></td><td char="." align="char"><p>1415</p></td></tr><tr><td align="left"><p>JavaScript (Mozilla Firefox)</p></td><td char="." align="char"><p>1214</p></td></tr><tr><td align="left"><p>JavaScript (Apple Safari)</p></td><td char="." align="char"><p>1394</p></td></tr></tbody></table></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption xml:lang="en"><p>Runtimes for perceiving the Euler facet ring set for C60 fullerene</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" /><th align="left"><p>Runtime (ms)</p></th></tr></thead><tbody><tr><td align="left"><p>Java</p></td><td char="." align="char"><p>1035</p></td></tr><tr><td align="left"><p>JavaScript (Google Chrome)</p></td><td char="." align="char"><p>1134</p></td></tr><tr><td align="left"><p>JavaScript (Mozilla Firefox)</p></td><td char="." align="char"><p>1379</p></td></tr><tr><td align="left"><p>JavaScript (Apple Safari)</p></td><td char="." align="char"><p>8833</p></td></tr></tbody></table></table-wrap><table-wrap id="Tab3"><label>Table 3</label><caption xml:lang="en"><p>Runtimes for perceiving the Euler facet ring set for the unit cell of the LTA zeolite ignoring periodicity</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" /><th align="left"><p>Runtime (ms)</p></th></tr></thead><tbody><tr><td align="left"><p>Java</p></td><td char="." align="char"><p>3484</p></td></tr><tr><td align="left"><p>JavaScript (Google Chrome)</p></td><td char="." align="char"><p>6689</p></td></tr><tr><td align="left"><p>JavaScript (Mozilla Firefox)</p></td><td char="." align="char"><p>11960</p></td></tr><tr><td align="left"><p>JavaScript (Apple Safari)</p></td><td char="." align="char"><p>53458</p></td></tr></tbody></table></table-wrap></p>
        </sec>
        <sec id="Sec30">
          <title>Summary</title>
          <p id="Par146">At over two decades old, JavaScript is far from the end of its life, rather it seems like it is just beginning. The advent of the Internet not only connected us, but became an essential component of any device, leading to advanced browser support and therefore JavaScript support on any platform existing today. While JavaScript exhibits many weaknesses, its strengths are paramount, allowing not just the creation of pedestrian web based solutions, but in specifically providing a means for communicating the complexity of chemistry. As an open and standardized language, JavaScript has continued to thrive and evolve, while remaining a reliable foundation for developers. Scientists continue to find better and more powerful ways to use web technologies in the pursuit of science and to make knowledge accessible around the world. We will undoubtedly see continued technological innovation, and JavaScript, as the internet browser programming language, will likely continue to be the tool of choice for web developers and essential for the propagation of scientific information.</p>
        </sec>
      </body>
      <back>
        <ack>
          <title>Authors' contributions</title>
          <sec>
            <p>KJT is the sole author. The author read and approved the final manuscript.</p>
          </sec>
          <sec id="FPar6">
            <title>Acknowledgements</title>
            <p id="Par153">The author wishes to thank Clinton McFeely, Dr. Noel OâBoyle, Professor Heinz D. Roth, Dr. Joseph W. Walsh and Dr. Wendy A. Warr, for reading the entire manuscript and making valuable suggestions. This work is dedicated to my loving parents, Gerard and Karen.</p>
          </sec>
          <sec id="FPar4">
            <title>Competing interests</title>
            <p id="Par151">The author declares he has no competing interests.</p>
          </sec>
          <sec id="FPar3">
            <title>Availability of data and materials</title>
            <p id="Par150">Not applicable.</p>
          </sec>
          <sec id="FPar2">
            <title>Consent for publication</title>
            <p id="Par149">Not applicable.</p>
          </sec>
          <sec id="FPar1">
            <title>Ethics approval and consent to participate</title>
            <p id="Par148">Not applicable.</p>
          </sec>
          <sec id="FPar5">
            <title>Funding</title>
            <p id="Par152">This review was not funded by any external funding agency.</p>
          </sec>
          <sec>
            <title>Publisherâs Note</title>
            <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
          </sec>
        </ack>
        <ref-list id="Bib1">
          <title>References</title>
          <ref-list>
            <ref id="CR1">
              <label>1.</label>
              <mixed-citation publication-type="other">Java.com: Java + You. <ext-link xlink:href="https://www.java.com/" ext-link-type="uri">https://www.java.com/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR2">
              <label>2.</label>
              <mixed-citation publication-type="other">Eich B (2005) Javascript at ten years. In: ICFP â05 Proceedings of the 10th ACM SIGPLAN international conference on functional programming, 26â28 Sept 2005, Tallinn, Estonia. Butterworth-Heinemann, Stoneham, pp 129</mixed-citation>
            </ref>
            <ref id="CR3">
              <label>3.</label>
              <mixed-citation publication-type="other">Adobe Flash Player. <ext-link xlink:href="https://www.adobe.com/products/flashplayer.html" ext-link-type="uri">https://www.adobe.com/products/flashplayer.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR4">
              <label>4.</label>
              <mixed-citation publication-type="other">JEP 289: Deprecate the Applet API. <ext-link xlink:href="http://openjdk.java.net/jeps/289" ext-link-type="uri">http://openjdk.java.net/jeps/289</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR5">
              <label>5.</label>
              <mixed-citation publication-type="other">Microsoft Silverlight. <ext-link xlink:href="https://www.microsoft.com/silverlight/" ext-link-type="uri">https://www.microsoft.com/silverlight/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR6">
              <label>6.</label>
              <mixed-citation publication-type="other">Microsoft Embraces ECMA Internet Scripting Standard; Delivers Industryâs First ECMA-Compliant Scripting Language, JScript 3.0, In Key Microsoft Products. <ext-link xlink:href="https://web.archive.org/web/20090112221530/http://www.microsoft.com/presspass/press/1997/Jun97/jecmapr.mspx" ext-link-type="uri">https://web.archive.org/web/20090112221530/http://www.microsoft.com/presspass/press/1997/Jun97/jecmapr.mspx</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR7">
              <label>7.</label>
              <mixed-citation publication-type="other">TypeScriptâJavaScript that Scales. <ext-link xlink:href="https://www.typescriptlang.org" ext-link-type="uri">https://www.typescriptlang.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR8">
              <label>8.</label>
              <mixed-citation publication-type="other">Dart Programming Language. <ext-link xlink:href="https://www.dartlang.org" ext-link-type="uri">https://www.dartlang.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR9">
              <label>9.</label>
              <mixed-citation publication-type="other">Welcome to Ecma International. <ext-link xlink:href="https://www.ecma-international.org" ext-link-type="uri">https://www.ecma-international.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR10">
              <label>10.</label>
              <mixed-citation publication-type="other">ECMAScript 2018 Language Specification. <ext-link xlink:href="https://www.ecma-international.org/ecma-262/9.0/index.html" ext-link-type="uri">https://www.ecma-international.org/ecma-262/9.0/index.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR11">
              <label>11.</label>
              <mixed-citation publication-type="other">HTML Canvas 2D Context. <ext-link xlink:href="https://www.w3.org/TR/2dcontext/" ext-link-type="uri">https://www.w3.org/TR/2dcontext/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR12">
              <label>12.</label>
              <mixed-citation publication-type="other">WebGL Specifications. <ext-link xlink:href="https://www.khronos.org/registry/webgl/specs/latest/" ext-link-type="uri">https://www.khronos.org/registry/webgl/specs/latest/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR13">
              <label>13.</label>
              <mixed-citation publication-type="other">Node.js. <ext-link xlink:href="https://nodejs.org/" ext-link-type="uri">https://nodejs.org/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR14">
              <label>14.</label>
              <mixed-citation publication-type="other">ActionScript Technology Center. <ext-link xlink:href="https://www.adobe.com/devnet/actionscript.html" ext-link-type="uri">https://www.adobe.com/devnet/actionscript.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR15">
              <label>15.</label>
              <mixed-citation publication-type="other">Rhino M |MDN. <ext-link xlink:href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino" ext-link-type="uri">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR16">
              <label>16.</label>
              <mixed-citation publication-type="other">Oracle Nashorn: a next-generation javascript engine for the JVM. <ext-link xlink:href="https://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html" ext-link-type="uri">https://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR17">
              <label>17.</label>
              <mixed-citation publication-type="other">Extensible Markup Language (XML) 1.0, 5th edn. <ext-link xlink:href="https://www.w3.org/TR/xml/" ext-link-type="uri">https://www.w3.org/TR/xml/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR18">
              <label>18.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Burger</surname>
                    <given-names>MC</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Chemdoodle web components: Html5 toolkit for chemical graphics, interfaces, and informatics</article-title>
                <source>J Cheminf</source>
                <year>2015</year>
                <volume>7</volume>
                <fpage>1</fpage>
                <lpage>7</lpage>
                <pub-id pub-id-type="doi">10.1186/s13321-015-0085-3</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR19">
              <label>19.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Jiang</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Jin</surname>
                    <given-names>X</given-names>
                  </name>
                  <name>
                    <surname>Dong</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Chen</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Kekule.js: an open source javascript chemoinformatics toolkit</article-title>
                <source>J Chem Inf Model</source>
                <year>2016</year>
                <volume>56</volume>
                <fpage>1132</fpage>
                <lpage>1138</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC28XovFSqu7Y%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/acs.jcim.6b00167</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR20">
              <label>20.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Rego</surname>
                    <given-names>N</given-names>
                  </name>
                  <name>
                    <surname>Koes</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">3Dmol.js: molecular visualization with WebGL</article-title>
                <source>Bioinformatics</source>
                <year>2015</year>
                <volume>31</volume>
                <fpage>1322</fpage>
                <lpage>1324</lpage>
                <pub-id pub-id-type="doi">10.1093/bioinformatics/btu829</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR21">
              <label>21.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Gorn</surname>
                    <given-names>S</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">FORTRAN vs. basic FORTRAN: a programming language for informational processing on automatic data processing systems</article-title>
                <source>Commun ACM</source>
                <year>1964</year>
                <volume>7</volume>
                <fpage>591</fpage>
                <lpage>624</lpage>
                <pub-id pub-id-type="doi">10.1145/364888.876694</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR22">
              <label>22.</label>
              <mixed-citation publication-type="other">Welcome to Python.org. <ext-link xlink:href="https://www.python.org" ext-link-type="uri">https://www.python.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR23">
              <label>23.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Kernighan</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Ritchie</surname>
                    <given-names>DM</given-names>
                  </name>
                </person-group>
                <source>The C programming language</source>
                <year>1988</year>
                <publisher-loc>Westford</publisher-loc>
                <publisher-name>Prentice Hall</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR24">
              <label>24.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Ertl</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Patiny</surname>
                    <given-names>L</given-names>
                  </name>
                  <name>
                    <surname>Sander</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Rufener</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Zasso</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Wikipedia chemical structure explorer: substructure and similarity searching of molecules from wikipedia</article-title>
                <source>J Cheminf</source>
                <year>2015</year>
                <volume>7</volume>
                <fpage>1</fpage>
                <lpage>7</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2MXotVyltbY%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/s13321-015-0061-y</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR25">
              <label>25.</label>
              <mixed-citation publication-type="other">Actelion/openchemlib: Open source Java-based chemistry library. <ext-link xlink:href="https://github.com/actelion/openchemlib" ext-link-type="uri">https://github.com/actelion/openchemlib</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR26">
              <label>26.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>OâBoyle</surname>
                    <given-names>NM</given-names>
                  </name>
                  <name>
                    <surname>Banck</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>James</surname>
                    <given-names>CA</given-names>
                  </name>
                  <name>
                    <surname>Morley</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Vandermeersch</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Hutchison</surname>
                    <given-names>GR</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Open Babel: an open chemical toolbox</article-title>
                <source>J Cheminf</source>
                <year>2011</year>
                <volume>3</volume>
                <fpage>1</fpage>
                <lpage>14</lpage>
                <pub-id pub-id-type="doi">10.1186/1758-2946-3-1</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR27">
              <label>27.</label>
              <mixed-citation publication-type="other">Molecular surface calculation and visualization with Javascript and WebGL. <ext-link xlink:href="https://webglmol.osdn.jp/surface.html" ext-link-type="uri">https://webglmol.osdn.jp/surface.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR28">
              <label>28.</label>
              <mixed-citation publication-type="other">PhoneGap. <ext-link xlink:href="https://phonegap.com" ext-link-type="uri">https://phonegap.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR29">
              <label>29.</label>
              <mixed-citation publication-type="other">Apache Cordova. <ext-link xlink:href="https://cordova.apache.org" ext-link-type="uri">https://cordova.apache.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR30">
              <label>30.</label>
              <mixed-citation publication-type="other">Progressive web apps: escaping tabs without losing our soul. <ext-link xlink:href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/" ext-link-type="uri">https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR31">
              <label>31.</label>
              <mixed-citation publication-type="other">The GNU General Public License V3.0. <ext-link xlink:href="https://www.gnu.org/licenses/gpl-3.0.en.html" ext-link-type="uri">https://www.gnu.org/licenses/gpl-3.0.en.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR32">
              <label>32.</label>
              <mixed-citation publication-type="other">Closure compiler. <ext-link xlink:href="https://developers.google.com/closure/compiler/" ext-link-type="uri">https://developers.google.com/closure/compiler/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR33">
              <label>33.</label>
              <mixed-citation publication-type="other">YUI Library. <ext-link xlink:href="https://yuilibrary.com" ext-link-type="uri">https://yuilibrary.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR34">
              <label>34.</label>
              <mixed-citation publication-type="other">UglifyJSâJavaScript parser, compressor, minifier written in JS. <ext-link xlink:href="http://lisperator.net/uglifyjs/" ext-link-type="uri">http://lisperator.net/uglifyjs/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR35">
              <label>35.</label>
              <mixed-citation publication-type="other">EU GDPR information portal. <ext-link xlink:href="https://www.eugdpr.org" ext-link-type="uri">https://www.eugdpr.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR36">
              <label>36.</label>
              <mixed-citation publication-type="other">CFRâcode of federal regulations title 21. <ext-link xlink:href="https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfcfr/CFRSearch.cfm?fr=11.1" ext-link-type="uri">https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfcfr/CFRSearch.cfm?fr=11.1</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR37">
              <label>37.</label>
              <mixed-citation publication-type="other">RFC 2818âHTTP Over TLS. <ext-link xlink:href="https://tools.ietf.org/html/rfc2818" ext-link-type="uri">https://tools.ietf.org/html/rfc2818</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR38">
              <label>38.</label>
              <mixed-citation publication-type="other">About Native XMLHTTP (Internet Explorer). <ext-link xlink:href="https://msdn.microsoft.com/en-us/library/ms537505%28v=vs.85%29.aspx" ext-link-type="uri">https://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR39">
              <label>39.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Bradley</surname>
                    <given-names>AR</given-names>
                  </name>
                  <name>
                    <surname>Rose</surname>
                    <given-names>AS</given-names>
                  </name>
                  <name>
                    <surname>Pavelka</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Valasatava</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Duarte</surname>
                    <given-names>JM</given-names>
                  </name>
                  <name>
                    <surname>Prli</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Rose</surname>
                    <given-names>PW</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Mmtf an efficient file format for the transmission, visualization, and analysis of macromolecular structures</article-title>
                <source>PLOS Comput Biol</source>
                <year>2017</year>
                <volume>13</volume>
                <fpage>1</fpage>
                <lpage>16</lpage>
                <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005575</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR40">
              <label>40.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Kernighan</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Ritchie</surname>
                    <given-names>DM</given-names>
                  </name>
                </person-group>
                <source>Standard ECMA-404: the JSON data interchange syntax</source>
                <year>2017</year>
                <publisher-loc>Geneva</publisher-loc>
                <publisher-name>Ecma International</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR41">
              <label>41.</label>
              <mixed-citation publication-type="other">ChemDoodle JSON Format. <ext-link xlink:href="https://web.chemdoodle.com/docs/chemdoodle-json-format/" ext-link-type="uri">https://web.chemdoodle.com/docs/chemdoodle-json-format/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR42">
              <label>42.</label>
              <mixed-citation publication-type="other">Open Chemistry. <ext-link xlink:href="https://www.openchemistry.org" ext-link-type="uri">https://www.openchemistry.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR43">
              <label>43.</label>
              <mixed-citation publication-type="other">Development of the chemical JSON data representation. <ext-link xlink:href="https://github.com/OpenChemistry/chemicaljson" ext-link-type="uri">https://github.com/OpenChemistry/chemicaljson</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR44">
              <label>44.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Murray-Rust</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Rzepa</surname>
                    <given-names>HS</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Chemical markup, Xml and the Worldwide Web. 1. Basic principles</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1999</year>
                <volume>39</volume>
                <fpage>928</fpage>
                <lpage>942</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK1MXlvV2jt7c%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci990052b</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR45">
              <label>45.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Bienfait</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Ertl</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">JSME: a free molecule editor in Javascript</article-title>
                <source>J Cheminf</source>
                <year>2013</year>
                <volume>5</volume>
                <fpage>1</fpage>
                <lpage>6</lpage>
                <pub-id pub-id-type="doi">10.1186/1758-2946-5-24</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR46">
              <label>46.</label>
              <mixed-citation publication-type="other">GWT. <ext-link xlink:href="http://www.gwtproject.org/?csw=1" ext-link-type="uri">http://www.gwtproject.org/?csw=1</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR47">
              <label>47.</label>
              <mixed-citation publication-type="other">Emscripten: an LLVM-to-JavaScript compiler. <ext-link xlink:href="https://github.com/kripken/emscripten" ext-link-type="uri">https://github.com/kripken/emscripten</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR48">
              <label>48.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Hanson</surname>
                    <given-names>RM</given-names>
                  </name>
                  <name>
                    <surname>Prilusky</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Renjian</surname>
                    <given-names>Z</given-names>
                  </name>
                  <name>
                    <surname>Nakane</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Sussman</surname>
                    <given-names>JL</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Jsmol and the next generation web based representation of 3d molecular structure as applied to proteopedia</article-title>
                <source>Isr J Chem</source>
                <year>2013</year>
                <volume>53</volume>
                <fpage>207</fpage>
                <lpage>216</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3sXlvFWqsb0%3D</pub-id>
                <pub-id pub-id-type="doi">10.1002/ijch.201300024</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR49">
              <label>49.</label>
              <mixed-citation publication-type="other">SwingJS. <ext-link xlink:href="https://chemapps.stolaf.edu/swingjs/site/swingjs/examples/" ext-link-type="uri">https://chemapps.stolaf.edu/swingjs/site/swingjs/examples/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR50">
              <label>50.</label>
              <mixed-citation publication-type="other">The periodic table of the elements by WebElements. <ext-link xlink:href="http://www.webelements.com/" ext-link-type="uri">http://www.webelements.com/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR51">
              <label>51.</label>
              <mixed-citation publication-type="other">Dynamic periodic table. <ext-link xlink:href="https://ptable.com" ext-link-type="uri">https://ptable.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR52">
              <label>52.</label>
              <mixed-citation publication-type="other">3D rotating molecules on the iPhone/iPad. <ext-link xlink:href="http://jackadam.github.io/2010/3d-rotating-molecules-on-the-iphoneipad/" ext-link-type="uri">http://jackadam.github.io/2010/3d-rotating-molecules-on-the-iphoneipad/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR53">
              <label>53.</label>
              <mixed-citation publication-type="other">CanvasMol. <ext-link xlink:href="https://alteredqualia.com/canvasmol/" ext-link-type="uri">https://alteredqualia.com/canvasmol/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR54">
              <label>54.</label>
              <mixed-citation publication-type="other">TwirlyMol. <ext-link xlink:href="https://baoilleach.blogspot.com/2009/01/twistymol-is-dead-long-live-twirlymol.html" ext-link-type="uri">https://baoilleach.blogspot.com/2009/01/twistymol-is-dead-long-live-twirlymol.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR55">
              <label>55.</label>
              <mixed-citation publication-type="other">Jolecule: the protein viewer in the cloud. <ext-link xlink:href="https://jolecule.appspot.com" ext-link-type="uri">https://jolecule.appspot.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR56">
              <label>56.</label>
              <mixed-citation publication-type="other">CWC: protein ribbon models. <ext-link xlink:href="https://www.macinchem.org/reviews/protein-ribbon-models.php" ext-link-type="uri">https://www.macinchem.org/reviews/protein-ribbon-models.php</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR57">
              <label>57.</label>
              <mixed-citation publication-type="other">Benedetto MD, Ponchio F, Ganovelli F, Scopigno R (2010) Spidergl: a Javascript 3D graphics library for next-generation www. In: Web3D â10 Proceedings of the 15th international conference on Web 3D technology, 24â25 July 2010, Los Angeles, California, pp 165â174</mixed-citation>
            </ref>
            <ref id="CR58">
              <label>58.</label>
              <mixed-citation publication-type="other">GLmolâmolecular viewer on WebGL/Javascript. <ext-link xlink:href="http://webglmol.osdn.jp/index-en.html" ext-link-type="uri">http://webglmol.osdn.jp/index-en.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR59">
              <label>59.</label>
              <mixed-citation publication-type="other">Three.jsâJavascript 3D Library. <ext-link xlink:href="https://threejs.org" ext-link-type="uri">https://threejs.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR60">
              <label>60.</label>
              <mixed-citation publication-type="other">Scalable vector graphics (SVG) 2. <ext-link xlink:href="https://www.w3.org/TR/SVG/" ext-link-type="uri">https://www.w3.org/TR/SVG/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR61">
              <label>61.</label>
              <mixed-citation publication-type="other">jsMolEditor: JavaScript based molecule structure editor. <ext-link xlink:href="https://github.com/chemhack/jsmoleditor" ext-link-type="uri">https://github.com/chemhack/jsmoleditor</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR62">
              <label>62.</label>
              <mixed-citation publication-type="other">Sketcher Canvas | ChemDoodle Web Components. <ext-link xlink:href="https://web.chemdoodle.com/tutorial/2d-structure-canvases/sketcher-canvas/" ext-link-type="uri">https://web.chemdoodle.com/tutorial/2d-structure-canvases/sketcher-canvas/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR63">
              <label>63.</label>
              <mixed-citation publication-type="other">Ketcher. <ext-link xlink:href="http://lifescience.opensource.epam.com/ketcher/" ext-link-type="uri">http://lifescience.opensource.epam.com/ketcher/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR64">
              <label>64.</label>
              <mixed-citation publication-type="other">2010 ADA Standards for Accessible Design. <ext-link xlink:href="https://www.ada.gov/regs2010/2010ADAStandards/2010ADAstandards.htm" ext-link-type="uri">https://www.ada.gov/regs2010/2010ADAStandards/2010ADAstandards.htm</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR65">
              <label>65.</label>
              <mixed-citation publication-type="other">W3C Web content accessibility guidelines (WCAG) 2.0. <ext-link xlink:href="https://www.iso.org/standard/58625.html" ext-link-type="uri">https://www.iso.org/standard/58625.html</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR66">
              <label>66.</label>
              <mixed-citation publication-type="other">SciFinder-n | CAS. <ext-link xlink:href="https://www.cas.org/products/scifinder-n" ext-link-type="uri">https://www.cas.org/products/scifinder-n</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR67">
              <label>67.</label>
              <mixed-citation publication-type="other">Web storage, 2nd edn. <ext-link xlink:href="https://www.w3.org/TR/webstorage/" ext-link-type="uri">https://www.w3.org/TR/webstorage/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR68">
              <label>68.</label>
              <mixed-citation publication-type="other">Web Workers. <ext-link xlink:href="https://www.w3.org/TR/workers/" ext-link-type="uri">https://www.w3.org/TR/workers/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR69">
              <label>69.</label>
              <mixed-citation publication-type="other">Web Audio API. <ext-link xlink:href="https://www.w3.org/TR/webaudio/" ext-link-type="uri">https://www.w3.org/TR/webaudio/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR70">
              <label>70.</label>
              <mixed-citation publication-type="other">The WebSocket API. <ext-link xlink:href="https://www.w3.org/TR/websockets/" ext-link-type="uri">https://www.w3.org/TR/websockets/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR71">
              <label>71.</label>
              <mixed-citation publication-type="other">jQuery. <ext-link xlink:href="https://jquery.com" ext-link-type="uri">https://jquery.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR72">
              <label>72.</label>
              <mixed-citation publication-type="other">Enterprise web apps: design, develop, and testâSencha. <ext-link xlink:href="https://www.sencha.com" ext-link-type="uri">https://www.sencha.com</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR73">
              <label>73.</label>
              <mixed-citation publication-type="other">A JavaScript module pattern. <ext-link xlink:href="https://yuiblog.com/blog/2007/06/12/module-pattern/" ext-link-type="uri">https://yuiblog.com/blog/2007/06/12/module-pattern/</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR74">
              <label>74.</label>
              <mixed-citation publication-type="other">Browserify. <ext-link xlink:href="http://browserify.org" ext-link-type="uri">http://browserify.org</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR75">
              <label>75.</label>
              <mixed-citation publication-type="other">Webpack module bundler. <ext-link xlink:href="http://webpack.github.io" ext-link-type="uri">http://webpack.github.io</ext-link>. Accessed 29 Jan 2019</mixed-citation>
            </ref>
            <ref id="CR76">
              <label>76.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Todsen</surname>
                    <given-names>WL</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Chemdoodle 6.0.</article-title>
                <source>J Chem Inf Model</source>
                <year>2014</year>
                <volume>54</volume>
                <fpage>2391</fpage>
                <lpage>2393</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2cXht1alurvJ</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci500438j</pub-id>
              </mixed-citation>
            </ref>
          </ref-list>
        </ref-list>
        <glossary>
          <title>Abbreviations</title>
          <def-list>
            <def-item>
              <term>2D</term>
              <def>
                <p id="Par2">two dimensional</p>
              </def>
            </def-item>
            <def-item>
              <term>3D</term>
              <def>
                <p id="Par3">three dimensional</p>
              </def>
            </def-item>
            <def-item>
              <term>ADA</term>
              <def>
                <p id="Par4">Americans with Disabilities Act</p>
              </def>
            </def-item>
            <def-item>
              <term>AJAX</term>
              <def>
                <p id="Par5">Asynchronous JavaScript and XML</p>
              </def>
            </def-item>
            <def-item>
              <term>API</term>
              <def>
                <p id="Par6">Application Programming Interface</p>
              </def>
            </def-item>
            <def-item>
              <term>AR</term>
              <def>
                <p id="Par7">Augmented Reality</p>
              </def>
            </def-item>
            <def-item>
              <term>CAS</term>
              <def>
                <p id="Par8">Chemical Abstracts Service</p>
              </def>
            </def-item>
            <def-item>
              <term>CFR</term>
              <def>
                <p id="Par9">Code of Federal Regulations</p>
              </def>
            </def-item>
            <def-item>
              <term>CML</term>
              <def>
                <p id="Par10">Chemical Markup Langauge</p>
              </def>
            </def-item>
            <def-item>
              <term>CSS</term>
              <def>
                <p id="Par11">Cascading Style Sheets</p>
              </def>
            </def-item>
            <def-item>
              <term>DOM</term>
              <def>
                <p id="Par12">Document Object Model</p>
              </def>
            </def-item>
            <def-item>
              <term>ECMA</term>
              <def>
                <p id="Par13">European Computer Manufacturers Association</p>
              </def>
            </def-item>
            <def-item>
              <term>EDT</term>
              <def>
                <p id="Par14">Euclidean Distance Transform</p>
              </def>
            </def-item>
            <def-item>
              <term>eLearning</term>
              <def>
                <p id="Par15">Electronic Learning</p>
              </def>
            </def-item>
            <def-item>
              <term>ELN</term>
              <def>
                <p id="Par16">Electronic Laboratory Notebook</p>
              </def>
            </def-item>
            <def-item>
              <term>EU</term>
              <def>
                <p id="Par17">European Union</p>
              </def>
            </def-item>
            <def-item>
              <term>GDPR</term>
              <def>
                <p id="Par18">General Data Protection Regulation</p>
              </def>
            </def-item>
            <def-item>
              <term>GNU</term>
              <def>
                <p id="Par19">GNUâs Not Unix!</p>
              </def>
            </def-item>
            <def-item>
              <term>GWT</term>
              <def>
                <p id="Par20">Google Web Toolkit</p>
              </def>
            </def-item>
            <def-item>
              <term>GPL</term>
              <def>
                <p id="Par21">General Public License</p>
              </def>
            </def-item>
            <def-item>
              <term>GUI</term>
              <def>
                <p id="Par22">Graphical User Interface</p>
              </def>
            </def-item>
            <def-item>
              <term>IDE</term>
              <def>
                <p id="Par23">Integrated Development Environment</p>
              </def>
            </def-item>
            <def-item>
              <term>IE</term>
              <def>
                <p id="Par24">Internet Explorer</p>
              </def>
            </def-item>
            <def-item>
              <term>IIFE</term>
              <def>
                <p id="Par25">Immediately Invoked Function Expression</p>
              </def>
            </def-item>
            <def-item>
              <term>ISO</term>
              <def>
                <p id="Par26">International Organization for Standardization</p>
              </def>
            </def-item>
            <def-item>
              <term>JIT</term>
              <def>
                <p id="Par27">just-in-time</p>
              </def>
            </def-item>
            <def-item>
              <term>JS</term>
              <def>
                <p id="Par28">JavaScript</p>
              </def>
            </def-item>
            <def-item>
              <term>JSON</term>
              <def>
                <p id="Par29">JavaScript Object Notation</p>
              </def>
            </def-item>
            <def-item>
              <term>HTML</term>
              <def>
                <p id="Par30">Hypertext Markup Language</p>
              </def>
            </def-item>
            <def-item>
              <term>HTML5</term>
              <def>
                <p id="Par31">Version 5 of HTML</p>
              </def>
            </def-item>
            <def-item>
              <term>HTTPS</term>
              <def>
                <p id="Par32">Hypertext Transfer Protocol encrypted using Transport Layer Security</p>
              </def>
            </def-item>
            <def-item>
              <term>MMTF</term>
              <def>
                <p id="Par33">Macromolecular Transmission Format</p>
              </def>
            </def-item>
            <def-item>
              <term>MS</term>
              <def>
                <p id="Par34">Microsoft</p>
              </def>
            </def-item>
            <def-item>
              <term>OOP</term>
              <def>
                <p id="Par35">Object Oriented Programming</p>
              </def>
            </def-item>
            <def-item>
              <term>OpenGL</term>
              <def>
                <p id="Par36">Open Graphics Library</p>
              </def>
            </def-item>
            <def-item>
              <term>OpenGL ES</term>
              <def>
                <p id="Par37">OpenGL for Embedded Systems</p>
              </def>
            </def-item>
            <def-item>
              <term>OS</term>
              <def>
                <p id="Par38">Operating System</p>
              </def>
            </def-item>
            <def-item>
              <term>PDB</term>
              <def>
                <p id="Par39">Protein Data Bank</p>
              </def>
            </def-item>
            <def-item>
              <term>PWA</term>
              <def>
                <p id="Par40">Progressive Web Application</p>
              </def>
            </def-item>
            <def-item>
              <term>RCSB</term>
              <def>
                <p id="Par41">Research Collaboratory for Structural Bioinformatics</p>
              </def>
            </def-item>
            <def-item>
              <term>SSL</term>
              <def>
                <p id="Par42">Secure Sockets Layer</p>
              </def>
            </def-item>
            <def-item>
              <term>SVG</term>
              <def>
                <p id="Par43">Scalable Vector Graphics</p>
              </def>
            </def-item>
            <def-item>
              <term>WCAG</term>
              <def>
                <p id="Par44">Web Content Accessibility Guidelines</p>
              </def>
            </def-item>
            <def-item>
              <term>WebGL</term>
              <def>
                <p id="Par45">Web Graphics Library</p>
              </def>
            </def-item>
            <def-item>
              <term>XHR</term>
              <def>
                <p id="Par46">XMLHTTPRequest</p>
              </def>
            </def-item>
            <def-item>
              <term>XML</term>
              <def>
                <p id="Par47">Extensible Markup Language</p>
              </def>
            </def-item>
            <def-item>
              <term>YUI</term>
              <def>
                <p id="Par48">Yahoo! User Interface</p>
              </def>
            </def-item>
          </def-list>
        </glossary>
      </back>
    </article>
