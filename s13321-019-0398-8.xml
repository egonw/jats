<?xml version="1.0"?>
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="research-article" xml:lang="en">
      <?properties open_access?>
      <front>
        <journal-meta>
          <journal-id journal-id-type="publisher-id">13321</journal-id>
          <journal-title-group>
            <journal-title>Journal of Cheminformatics</journal-title>
            <abbrev-journal-title abbrev-type="publisher">J Cheminform</abbrev-journal-title>
          </journal-title-group>
          <issn pub-type="epub">1758-2946</issn>
          <publisher>
            <publisher-name>Springer International Publishing</publisher-name>
            <publisher-loc>Cham</publisher-loc>
          </publisher>
        </journal-meta>
        <article-meta>
          <article-id pub-id-type="publisher-id">s13321-019-0398-8</article-id>
          <article-id pub-id-type="manuscript">398</article-id>
          <article-id pub-id-type="doi">10.1186/s13321-019-0398-8</article-id>
          <article-categories>
            <subj-group subj-group-type="heading">
              <subject>Methodology</subject>
            </subj-group>
          </article-categories>
          <title-group>
            <article-title xml:lang="en">The chemfp project</article-title>
          </title-group>
          <contrib-group>
            <contrib contrib-type="author" corresp="yes" id="Au1">
              <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-8933-8830</contrib-id>
              <name>
                <surname>Dalke</surname>
                <given-names>Andrew</given-names>
              </name>
              <address>
                <email>HIDDEN</email>
              </address>
              <xref ref-type="aff" rid="Aff1">1</xref>
              <xref ref-type="corresp" rid="IDs1332101903988_cor1">a</xref>
            </contrib>
            <aff id="Aff1">
              <label>1</label>
              <institution-wrap>
                <institution content-type="org-name">Andrew Dalke Scientific AB</institution>
              </institution-wrap>
              <addr-line content-type="city">Trollhättan</addr-line>
              <country country="SE">Sweden</country>
            </aff>
          </contrib-group>
          <author-notes>
            <corresp id="IDs1332101903988_cor1">
              <label>a</label>
              <email>HIDDEN</email>
            </corresp>
          </author-notes>
          <pub-date date-type="pub" publication-format="electronic">
            <day>5</day>
            <month>12</month>
            <year>2019</year>
          </pub-date>
          <pub-date date-type="collection" publication-format="electronic">
            <month>12</month>
            <year>2019</year>
          </pub-date>
          <volume>11</volume>
          <issue seq="76">1</issue>
          <elocation-id>76</elocation-id>
          <history>
            <date date-type="registration">
              <day>25</day>
              <month>11</month>
              <year>2019</year>
            </date>
            <date date-type="received">
              <day>10</day>
              <month>6</month>
              <year>2019</year>
            </date>
            <date date-type="accepted">
              <day>25</day>
              <month>11</month>
              <year>2019</year>
            </date>
            <date date-type="online">
              <day>5</day>
              <month>12</month>
              <year>2019</year>
            </date>
          </history>
          <pub-history>
            <event event-type="Correction">
              <event-desc>An amendment to this paper has been published and can be accessed via the original article.</event-desc>
              <date>
                <day>28</day>
                <month>9</month>
                <year>2020</year>
              </date>
            </event>
          </pub-history>
          <permissions>
            <copyright-statement content-type="compact">© The Author(s) 2019</copyright-statement>
            <copyright-year>2019</copyright-year>
            <copyright-holder>The Author(s)</copyright-holder>
            <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/">
              <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (http://creativecommons.org/publicdomain/zero/1.0/) applies to the data made available in this article, unless otherwise stated.</license-p>
            </license>
          </permissions>
          <related-article related-article-type="correction" ext-link-type="doi" xlink:href="10.1186/s13321-020-00459-y" />
          <abstract xml:lang="en" id="Abs1">
            <title>Abstract</title>
            <p id="Par1">The chemfp project has had four main goals: (1) promote the FPS format as a text-based exchange format for dense binary cheminformatics fingerprints, (2) develop a high-performance implementation of the BitBound algorithm that could be used as an effective baseline to benchmark new similarity search implementations, (3) experiment with funding a pure open source software project through commercial sales, and (4) publish the results and lessons learned as a guide for future implementors. The FPS format has had only minor success, though it did influence development of the FPB binary format, which is faster to load but more complex. Both are summarized. The chemfp benchmark and the no-cost/open source version of chemfp are proposed as a reference baseline to evaluate the effectiveness of other similarity search tools. They are used to evaluate the faster commercial version of chemfp, which can test 130 million 1024-bit fingerprint Tanimotos per second on a single core of a standard x86-64 server machine. When combined with the BitBound algorithm, a k = 1000 nearest-neighbor search of the 1.8 million 2048-bit Morgan fingerprints of ChEMBL 24 averages 27 ms/query. The same search of 970 million PubChem fingerprints averages 220 ms/query, making chemfp one of the fastest CPU-based similarity search implementations. Modern CPUs are fast enough that memory bandwidth and latency are now important factors. Single-threaded search uses most of the available memory bandwidth. Sorting the fingerprints by popcount improves memory coherency, which when combined with 4 OpenMP threads makes it possible to construct an N × N similarity matrix for 1 million fingerprints in about 30 min. These observations may affect the interpretation of previous publications which assumed that search was strongly CPU bound. The chemfp project funding came from selling a purely open-source software product. Several product business models were tried, but none proved sustainable. Some of the experiences are discussed, in order to contribute to the ongoing conversation on the role of open source software in cheminformatics.<fig id="Figa" position="anchor"><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_398_Figa_HTML.png" position="anchor" /></fig></p>
          </abstract>
          <kwd-group xml:lang="en">
            <title>Keywords</title>
            <kwd>Molecular fingerprints</kwd>
            <kwd>Similarity searching</kwd>
            <kwd>Tanimoto</kwd>
            <kwd>High-performance</kwd>
            <kwd>Format</kwd>
            <kwd>Open source</kwd>
            <kwd>FOSS</kwd>
            <kwd>Performance benchmark</kwd>
          </kwd-group>
          <custom-meta-group>
            <custom-meta>
              <meta-name>publisher-imprint-name</meta-name>
              <meta-value>Springer</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-issue-count</meta-name>
              <meta-value>1</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-article-count</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-pricelist-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-holder</meta-name>
              <meta-value>The Author(s)</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-copyright-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-contains-esm</meta-name>
              <meta-value>Yes</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-year</meta-name>
              <meta-value>2019</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-month</meta-name>
              <meta-value>11</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-registration-date-day</meta-name>
              <meta-value>25</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>toc-levels</meta-name>
              <meta-value>0</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>volume-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-product</meta-name>
              <meta-value>ArchiveJournal</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>numbering-style</meta-name>
              <meta-value>Unnumbered</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-grants-type</meta-name>
              <meta-value>OpenChoice</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>metadata-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>abstract-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodypdf-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bodyhtml-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>bibliography-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>esm-grant</meta-name>
              <meta-value>OpenAccess</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>online-first</meta-name>
              <meta-value>false</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>pdf-file-reference</meta-name>
              <meta-value>BodyRef/PDF/13321_2019_Article_398.pdf</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>target-type</meta-name>
              <meta-value>OnlinePDF</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>issue-type</meta-name>
              <meta-value>Regular</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>article-type</meta-name>
              <meta-value>OriginalPaper</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-primary</meta-name>
              <meta-value>Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computer Applications in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Documentation and Information in Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Theoretical and Computational Chemistry</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-secondary</meta-name>
              <meta-value>Computational Biology/Bioinformatics</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>journal-subject-collection</meta-name>
              <meta-value>Chemistry and Materials Science</meta-value>
            </custom-meta>
            <custom-meta>
              <meta-name>open-access</meta-name>
              <meta-value>true</meta-value>
            </custom-meta>
          </custom-meta-group>
        </article-meta>
        <notes notes-type="CrossLinking">
          <sec>
            <p>A correction to this article is available online at <ext-link xlink:href="10.1186/s13321-020-00459-y" ext-link-type="doi">https://doi.org/10.1186/s13321-020-00459-y</ext-link>.</p>
          </sec>
        </notes>
      </front>
      <body>
        <sec id="Sec1">
          <title>Introduction</title>
          <p id="Par3">Molecular similarity search is a fundamental concept in cheminformatics. The most common form is almost certainly a Tanimoto similarity search of bitstring fingerprints. Complete search systems are available from many vendors, or a good programmer can implement a basic system with reasonable search performance in only a few hours. High-performance search systems, which combine fast popcount evaluation and pruning algorithms, require significantly more development effort. This paper starts with a review of those approaches, many of which are either described in the cheminformatics literature in an incrementalist fashion which make them difficult to discover, or only published in the specialist literature of other fields.</p>
          <p id="Par4">The chemfp project started in order to develop a de facto file format for chemical fingerprints. This requires some consideration of why such a format did not already exist, in order to understand which factors to focus on during format development. Two formats were developed; the text-based FPS exchange format, which is simple to read and write, easily compressed, and appropriate for streaming workflows, and the binary FPB application format which is more complex and requires random-access reads, but has significantly shorter load times.</p>
          <p id="Par5">The chemfp package for Python includes optimized threshold and <italic>k</italic>-nearest implementations FPS file scan search implementations, highly-optimized implementations of the BitBound pruning method to search data sets either loaded into memory or memory-mapped from an FPB file, and OpenMP parallelized BitBound methods for N × M and N × M similarity matrix generation. The file formats and search performance are evaluated using datasets from ChEMBL and PubChem, with fingerprints generated by the Open Babel, RDKit, OpenEye, and CACTVS toolkits. While these datasets were not designed for direct scientific utility, it is hoped that they, along with a set of common search tasks, may be a common benchmark for similarity search performance. Preliminary results suggest that two of the datasets may be too sparse to provide useful comparisons between dense and sparse search algorithms.</p>
          <p id="Par6">One of the key results is that modern CPUs are extremely fast. The popcount intersection calculation, which was the limiting factor on older hardware, now requires only a few nanoseconds. This is significantly faster than the memory latency time for reading from main memory, which means that memory access issues like cache coherency have become an important limiting factor. For example, sorting the queries by popcount increases multiquery search scalability, likely because the search threads have better temporal locality. Most previous work on improved pruning methods did not consider these factors. The machine models used in older publications are discussed, along with the reasons for why their conclusions may need to be re-assessed.</p>
          <p id="Par7">Floating-point precision appears to be a subtle though common source of errors in similarity search systems, even for software written by expert developers. Examples are given as advice to future implementors, along with recommendations for how to avoid floating point calculations.</p>
          <p id="Par8">Free and open source software (“FOSS”) is popular, in part because it is typically available at no cost as the funding often comes either from volunteer contributions or indirect research funding. This paper discusses the growing understanding that this sort of funding model often has long-term sustainability problems. The chemfp project experimented with several approaches for funding the project by selling commercial software under a FOSS license. These approaches are discussed, as well as the conflicts between the economic requirements of FOSS software development and the expectations of customers used to proprietary software licensing. Chemfp is now available with cheaper proprietary licensing options as the pure FOSS funding model does not appear viable. Other funding models which may be more viable for future projects are discussed.</p>
        </sec>
        <sec id="Sec2">
          <title>Background</title>
          <p id="Par9">A fingerprint for chemical similarity is a description of a molecule such that the similarity between two descriptions give some idea of the similarity between two molecules. Willett [<xref ref-type="bibr" rid="CR1">1</xref>], influenced by earlier work [<xref ref-type="bibr" rid="CR2">2</xref>] showed how the Tanimoto similarity between two bitstring fingerprints is a useful mechanism to characterize molecular similarity. The Tanimoto similarity is identical to the older Jaccard similarity. The continued use of the term reflects the impact of that early work at Sheffield. The term “fingerprint” first appeared in the literature in 1992 [<xref ref-type="bibr" rid="CR3">3</xref>] to distinguish the then-new enumeration-based Daylight fingerprints from the older substructure dictionary approach.</p>
          <p id="Par10">The late 1980s and 1990s brought an incredible growth of research as people explored ways to generate, compare, and cluster fingerprints, to extend the concept to sparse and count fingerprints, and to extend fingerprints beyond 2D substructures [<xref ref-type="bibr" rid="CR4">4</xref>].</p>
          <p id="Par11">The most widely used fingerprints are variants of the 166-bit MACCS keys [<xref ref-type="bibr" rid="CR5">5</xref>], Daylight linear fingerprints [<xref ref-type="bibr" rid="CR6">6</xref>], ECFP circular fingerprints [<xref ref-type="bibr" rid="CR7">7</xref>], and the 881-bit PubChem/CACTVS keys [<xref ref-type="bibr" rid="CR8">8</xref>]. These are fixed-length binary fingerprints, typically with 166, 881, 1024, or 2048 bits, and with a sufficiently high bit density that they are most efficiently represented as an uncompressed bitstring instead of sparse encoding methods like an inverted index. Implementations of these fingerprints are available from a large number of tools [<xref ref-type="bibr" rid="CR9">9</xref>].</p>
          <p id="Par12">While there are a many ways to compare two fingerprints, the vast majority use the Tanimoto similarity:<disp-formula id="Equ1"><label>1</label><alternatives><mml:math display="block" id="Equ1_Math"><mml:mrow><mml:mi>T</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:mrow><mml:mfenced close="|" open="|" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mo>∩</mml:mo><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced><mml:mrow><mml:mo stretchy="true">/</mml:mo></mml:mrow><mml:mfenced close="|" open="|" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mo>∪</mml:mo><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:mrow></mml:math><tex-math id="Equ1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Tanimoto\left( {fp1,fp2} \right) = {{\left| {fp1 \cap fp2} \right|} \mathord{\left/ {\vphantom {{\left| {fp1 \cap fp2} \right|} {\left| {fp1 \cup fp2} \right|}}} \right. \kern-0pt} {\left| {fp1 \cup fp2} \right|}}$$\end{document}</tex-math><graphic position="anchor" xlink:href="13321_2019_398_Article_Equ1.gif" /></alternatives></disp-formula>often simply referred to as “the Tanimoto”.</p>
          <p id="Par13">For binary fingerprints represented as bit strings the Tanimoto calculation can be expressed as:<disp-formula id="Equ2"><label>2</label><alternatives><mml:math display="block" id="Equ2_Math"><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>p</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mspace width="0.277778em" /><mml:mo>&amp;</mml:mo><mml:mspace width="0.277778em" /><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced><mml:mrow><mml:mo stretchy="true">/</mml:mo></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>p</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mo stretchy="false">|</mml:mo><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:mrow></mml:mrow></mml:math><tex-math id="Equ2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$popcount{{\left( {fp1\;\&amp; \;fp2} \right)} \mathord{\left/ {\vphantom {{\left( {fp1\;\&amp; \;fp2} \right)} {popcount\left( {fp1|fp2} \right)}}} \right. \kern-0pt} {popcount\left( {fp1|fp2} \right)}}$$\end{document}</tex-math><graphic position="anchor" xlink:href="13321_2019_398_Article_Equ2.gif" /></alternatives></disp-formula>where “&amp;” and “|” denote bitwise binary-and and -or and “<italic>popcount()</italic>” is the number of 1 bits in the resulting subexpressions, often called the “population count”. In chemfp, two fingerprints with 0 bits set have a Tanimoto of 0, while some other toolkits have different behaviors.</p>
          <p id="Par14">Similarity search performance can be critical. Humans typically regard response times of under 0.1 s as “instantaneous”, and start to lose focus if a search takes more a few seconds [<xref ref-type="bibr" rid="CR10">10</xref>]. Fast search times are important not only for user-directed similarity queries, but also for secondary queries. For example, a web interface for a compound database might display a page for each compound record along with links to its 10 most similar neighbors in the database. This information can be pre-computed, which typically requires some infrastructure to compute and update the neighbor lists when the database has changed enough. On the other hand, if the search finishes within the response time budget then it can be done on-demand, which may simplify the system design.</p>
          <p id="Par15">Many algorithms are built on top of similarity search, and often the overall algorithm performance depends on the similarity search performance. For example, most of the time for the Taylor–Butina clustering algorithm [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR12">12</xref>] is spent computing a sparse similarity matrix. The matrix computation is quadratic in the number of fingerprints, so a fourfold performance improvement makes it possible to work with a data set which is twice as large in the same amount of time. Performance improvements may also allow more efficient system architectures; a tenfold improvement may be fast enough that a task which required a compute cluster can now be run on a single machine, with additional savings from reducing the overhead for task partitioning and network communication.</p>
          <p id="Par16">Approximate methods for search [<xref ref-type="bibr" rid="CR13">13</xref>] and clustering [<xref ref-type="bibr" rid="CR14">14</xref>] with controllable error levels and better theoretical scalability for large data sets are feasible alternatives when the minimum required similarity is high enough. This paper focuses on exact methods for binary fingerprints.</p>
        </sec>
        <sec id="Sec3">
          <title>Faster Tanimoto calculations</title>
          <p id="Par17">Many people have developed techniques to improve Tanimoto similarity search performance for dense fingerprints. While many of these techniques are well-known, they have not been described in one place in the literature, and some previous papers describe inefficient implementations.</p>
          <p id="Par18">One approach is to use faster hardware and multiple cores or processors [<xref ref-type="bibr" rid="CR15">15</xref>], or use specialized hardware like GPUs [<xref ref-type="bibr" rid="CR16">16</xref>]. This paper focuses on x86-64 CPUs, though many of the techniques are portable to other architectures.</p>
          <p id="Par19">If there will be multiple queries against a set of target fingerprints then one often-used approach precomputes the popcount of each target fingerprint. If the query popcount is <italic>A</italic> and the target popcount is <italic>B</italic> then Eq. (<xref rid="Equ2" ref-type="disp-formula">2</xref>) can re-written with only the intersection popcount:<disp-formula id="Equ3"><label>3</label><alternatives><mml:math display="block" id="Equ3_Math"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>p</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mspace width="0.277778em" /><mml:mo>&amp;</mml:mo><mml:mspace width="0.277778em" /><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:math><tex-math id="Equ3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c = popcount\left( {fp1\;\&amp; \;fp2} \right)$$\end{document}</tex-math><graphic position="anchor" xlink:href="13321_2019_398_Article_Equ3.gif" /></alternatives></disp-formula><disp-formula id="Equa"><alternatives><mml:math display="block" id="Equa_Math"><mml:mrow><mml:mi>T</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>i</mml:mi><mml:mi>m</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mi>c</mml:mi><mml:mrow><mml:mo stretchy="true">/</mml:mo></mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>A</mml:mi><mml:mo>+</mml:mo><mml:mi>B</mml:mi><mml:mo>-</mml:mo><mml:mi>c</mml:mi></mml:mrow></mml:mfenced></mml:mrow><mml:mspace width="0.166667em" /></mml:mrow></mml:math><tex-math id="Equa_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Tanimoto = {c \mathord{\left/ {\vphantom {c {\left( {A + B - c} \right)}}} \right. \kern-0pt} {\left( {A + B - c} \right)}} \,$$\end{document}</tex-math><graphic position="anchor" xlink:href="13321_2019_398_Article_Equa.gif" /></alternatives></disp-formula>which requires only one popcount evaluation per comparison instead of two.</p>
          <p id="Par20">Another approach is to improve the Tanimoto calculation performance through more efficient use of the hardware. Many search implementations interpret Eq. <xref rid="Equ1" ref-type="disp-formula">1</xref> literally, and represent fingerprints using a set data type and compute the Tanimoto using set operations. This approach often uses a large number of temporary set instances. By comparison, an implementation which represents a fingerprint as a byte string or sequence of machine words uses less memory, has less memory management overhead, and can implement Eq. <xref rid="Equ2" ref-type="disp-formula">2</xref> with a handful of fast bit and arithmetic operations.</p>
          <p id="Par21">Many popcount algorithms have been developed over the last 70 years [<xref ref-type="bibr" rid="CR17">17</xref>]. Table <xref rid="Tab1" ref-type="table">1</xref> compares the relative performance of several implementations. Full details are in Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Table S1.<table-wrap id="Tab1"><label>Table 1</label><caption xml:lang="en"><p>Relative performance of different popcount implementations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2"><p>Popcount method</p></th><th align="left" colspan="4"><p>Performance relative to 8-bit lookup table</p></th></tr><tr><th align="left"><p>166 bits</p></th><th align="left"><p>881 bits</p></th><th align="left"><p>1024 bits</p></th><th align="left"><p>2048 bits</p></th></tr></thead><tbody><tr><td align="left"><p>8-bit lookup table</p></td><td align="left"><p>1×</p></td><td align="left"><p>1×</p></td><td align="left"><p>1×</p></td><td align="left"><p>1×</p></td></tr><tr><td align="left"><p>16-bit lookup table</p></td><td align="left"><p>2.0</p></td><td align="left"><p>2.8</p></td><td align="left"><p>2.9</p></td><td align="left"><p>2.4</p></td></tr><tr><td align="left"><p>Gillies-Miller [<xref ref-type="bibr" rid="CR18">18</xref>]</p></td><td align="left"><p>1.6</p></td><td align="left"><p>2.9</p></td><td align="left"><p>3.1</p></td><td align="left"><p>3.4</p></td></tr><tr><td align="left"><p>Lauradoux [<xref ref-type="bibr" rid="CR19">19</xref>]</p></td><td align="left" /><td align="left"><p>3.1</p></td><td align="left"><p>3.3</p></td><td align="left"><p>3.7</p></td></tr><tr><td align="left"><p>SSSE3 [<xref ref-type="bibr" rid="CR15">15</xref>]</p></td><td align="left" /><td align="left" /><td align="left"><p>5.4</p></td><td align="left"><p>6.1</p></td></tr><tr><td align="left" colspan="5"><p>POPCNT (8 bytes/loop)</p></td></tr><tr><td align="left"><p> Dispatch</p></td><td align="left"><p>3.6</p></td><td align="left"><p>6.0</p></td><td align="left"><p>6.3</p></td><td align="left"><p>6.4</p></td></tr><tr><td align="left"><p> Inline</p></td><td align="left"><p>4.9</p></td><td align="left"><p>6.6</p></td><td align="left"><p>6.9</p></td><td align="left"><p>6.6</p></td></tr><tr><td align="left" colspan="5"><p>POPCNT (fully unrolled)</p></td></tr><tr><td align="left"><p> Dispatch</p></td><td align="left"><p>5.3</p></td><td align="left"><p>7.9</p></td><td align="left"><p>8.2</p></td><td align="left"><p>7.8</p></td></tr><tr><td align="left"><p> Inline</p></td><td align="left"><p>6.7</p></td><td align="left"><p>8.2</p></td><td align="left"><p>8.4</p></td><td align="left"><p>8.0</p></td></tr><tr><td align="left" colspan="5"><p>AVX2 [<xref ref-type="bibr" rid="CR20">20</xref>] (fully unrolled)</p></td></tr><tr><td align="left"><p> Dispatch</p></td><td align="left" /><td align="left" /><td align="left"><p>8.6</p></td><td align="left"><p>9.2</p></td></tr><tr><td align="left"><p> Dispatch, prefetch</p></td><td align="left" /><td align="left" /><td align="left"><p>8.7</p></td><td align="left"><p>9.3</p></td></tr><tr><td align="left"><p> Inline</p></td><td align="left" /><td align="left" /><td align="left"><p>9.8</p></td><td align="left"><p>9.9</p></td></tr><tr><td align="left"><p> Inline, prefetch</p></td><td align="left" /><td align="left" /><td align="left"><p>11.0</p></td><td align="left"><p>10.6</p></td></tr></tbody></table><table-wrap-foot><p>Times are scaled relative to an 8-bit lookup table, as measured by the threshold searches from the chemfp benchmark suite. In most cases the search algorithm uses a function pointer to dispatch to the appropriate popcount function, without memory prefetching. The “fully unrolled” variants implement the fingerprint popcount without using a loop. The “inline” and “prefetch” variants inline the calculation and use memory prefetching, respectively. Timings were made with chemfp 3.3. Chemfp 1.5 does not support inlining, AVX2, or prefetching</p></table-wrap-foot></table-wrap></p>
          <p id="Par22">Chemfp 1.0 used a lookup table, which may be effective if table lookup is fast, but modern hardware has special methods which are faster than accessing table data even from L2 cache. Fingerprints are typically many machine words in length, so fingerprint popcounts can be computed either by summing the popcount of each word or extending a tree-of-adders approach to work on multiple words [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR19">19</xref>].</p>
          <p id="Par23">While these algorithms can be implemented in standard, portable C code, faster implementations use processor-specific hardware instructions. Effectively all modern x84-64 hardware supports the POPCNT instruction, which can compute the popcount of a 64-bit word in one machine cycle. Other CPU-specific techniques were available for older consumer hardware [<xref ref-type="bibr" rid="CR15">15</xref>]. Perhaps surprisingly, popcount implementations with AVX2 instructions outperform POPCNT-based implementations for 1024 and 2048 bit fingerprints, because the AVX2 implementation of the Harley-Seal algorithm can fetch and use 256 bits at a time while making more effective use of instruction parallelism [<xref ref-type="bibr" rid="CR20">20</xref>]. (The POPCNT instruction on most x84-64 chips is limited to a single execution port). The VPOPCNTDQ instruction in the AVX-512 instruction set computes a 512-bit popcount, which should be faster still.</p>
          <p id="Par24">The fingerprint intersection popcount calculation is often decomposed into the sum of multiple word intersections. One optimization is to observe that many of the query words in relatively sparse fingerprints only contain 0 s. Its intersection popcount will always be 0 so does not need to be evaluated. A query-specific optimizer may also be able to merge multiple word evaluations into a single popcount, and replace some word popcounts with simple boolean expressions [<xref ref-type="bibr" rid="CR21">21</xref>].</p>
          <p id="Par25">Other factors become important once the popcount performance is fast enough. Equation <xref rid="Equ3" ref-type="disp-formula">3</xref> requires an addition, subtraction, and division. If all targets with the same popcount are grouped together then the <italic>A</italic> + <italic>B</italic> term is constant while processing that group, removing the need for an addition.</p>
          <p id="Par26">Division is a relatively expensive operation, and might be replaced with a small lookup table [<xref ref-type="bibr" rid="CR21">21</xref>] if table lookup is fast enough, or rewritten to use rationals and integer operations. For example, the threshold test <italic>c</italic>/(<italic>A</italic> + <italic>B</italic> − <italic>c</italic>) ≥ 0.75 may be rewritten as <italic>c</italic> <italic>*</italic> 4 ≥ 3 <italic>*</italic> (<italic>A</italic> + <italic>B</italic> − <italic>c</italic>). A further refinement for grouped fingerprints is to replace the division test with comparison to the minimum required popcount threshold shown in Eq. <xref rid="Equ4" ref-type="disp-formula">4</xref>:<disp-formula id="Equ4"><label>4</label><alternatives><mml:math display="block" id="Equ4_Math"><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>p</mml:mi><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>1</mml:mn><mml:mspace width="0.277778em" /><mml:mo>&amp;</mml:mo><mml:mspace width="0.277778em" /><mml:mi>f</mml:mi><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:mrow></mml:mfenced><mml:mo>≥</mml:mo><mml:mfenced close="⌉" open="⌈" separators=""><mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>A</mml:mi><mml:mo>+</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mo stretchy="true">/</mml:mo></mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mi>T</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:mfenced></mml:mrow></mml:math><tex-math id="Equ4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$popcount\left( {fp1\;\&amp; \;fp2} \right) \ge \left\lceil {{{T\left( {A + B} \right)} \mathord{\left/ {\vphantom {{T\left( {A + B} \right)} {\left( {1 + T} \right)}}} \right. \kern-0pt} {\left( {1 + T} \right)}}} \right\rceil$$\end{document}</tex-math><graphic position="anchor" xlink:href="13321_2019_398_Article_Equ4.gif" /></alternatives></disp-formula></p>
          <p id="Par27">This can be calculated once for each group, which reduces the threshold test to a simple integer comparison.</p>
          <p id="Par28">On some processors, particularly older ones, misaligned data may be significantly slower or cause the program to crash, so should be memory-aligned using zero padding.</p>
          <p id="Par29">Certain fingerprint lengths are particularly common, and specialized intersection popcount functions can be written for each one with a fallback to a general purpose implementation. A fully unrolled intersection popcount for the 166-bit MACCS, assuming zero padded 64-bit words and POPCNT instruction, requires at most 12 assembly instructions and is about 40% faster than a generic loop summing the popcount of the 3 words.</p>
          <p id="Par30">The entire search algorithm can also be specialized for the most important fingerprints sizes. A threshold search for 166-bit fingerprints which inlines the intersection popcount instead of calling a function pointer is about 25% faster because it has no function call overhead and because the compiler has more ability to optimize the code. A fully-inline AVX2 search algorithm may also initialize some of the AVX2 registers once, rather than once for each intersection popcount.</p>
          <p id="Par31">The “roofline model” [<xref ref-type="bibr" rid="CR22">22</xref>] highlights how memory latency and bandwidth become limiting factors once the popcount performance is fast enough. The absolute minimum time for a full linear search of 1 million uncompressed 1024 bit fingerprints on a machine with 20 GiB/s memory bandwidth is only 6 ms. This would require about 2.7 billion 64-bit POPCNT instructions per second, plus the operations to evaluate the Tanimoto, which is not quite achievable on a 3 GHz processor without a high degree of instruction parallelism. In practice, memory latency limitations occur before reaching bandwidth limitation, so faster AVX2 and VPOPCNTDQ implementations must use prefetching to reduce this overhead.</p>
          <p id="Par32">Finally, a <italic>k</italic>-nearest search may use a heap algorithm with <italic>O</italic>(<italic>n log k</italic>) performance. Tanimoto scores are ratios of two small numbers, bounded by the number of bits in the fingerprint, resulting in relatively few distinct values. For large values of <italic>k</italic> a counting sort [<xref ref-type="bibr" rid="CR21">21</xref>] may be used to eliminate the <italic>O</italic>(<italic>log k</italic>) overhead.</p>
          <p id="Par33">While each optimization may only add a small performance improvements, the overall effect is multiplicative.</p>
        </sec>
        <sec id="Sec4">
          <title>Pruning methods</title>
          <p id="Par34">The fastest calculations are those which don’t need to be done. Duplicate fingerprints may be merged into a single record, which can give an appreciable speedup, especially for <italic>O</italic>(<italic>n</italic><sup>2</sup>) tasks like building a similarity matrix.</p>
          <p id="Par35">Many search tools use BitBound [<xref ref-type="bibr" rid="CR23">23</xref>] to reject obvious mismatches. If the goal is to find all target fingerprints which are at least <italic>t</italic> > <italic>0</italic> similar to a query fingerprint with a popcount of <italic>A</italic>, then the target fingerprint must have a popcount <italic>B</italic> between <italic>B</italic> <italic>*</italic> <italic>t</italic> and <italic>B</italic>/<italic>t</italic>. A value of <italic>B</italic> may be stored for each fingerprint, or the fingerprints may be organized into bins such that all fingerprints with the same popcount are in the same bin. The latter requires less memory storage and fewer memory accesses. The bounds give linear speedup in threshold searches, with tighter bounds as the similarity increases, and sub-linear speedup for <italic>k</italic>-nearest neighbors. Empirical testing using the chemfp benchmark data sets confirms that k = 1 nearest neighbor searches of MACCS and FP2 fingerprints scales as O(n<sup>~0.65</sup>) and the PubChem/CACTVS and Morgan searches scale as <italic>O</italic>(<italic>n</italic><sup>~0.8</sup>) in the number of fingerprints in the data set (see Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Figure S1).</p>
          <p id="Par36">Additional pruning methods include sharper M = 2 bounds [<xref ref-type="bibr" rid="CR24">24</xref>], xor signatures [<xref ref-type="bibr" rid="CR25">25</xref>], recursive application of the bounds to fingerprint subsets [<xref ref-type="bibr" rid="CR26">26</xref>–<xref ref-type="bibr" rid="CR28">28</xref>], trees [<xref ref-type="bibr" rid="CR27">27</xref>, <xref ref-type="bibr" rid="CR29">29</xref>, <xref ref-type="bibr" rid="CR30">30</xref>] and reference points [<xref ref-type="bibr" rid="CR31">31</xref>, <xref ref-type="bibr" rid="CR32">32</xref>]. These papers often demonstrate a mathematical reduction in the number of popcount operations needed, and empirically measure performance improvements over BitBound.</p>
          <p id="Par37">The best improvements occur for high similarities (typically 0.8 or above), while the overall reported performance is sometimes worse than BitBound for similarity thresholds which are both chemically reasonable and commonly used. It seems impossible to improve upon linear search for an exact similarity search of high dimensional space when using a low similarity threshold.</p>
        </sec>
        <sec id="Sec5">
          <title>Need for a fingerprint format</title>
          <p id="Par38">The chemfp project started in part to promote the FPS format as the common format for exchanging fingerprint data. Many software packages are available and in wide distribution for working with fingerprint data [<xref ref-type="bibr" rid="CR9">9</xref>]. These in turn represent a small fraction of the fingerprint software in use, which includes personal research software and in-house tools. Yet very few tools from different origins are able to work together without some format conversion.</p>
          <p id="Par39">This should be unexpected as the beneficial network effect of an interoperable format generally causes a field to converge on one or a small number of formats in far less than the 30 years of active research on fingerprints. Nearly every tool which works with small molecules supports the SDF or SMILES file format, just like nearly every sequence analysis tools supports the FASTA format.</p>
          <p id="Par40">The success of those three formats was in no small part based on the success of respectively the MACCS II [<xref ref-type="bibr" rid="CR33">33</xref>], Daylight [<xref ref-type="bibr" rid="CR34">34</xref>], and FASTA [<xref ref-type="bibr" rid="CR35">35</xref>] software, so it was clear that providing a fast similarity search tool, along with fingerprint generation tools, would help promote the FPS format. It was also clear that fast similarity search tools already existed, without resulting in a common format.</p>
          <p id="Par41">This lead to the question “Why not?”, with the hope that by identifying the factors which weaken the network effect might help improve the chances that a new format would be successful. Foremost, of course, is that most people do not need a fingerprint file format because they work with fingerprints through a database, typically via a chemically-aware database extension.</p>
          <p id="Par42">In general there are two types of fingerprint file formats: text and binary. Researchers tend to create text formats because they are easy to read and write, and to inspect visually. These formats are so simple that it is often faster for the researcher to create a new format and its I/O routines than to find if an appropriate format exists and understand someone else’s software library. It’s also typically easy—a matter of minutes—to write a converter from one format to another.</p>
          <p id="Par43">People with more advanced experience in software development tend to store fingerprints in a binary format, since binary formats are generally faster to read and write than text formats. These are also the sorts of people who write software libraries for both in-house and more general use. These binary formats are typically considered an implementation detail and subject to change as needs change. Instead, file access is mediated through command-line programs, or a library API with I/O and search routines.</p>
          <p id="Par44">What happens if a researcher wants to evaluate a new clustering algorithm implemented in R, when the fingerprint package library API is only available in C++? While R has good support for C++ bindings, it’s more likely people will write a C++ program to export the fingerprints in a new format and an R function to read that format.</p>
          <p id="Par45">Another aspect of fingerprint software is that there isn’t that much need for interoperability because essentially all of the widely-used packages as well as most in-house packages support the most common needs: fingerprint generation using variants of the MACCS, Daylight, or ECFP fingerprint types, Tanimoto similarity search for <italic>k</italic>-nearest neighbors and for finding all neighbors at or above a given threshold, and the <italic>N</italic> × <italic>M</italic> and <italic>N</italic> × <italic>N</italic> (symmetric) variants used for clustering and diversity selection algorithms. Most people exchange structures and treat fingerprints as derived data, to be computed when needed.</p>
          <p id="Par46">What about when there is a need? Consider a project to evaluate the relative effectiveness of circular fingerprints from different vendors. Which tool should be used for the evaluation? A surprising number of available packages and associated formats are not designed for interoperability, and cannot easily be used for this task. As two examples, the package may generate fingerprints automatically given a structure file or molecule object, but lack a way to accept an externally generated fingerprint value, or the file format may store fingerprint type parameters but not have an easy mechanism to handle foreign fingerprint types.</p>
          <p id="Par47">These considerations resulted in the working hypothesis that any format could not become a de facto exchange format unless (1) it was a text format that was as easy to read and write as the ones that researchers are used to, (2) it could demonstrate support for diverse fingerprint types, and (3) it came with a set of tools and library API which could handle most of what people needed from a fingerprint toolkit.</p>
        </sec>
        <sec id="Sec6" sec-type="methods">
          <title>Methods</title>
          <sec id="Sec7">
            <title>Hardware</title>
            <p id="Par48">All timings in this paper were made on a machine with a 3700 MHz i7-4770 CPU. Each core has 32 KiB each of L1d and L1i cache and 256 KiB of L2 cache. The four physical cores share 8 MiB of shared L3 cache and 32 GiB of RAM (DDR3-1600 with double channel). The single channel theoretical peak transfer rate is 12,800 MiB/s or 12.5 GiB/s. Measurements with pmbw 0.6 [<xref ref-type="bibr" rid="CR36">36</xref>] using a single thread show a 54 GiB/s read bandwidth from L1, 35 GiB/s, from L2, 30 GiB/s from L3, and 13.3 GiB/s from RAM. The measured latencies are 1.1 ns from L1, 2.7 ns from L2, 9.6 ns from L3, and 87 ns from RAM. Chemfp was compiled with gcc 5.5.0.</p>
          </sec>
          <sec id="Sec8">
            <title>Data sets</title>
            <p id="Par49">The fingerprint data sets used in this paper are the 2048-bit RDKit Morgan fingerprints distributed as part of ChEMBL 24 [<xref ref-type="bibr" rid="CR37">37</xref>], the 881-bit PubChem [<xref ref-type="bibr" rid="CR38">38</xref>] fingerprints extracted from the PUBCHEM_CACTVS_SUBSKEYS tag of a PubChem mirror from 2018-12-07, and the four data sets in the chemfp benchmark. The latter contain four ~ 1 million fingerprint subsets. Three were generated from ChEMBL 23 using respectively the 166-bit OpenEye MACCS implementation, the 1021-bit Open Babel FP2 implementation, and the 2048-bit RDKit Morgan fingerprint with radius 2. The fourth contains the 881-bit PubChem fingerprints extracted from a mirror made on 2017-07-12. Table <xref rid="Tab2" ref-type="table">2</xref> summarizes the content of the search target data sets.<table-wrap id="Tab2"><label>Table 2</label><caption xml:lang="en"><p>Fingerprint target data set sizes in FPS format</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Data set</p></th><th align="left"><p>#Bits</p></th><th align="left"><p>Fingerprint type</p></th><th align="left"><p>#Fingerprints (in millions)</p></th><th align="left"><p>Unique</p></th><th align="left"><p>FPS size (in MiB)</p></th><th align="left"><p>FPS.gz size (in MiB)</p></th></tr></thead><tbody><tr><td align="left"><p>chemfp benchmark</p><p>ChEMBL 23 subset</p></td><td char="." align="char"><p>166</p></td><td align="left"><p>OpenEye MACCS</p></td><td char="." align="char"><p>1.00</p></td><td char="." align="char"><p>83.6%</p></td><td char="." align="char"><p>54</p></td><td align="left"><p>17.7</p></td></tr><tr><td align="left"><p>chemfp benchmark</p><p>PubChem subset</p></td><td char="." align="char"><p>881</p></td><td align="left"><p>PubChem/CACTVS</p></td><td char="." align="char"><p>1.00</p></td><td char="." align="char"><p>98.2</p></td><td char="." align="char"><p>222</p></td><td align="left"><p>53.1</p></td></tr><tr><td align="left"><p>chemfp benchmark</p><p>ChEMBL 23 subset</p></td><td char="." align="char"><p>1021</p></td><td align="left"><p>Open Babel FP2</p></td><td char="." align="char"><p>1.00</p></td><td char="." align="char"><p>96.0</p></td><td char="." align="char"><p>258</p></td><td align="left"><p>80.5</p></td></tr><tr><td align="left"><p>chemfp benchmark</p><p>ChEMBL 23 subset</p></td><td char="." align="char"><p>2048</p></td><td align="left"><p>RDKit Morgan</p></td><td char="." align="char"><p>1.00</p></td><td char="." align="char"><p>90.6</p></td><td char="." align="char"><p>502</p></td><td align="left"><p>59.9</p></td></tr><tr><td align="left"><p>ChEMBL 24</p></td><td char="." align="char"><p>2048</p></td><td align="left"><p>RDKit Morgan</p></td><td char="." align="char"><p>1.82</p></td><td char="." align="char"><p>94.1</p></td><td char="." align="char"><p>914</p></td><td align="left"><p>99.7</p></td></tr><tr><td align="left"><p>PubChem</p></td><td char="." align="char"><p>881</p></td><td align="left"><p>PubChem/CACTVS</p></td><td char="." align="char"><p>96.9</p></td><td char="." align="char"><p>65.3</p></td><td char="." align="char"><p>21,500</p></td><td align="left"><p>2910</p></td></tr></tbody></table><table-wrap-foot><p>“Unique” is the number of distinct fingerprints as a percentage of the total number of fingerprints</p></table-wrap-foot></table-wrap></p>
            <p id="Par50">These fingerprint types were chosen because they are relatively popular and well-understood, and to give representation from each of the underlying toolkits that chemfp supports. They were not selected for any specific scientific appropriateness, and should only be used for timing purposes.</p>
          </sec>
          <sec id="Sec9">
            <title>FPS format</title>
            <p id="Par51">Figure <xref rid="Fig1" ref-type="fig">1</xref> shows an example of the FPS format. It is a line-oriented text format containing an optional header section followed by zero or more fingerprint records. The header contains an optional version line, followed by zero or more metadata lines. Each header line starts with a ‘#’. Each fingerprint record contains two or more tab-separated fields. The first is the hex-encoded fingerprint and the second is the record id. The remaining fields are unspecified and may be used to store a SMILES string, activity, or other values, though the chemfp toolkit does not yet support these fields.<fig id="Fig1"><label>Fig. 1</label><caption xml:lang="en"><p>Example FPS file for 166-bit MACCS keys generated by OpenEye’s GraphSim toolkit. Header lines start with a ‘#’. The three record lines start with a hex-encoded fingerprint, followed by a tab and the record id</p></caption><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_398_Fig1_HTML.png" /></fig></p>
            <p id="Par52">The most important metadata line, though optional, is “<italic>type</italic>”. It describes how the fingerprints were generated. While it can be an arbitrary text string, it should follow the format of the examples shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>, with one or more terms separated by a single space. The first term contains the family name and optional version. Any remaining terms are <italic>key</italic> = <italic>value</italic> pairs describing the specific fingerprint generation parameters. By convention the family name uses a prefix to indicate the tool used to generate the fingerprints, which helps distinguish between, for example, the MACCS implementations from different vendors.<fig id="Fig2"><label>Fig. 2</label><caption xml:lang="en"><p>Seven fingerprint type strings from different toolkits. Each type string contains space separated terms. The first term contains the fingerprint family name and version. Remaining terms encode fingerprint parameters as key = value pairs. The OpenEye-Path and RDKit-Morgan types are wrapped over two lines for presentation</p></caption><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_398_Fig2_HTML.png" /></fig></p>
            <p id="Par53">As a concrete example, the second line of Fig. <xref rid="Fig2" ref-type="fig">2</xref> is a type string for OpenEye’s “Path” fingerprints, version 2. It can be generated by calling OEMakePathFP() with the arguments <italic>numbits</italic> = 4096, <italic>minbonds</italic> = 0, etc. The <italic>atype</italic> and <italic>btype</italic> values describe which atom and bond properties are encoded in the fingerprint. The specific syntax is derived from the strings returned from <italic>OEGetFPAtomType()</italic> and <italic>OEGetFPBondType()</italic>.</p>
            <p id="Par54">The type has several purposes. First, it records how the fingerprints were generated. It is all too easy to create a data set then come back to it a few months later and forget how it was generated. Second, it should be machine parseable so that software can generate new fingerprints of the same type. This might be used in a search tool to figure out how to convert a new query structure into a compatible query fingerprint. Third, it should be in canonical form, such that the type strings match if and only if they describe the same fingerprint generation options. This makes it possible for even simple tools to detect if two data sets may have incompatible types.</p>
            <p id="Par55">The optional “<italic>software</italic>”, “<italic>source</italic>”, and “<italic>date</italic>” lines are primarily for data provenance. The software line records version information for the key fingerprint generation components. Each source line stores a filename or other description of the input to the fingerprint generation. The date line stores an ISO datetime stamp of when the fingerprints were generated.</p>
            <p id="Par56">The optional “<italic>num_bits</italic>” metadata line records the fingerprint length. If not present then the fingerprint length is calculated from the number of bytes in the fingerprints. Fingerprint types which are not a multiple of 8 bits long, like the 166-bit MACCS keys and the 881-bit PubChem/CACTVS fingerprints, must pad the highest bits with zeros, and should record the actual size in the <italic>num_bits</italic> field. The value may be used to compute length-dependent similarity coefficients, or to determine which bits are appropriate for machine learning.</p>
            <p id="Par57">The hex-encoded fingerprint is always a multiple of 2 characters in length. All fingerprints must have the same length, and 0-length fingerprints are not allowed. The bytes are ordered so bit 0 is the first bit of the first byte, that is, the bytes are in little-endian order. Examples of hex-encoded 16-bit fingerprints are: “0100” (bit 0 is set), “2000” (bit 5 is set), and “c218” (bits 1, 6, 7, 11, and 12 are set). Note that the two hex characters for each byte are in big-endian order so the hex representation nibbles are in the order “1032”.</p>
            <p id="Par58">Hex encoding was chosen because the primary goal was to make a format which was easy for most researchers to read and write with a few minutes of work. Hex encoding is easier to understand and implement than more compact encodings like Base64 and ASCII85, and most widely used programming languages have built-in support for converting between a byte string and its hex representation. In any case, gzip compression recovers most of the space overhead. Table <xref rid="Tab2" ref-type="table">2</xref> shows the compressed and uncompressed sizes of the data sets used in this paper.</p>
            <p id="Par59">The tab character is used as the delimiter because IUPAC names and even some corporate ids may contain a space, comma, or other printable character.</p>
            <p id="Par60">The format may be extended by adding new metadata lines so long as they can be ignored without affecting how to interpret an FPS file. For example, a “comment” line might store some extra information about how the fingerprints were generated, and a “stats-24” line might store statistics for bit 24. A future version of the specification will likely include a way to provide header names for the additional fields of a fingerprint record.</p>
          </sec>
          <sec id="Sec10">
            <title>FPB format</title>
            <p id="Par61">The time to parse an FPS file is quite large compared to the in-memory search time. Sometimes the load time adds too much overhead. Consider a web developer following the standard edit/reload cycle to create an application which uses several multi-million fingerprint data sets. Each reload, which is normally a fraction of a second, may take around 10 s as the fingerprints are reloaded. The load time can be deferred until first use, but that will still add noticeable time to the iterative development process.</p>
            <p id="Par62">Chemfp 2.0 added support for the FPB format, which is a more complex binary representation of a fingerprint arena that is quicker to load while still supporting the optimizations for fast similarity search. The structure is a variant of the “FourCC” file format. The file starts with an 8 byte signature followed by a series of chunks. Each chunk contains an 8 byte length field, followed by a four byte chunk type name, followed by type-specific data.</p>
            <p id="Par63">There are six defined chunk types. The META chunk contains the metadata lines from the header of the FPS format, including the leading ‘#’ and newlines. Processing ends with the FEND chunk.</p>
            <p id="Par64">The AREN, POPC, FPID, and HASH chunks contain the four distinct parts of a fingerprint arena, which will be described in a later section. The AREN chunk stores the fingerprints as a contiguous block, along with information about the fingerprint length and storage size. It also contains an initial spacer to allow the first fingerprint to be word or cache-line aligned if the file is memory-mapped. The POPC chunk stores the popcount indices into the AREN chunk for sorted arenas.</p>
            <p id="Par65">The FPID chunk stores the record identifiers as a sequence of UTF-8 encoded strings, along with an offset table to look up an identifier given its index. The HASH chunk contains a modified form of the cdb hash table [<xref ref-type="bibr" rid="CR39">39</xref>], where the values are indices into the FPID chunk. Table <xref rid="Tab3" ref-type="table">3</xref> shows the total size and size of the largest chunks for the data files in this paper.<table-wrap id="Tab3"><label>Table 3</label><caption xml:lang="en"><p>Fingerprint data set sizes in FPB format and largest chunk sizes</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Data set</p></th><th align="left"><p>#Bits</p></th><th align="left"><p>#Fingerprints (in millions)</p></th><th align="left"><p>FPB size (in MiB)</p></th><th align="left"><p>AREN size (in MiB)</p></th><th align="left"><p>FPID size (in MiB)</p></th><th align="left"><p>HASH size (in MiB)</p></th></tr></thead><tbody><tr><td align="left"><p>chemfp benchmark</p></td><td char="." align="char"><p>166</p></td><td char="." align="char"><p>1.00</p></td><td align="left"><p>54.0</p></td><td align="left"><p>22.9</p></td><td align="left"><p>15.9</p></td><td align="left"><p>15.3</p></td></tr><tr><td align="left"><p>chemfp benchmark</p></td><td char="." align="char"><p>881</p></td><td char="." align="char"><p>1.00</p></td><td align="left"><p>134</p></td><td align="left"><p>107</p></td><td align="left"><p>11.6</p></td><td align="left"><p>15.3</p></td></tr><tr><td align="left"><p>chemfp benchmark</p></td><td char="." align="char"><p>1021</p></td><td char="." align="char"><p>1.00</p></td><td align="left"><p>153</p></td><td align="left"><p>122</p></td><td align="left"><p>15.9</p></td><td align="left"><p>15.3</p></td></tr><tr><td align="left"><p>chemfp benchmark</p></td><td char="." align="char"><p>2048</p></td><td char="." align="char"><p>1.00</p></td><td align="left"><p>275</p></td><td align="left"><p>244</p></td><td align="left"><p>15.9</p></td><td align="left"><p>15.3</p></td></tr><tr><td align="left"><p>ChEMBL 24</p></td><td char="." align="char"><p>2048</p></td><td char="." align="char"><p>1.82</p></td><td align="left"><p>501</p></td><td align="left"><p>444</p></td><td align="left"><p>29.9</p></td><td align="left"><p>27.8</p></td></tr><tr><td align="left"><p>PubChem</p></td><td char="." align="char"><p>881</p></td><td char="." align="char"><p>96.9</p></td><td align="left"><p>13,000</p></td><td align="left"><p>10,300</p></td><td align="left"><p>1130</p></td><td align="left"><p>1480</p></td></tr></tbody></table><table-wrap-foot><p>The AREN chunk contains the fingerprints, the FPID chunk contains record identifiers indexed by position, and the HASH chunk contains a hash table mapping identifiers to index</p></table-wrap-foot></table-wrap></p>
            <p id="Par66">The load time is significantly shorter because the loader only needs to read enough data to identify which chunks exist and extract basic information like the metadata and fingerprint sizes.</p>
            <p id="Par67">The combination of popcount indexed arenas, BitBound, and memory-mapping work well together. For example, a command-line tool which finds all matches with at least 0.9 similarity to a given fingerprint can limit file access to only the most relevant fingerprints, and since the linear access pattern is easy to predict, the file system can prefetch the data. Tests show that most of the overall time for these sorts of simple tools is spent waiting for Python to start, even for multi-million fingerprint data sets.</p>
            <p id="Par68">Memory-mapped files can also be useful when multiple components use the same FPB file because the different components may share one copy of the static, read-only memory.</p>
            <p id="Par69">The biggest negative to using the FPB format directly, instead of a fully in-memory representation, is the relative slowness of working with identifiers. It may take several essentially random-access disk reads to get the id for a given index, which is particularly slow on hard disks. Hash table lookups may require several index lookups and so be even slower. In addition, the FPB hash table is not as optimized as the Python hash table, and each identifier lookup creates a new Python string object instead of reusing a previously loaded one. This negative is usually only noticeable when a large number of identifiers are returned.</p>
            <p id="Par70">The FPB format is designed for fingerprint data sets with a few million records, which is typical for most corporate compound collections. It has been tested with the ~ 100 million fingerprints in PubChem, though design consequences of the 32-bit hash table sets an upper limit of slightly more than 250 million fingerprints. The usual way to create an FPB file is to load a fingerprint data set into memory then save the result in FPB format. This does not work for very large data sets; the loader needs more than 30 GiB of RAM for the intermediate data structures to load PubChem. Instead, chemfp’s FPB writer supports an option to write partial information to the filesystem, typically as smaller FPB files, which are collated to create the final file. The ~ 10 GiB PubChem FPB file can be created on a machine with only a few GiB of memory, and with reasonable performance.</p>
            <p id="Par71">The FPB format allows extensions. New chunks may be added so long as they don’t break compatibility. For example, the sharper M = 2 bounds might be supported by adding a secondary sort to the AREN fingerprints based on the popcount of the odd bits for all fingerprints with the same popcount, and storing the M = 2 indices for the secondary sort in a new chunk.</p>
            <p id="Par72">While the FPS format supports additional fields for each column, there is currently no way to store that information in an FPB file.</p>
          </sec>
          <sec id="Sec11">
            <title>chemfp package</title>
            <p id="Par73">Essentially no one will use a fingerprint format simply because a specification exists. The chemfp Python package attempts to overcome the chicken-and-egg problem by distributing a Python library and a set of command-line tools for working with FPS files.</p>
            <p id="Par74">The command-line tools oe2fps, rdkit2fps and ob2fps use respectively OpenEye’s OEChem and GraphSim toolkits [<xref ref-type="bibr" rid="CR40">40</xref>], the RDKit toolkit [<xref ref-type="bibr" rid="CR41">41</xref>], and the Open Babel toolkit [<xref ref-type="bibr" rid="CR42">42</xref>], to parse structure files or records and generate fingerprints. Chemfp also adds a mostly complete PubChem-like fingerprint generation implementation for each toolkit.</p>
            <p id="Par75">The sdf2fps tool extracts record identifiers and pre-computed fingerprints from tags in an SD file. For example, the “--pubchem” option extracts the id from the title line and the fingerprint from the PUBCHEM_CACTVS_SUBSKEYS tag of a PubChem file. Other supported encodings include hex, Base64, sequences of ‘0’ and ‘1’ characters in different bit orders, and the fingerprint encoding used in Daylight Thor Data Trees (TDTs).</p>
            <p id="Par76">The simsearch tool implements <italic>k</italic>-nearest and threshold searches of an FPS file, using either Tanimoto or Tversky [<xref ref-type="bibr" rid="CR43">43</xref>] similarity. It supports single query and multiple query searches, as well as the <italic>N</italic> × <italic>N</italic> symmetric case.</p>
            <p id="Par77">The fpcat tool can be used to merge multiple FPS and FPB files together. For example, if the sdf2fps tool is used to extract fingerprints from each file in a PubChem distribution, then fpcat can join them together into a single file.</p>
            <p id="Par78">Version 2.0 of the package added Tversky similarity search and support for the FPB binary file format, as well as support for more than 2 GiB of fingerprint data. Each of the above tools supports reading and writing from FPS, gzip-compressed FPS, and FPB files. Fpcat can convert between all three formats.</p>
            <p id="Par79">The chemfp package also includes a well-documented toolkit API for working with fingerprints. All of the features of the command-line tools are available to user-defined programs, along with APIs to help with web services development and to integrate with NumPy and SciPy. The package is designed to work with static data, which is the usual case in research informatics.</p>
            <p id="Par80">The chemfp project also distributes the chemfp_converters package, which converts between the chemfp formats and the fingerprint formats used by several other packages.</p>
          </sec>
          <sec id="Sec12">
            <title>File scan search</title>
            <p id="Par81">Chemfp supports two similarity search modes: file scan and in-memory. The implementations for both modes expect that there will be few hits relative to the entire data set, so the <italic>O</italic>(<italic>n log k</italic>) performance of a priority queue is effectively <italic>O</italic>(<italic>n</italic>). File scans are only used to search an FPS file. While the FPB file is faster to load and search, the FPS format is a good fit for workflows which do not need the complexity of the FPB format. The FPS format can also be used in streaming contexts, such as piping the output of <italic>sdf2fps</italic> to <italic>simsearch</italic> for a one-off query of fingerprints encoded in the SD file data tags.</p>
            <p id="Par82">A file scan is the default search mode when there is one or a small number of queries. It reads a block of text, and for each line finds the location of the fingerprint and id fields. If the fingerprint passes the similarity test, the score and id are saved, either to a list for a threshold test, or a bounded priority queue for <italic>k</italic>-nearest search.</p>
            <p id="Par83">An important goal when chemfp parses an FPS file is to verify that the file is actually in FPS format, and provide a useful error message if it is not. The exception is that <italic>k</italic>-nearest file scan search terminates early once <italic>k</italic> exact matches are found, instead of verifying the rest of the file.</p>
            <p id="Par84">The secondary goal is to demonstrate that good performance is possible using a text file. A general purpose design might have a file parser which produces a sequence of record objects, and a search algorithm which accepts record objects. This design makes it easy to support multiple file formats by replacing the parser with a new one. However, the intermediate object creation adds unneeded overhead. The similarity can instead be computed directly from the input text. If the score is too low then there’s no need to create a fingerprint record at all, and if the score is high enough then only the identifier and score are needed, not the intermediate fingerprint object.</p>
            <p id="Par85">Chemfp has four different file scan implementations; one for each combination of {Tanimoto, Tversky} × {threshold, <italic>k</italic>-nearest} searches. This level of specialization is less flexible and has a higher development and maintenance cost. On the other hand, if the FPS format becomes the de facto standard fingerprint exchange format then there is less need for a design which can handle multiple formats.</p>
            <p id="Par86">The current file scan implementation processes about 500–600 MiB/s on the benchmark machine. It is not I/O limited as GNU wc 8.25 is able to count newlines in the same file at up to 7 GiB/s. (See Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Table S2).</p>
          </sec>
          <sec id="Sec13">
            <title>In-memory search</title>
            <p id="Par87">If there are more than a few tens of queries against an FPS file then it is faster for chemfp to create and search an in-memory data structure called a “fingerprint arena”, which contains four parts. The fingerprints are stored in a contiguous memory block and sorted by population count, such that all fingerprints with 0 bits set come first, followed by those with 1 bit set, and so on. The identifiers are stored in a list in the same order as the fingerprints, such that <italic>id[i]</italic> stores the id for <italic>fingerprint[i]</italic>. The population count index contains a list of fingerprint indices such that the fingerprints with a population count of <italic>b</italic> bits have an index <italic>i</italic> where <italic>popcount_index[b]</italic> ≤ <italic>i</italic> &lt; <italic>popcount_index[b</italic> + <italic>1]</italic>. If no fingerprints have <italic>b</italic> bits set then <italic>popcount_index[b]</italic> = <italic>popcount_index[b</italic> + <italic>1]</italic>. Finally, there is a multi-valued hash table mapping each fingerprint id to 1 or more fingerprint indices. Duplicate ids are allowed.</p>
            <p id="Par88">Each fingerprint is <italic>num_bytes</italic> bytes long and stored in <italic>storage_size</italic> bytes of memory. Zero padding may be added after the fingerprint bytes, typically so the storage size is a multiple of 8 bytes, which lets chemfp use the 64-bit POPCNT instruction. The first fingerprint is located <italic>start_padding</italic> bytes into the memory block, where the offset is chosen so the fingerprints are word or cache-line aligned. Chemfp determines the start padding based on the fingerprint size: 1024-bit fingerprints are 64-byte aligned for possibly better AVX2/AVX512 performance, while 166-bit fingerprints (which are zero padded to 24 bytes), are 8 byte aligned for possibly better POPCNT performance. The distribution of 1000 randomly sampled single query search timings for ChEMBL 24 and PubChem are shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. The primary reason for the search time variability is because the BitBound pruning effectiveness depends on the population count of the query fingerprint compared to the distribution of fingerprint population counts in the target dataset.<fig id="Fig3"><label>Fig. 3</label><caption xml:lang="en"><p>Single query search times for chemfp 3.3. Boxen plots for <italic>k</italic> = 2, 10, 100, and 1000 nearest-neighbor and threshold = 0.95, 0.80, 0.70, and 0.40 searches of ChEMBL 24 and PubChem (downloaded 2018-12-07). Each search samples 1000 fingerprints to use as queries so each query is always found in the result. Python’s garbage collector was disabled for each timing as it adds a roughly 25 ms delay about every 1000 timings. The <italic>T</italic> = 0.40 PubChem search could not be run due to insufficient memory</p></caption><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_398_Fig3_HTML.png" /></fig></p>
            <p id="Par89">The amount of memory needed for a fingerprint arena is a function of the fingerprint size, alignment, identifier size, and number of records. Only a small amount of additional memory is needed to use a memory-mapped FPB file so see the measured FPB file sizes in Table <xref rid="Tab3" ref-type="table">3</xref> for approximate memory requirements. Additional memory is required when constructing an arena from an FPS file.</p>
            <p id="Par90">The popcount index of a sorted arena is a compact way to store pre-computed popcounts for all of the target fingerprints, which means that only the intersection popcount is needed for each similarity calculation. The index is also used to apply the BitBound limits. A threshold search only needs to test fingerprints <italic>i</italic> where <italic>popcount_index[floor(b</italic> <italic>*</italic> <italic>t)]</italic> ≤ <italic>i</italic> &lt; <italic>popcount_index[ceil(B/t)</italic> + <italic>1]</italic>. The implementation uses a minor variation of the <italic>k</italic>-nearest algorithm described in [<xref ref-type="bibr" rid="CR23">23</xref>]. Instead of sorting an auxiliary array to determine the target popcounts to visit, it does a merge sort of the two monotonically decreasing sides, which can be done in constant memory.</p>
            <p id="Par91">Chemfp also supports unsorted arenas, which are most often used to aggregate multiple small fingerprint sets in a single file. Unsorted searches require a full linear search with both intersection and union popcount calculations.</p>
            <p id="Par92">Chemfp selects the optimal intersection popcount algorithm based on the processor instruction set, fingerprint storage size, and alignment. If the AVX2 instruction set is available, it will be used if the storage size is a multiple of 1024 bits. If the POPCNT instruction is available, it will be used if the storage size is a multiple of 64 bits. Other implementations are available for older hardware and other fingerprint sizes.</p>
            <p id="Par93">The fingerprint size is constant for the entire search, so chemfp implements fully unrolled versions of the AVX2 and POPCNT popcount implementations for fingerprints with a storage size of 24, 64, 112, 128, and 256 bytes. These are used for 166-bit MACCS keys, 512-bit fingerprints, 881-bit PubChem fingerprints, 1024-bit fingerprints, and 2048-bit fingerprints, respectively, when the bits are zero-padded to the next multiple of 64 bits.</p>
            <p id="Par94">The generic threshold and <italic>k</italic>-nearest search methods use a function pointer to call the appropriate intersection popcount implementation. The function call overhead becomes noticeable for high-performance implementations, so there are specialized versions of the AVX2 and POPCNT implementations which inline the popcount calculation. Inlining may also allow the compiler to apply more optimizations. The specialized AVX2 versions only need to initialize the register with the nibble table once, and the versions for exactly 128 and 256 bytes also load the query fingerprint into AVX2 registers only once. The fully unrolled and inlined AVX2 version is the only version which is fast enough for explicit memory prefetching instructions to make a noticeable improvement.</p>
            <p id="Par95">Chemfp does not have special support for handling duplicate fingerprints. If duplicates are removed by an input filter then the k-nearest search becomes a search for the <italic>k</italic>-nearest distinct fingerprints.</p>
            <p id="Par96">Chemfp represents scores as 64-bit floating point values (“doubles”) because it is designed for Python, which uses doubles as the native floating point type. The 64-bit division required for Eq. <xref rid="Equ3" ref-type="disp-formula">3</xref> is relatively slow, so chemfp includes a fast rejection test using integer mathematics on the assumption that most fingerprints will not pass the rejection test. At the start of the search, the input threshold double is converted into a rational number which is equal to or slightly smaller than the threshold value, resulting in a very effective rejection test. An alternative under development is to compute the minimum required popcount given the query and target popcount. Preliminary results suggest a 20% speedup for 166-bit fingerprints but a very minor speedup for 2048-bit fingerprints.</p>
          </sec>
          <sec id="Sec14">
            <title>chemfp benchmark</title>
            <p id="Par97">As Haque et al. [<xref ref-type="bibr" rid="CR15">15</xref>] highlight, it is difficult to determine if a new search method is effective when the baseline comparison is not well optimized. Authors have an understandable tendency to spend more time optimizing a new algorithm than a seemingly simple linear one, and few have realized that significant gains were possible in linear search.</p>
            <p id="Par98">The authors of some of the published papers commendably also distribute their source code, making a head-to-head comparison possible. However, and again for understandable reasons, many of these are written to demonstrate effectiveness and not as general purpose tools. As specific examples, the implementation might only handle fingerprints which are a multiple of 512 bits long, or require the input files use a specific file-system layout, or report timing information but not the match identifiers and scores.</p>
            <p id="Par99">The chemfp project started with a different goal in mind than most other projects. It distributes general-purpose command-line tools and a library API to help promote the FPS format. The similarity search performance has been improved over time in the expectation that people would use chemfp because of its performance, and thus help popularize the FPS format.</p>
            <p id="Par100">The author of this paper therefore proposes that creators of new methods use the no-cost/open source version of chemfp as a reference for performance comparisons. This should provide a more rigorous baseline, and may be a useful way to normalize timings across multiple papers.</p>
            <p id="Par101">The chemfp benchmark suite takes that idea one step further by providing a collection of fingerprint data sets and tasks which can be used to evaluate search performance.</p>
            <p id="Par102">In all four cases, 1,002,000 fingerprints were sampled at random, without replacement. Of these, 2000 are designated as queries, and the remaining 1 million are targets. Only the first 1000 queries are used during comparison timings. The remaining 1000 queries may be used to double-check the stability of the timings.</p>
            <p id="Par103">The benchmark suite includes a set of standard tasks: count or find all matches at or above a given threshold (0.4 for the Morgan fingerprints and 0.7 for the others), and find the <italic>k</italic>-nearest neighbors (for <italic>k</italic> = 1 and <italic>k</italic> = 1000). The 0.4 threshold task emulates a search to select everything above a background level of similarity for the Morgan similarity. The other threshold levels emulate a more typical search for “good” similarity. These tasks are not meant to be comprehensive, but only to provide an easily interpreted rough estimate of performance.</p>
            <p id="Par104">Table <xref rid="Tab4" ref-type="table">4</xref> shows the single query search times for chemfp 1.5 and chemfp 3.3, which are the current versions of the no-cost and commercial development tracks. A version of chemfp 1.5 was instrumented to record the number of intersection calculations needed and thereby estimate the effective memory read bandwidth, and to count the number of Tanimoto calculations which required a 64-bit division (see Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Table S3). The chemfp 1.5 bandwidth of 11 GiB/s approaches the measured pmbw RAM read bandwidth of 13.3 GiB/s. These numbers show that chemfp 1.5 is likely an effective baseline for similarity search comparisons.<table-wrap id="Tab4"><label>Table 4</label><caption xml:lang="en"><p>Average performance of 1000 queries against 1 million targets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2"><p>#bits</p></th><th align="left" rowspan="2"><p>Method</p></th><th align="left" rowspan="2"><p>#Tanimotos (M)</p></th><th align="left" colspan="3"><p>chemfp 1.5</p></th><th align="left" colspan="3"><p>chemfp 3.3</p></th></tr><tr><th align="left"><p>Avg. time (ms)</p></th><th align="left"><p>T<sub>Tanimoto</sub> (ns)</p></th><th align="left"><p>Bandwidth (GiB/s)</p></th><th align="left"><p>Avg. time (ms)</p></th><th align="left"><p>T<sub>Tanimoto</sub> (ns)</p></th><th align="left"><p>Bandwidth (GiB/s)</p></th></tr></thead><tbody><tr><td align="left"><p>166</p></td><td align="left"><p>k = 1</p></td><td align="left"><p>91.8</p></td><td char="." align="char"><p>0.25</p></td><td char="." align="char"><p>2.68</p></td><td char="." align="char"><p>8.34</p></td><td char="." align="char"><p>0.19</p></td><td char="." align="char"><p>2.08</p></td><td char="." align="char"><p>10.7</p></td></tr><tr><td align="left"><p>166</p></td><td align="left"><p>k = 1000</p></td><td align="left"><p>588</p></td><td char="." align="char"><p>2.20</p></td><td char="." align="char"><p>3.74</p></td><td char="." align="char"><p>5.97</p></td><td char="." align="char"><p>1.85</p></td><td char="." align="char"><p>3.15</p></td><td char="." align="char"><p>7.10</p></td></tr><tr><td align="left"><p>166</p></td><td align="left"><p>T = 0.70</p></td><td align="left"><p>688</p></td><td char="." align="char"><p>1.72</p></td><td char="." align="char"><p>2.50</p></td><td char="." align="char"><p>8.93</p></td><td char="." align="char"><p>1.42</p></td><td char="." align="char"><p>2.07</p></td><td char="." align="char"><p>10.8</p></td></tr><tr><td align="left"><p>881</p></td><td align="left"><p>k = 1</p></td><td align="left"><p>146</p></td><td char="." align="char"><p>1.50</p></td><td char="." align="char"><p>10.3</p></td><td char="." align="char"><p>10.2</p></td><td char="." align="char"><p>1.22</p></td><td char="." align="char"><p>8.35</p></td><td char="." align="char"><p>12.5</p></td></tr><tr><td align="left"><p>881</p></td><td align="left"><p>k = 1000</p></td><td align="left"><p>485</p></td><td char="." align="char"><p>5.64</p></td><td char="." align="char"><p>11.6</p></td><td char="." align="char"><p>8.97</p></td><td char="." align="char"><p>4.73</p></td><td char="." align="char"><p>9.75</p></td><td char="." align="char"><p>10.7</p></td></tr><tr><td align="left"><p>881</p></td><td align="left"><p>T = 0.70</p></td><td align="left"><p>554</p></td><td char="." align="char"><p>5.70</p></td><td char="." align="char"><p>10.3</p></td><td char="." align="char"><p>10.2</p></td><td char="." align="char"><p>4.70</p></td><td char="." align="char"><p>8.47</p></td><td char="." align="char"><p>12.3</p></td></tr><tr><td align="left"><p>1021</p></td><td align="left"><p>k = 1</p></td><td align="left"><p>113</p></td><td char="." align="char"><p>1.30</p></td><td char="." align="char"><p>11.5</p></td><td char="." align="char"><p>10.4</p></td><td char="." align="char"><p>0.86</p></td><td char="." align="char"><p>7.56</p></td><td char="." align="char"><p>15.8</p></td></tr><tr><td align="left"><p>1021</p></td><td align="left"><p>k = 1000</p></td><td align="left"><p>743</p></td><td char="." align="char"><p>9.25</p></td><td char="." align="char"><p>12.5</p></td><td char="." align="char"><p>9.58</p></td><td char="." align="char"><p>6.25</p></td><td char="." align="char"><p>8.41</p></td><td char="." align="char"><p>14.2</p></td></tr><tr><td align="left"><p>1021</p></td><td align="left"><p>T = 0.70</p></td><td align="left"><p>489</p></td><td char="." align="char"><p>5.51</p></td><td char="." align="char"><p>11.3</p></td><td char="." align="char"><p>10.6</p></td><td char="." align="char"><p>3.64</p></td><td char="." align="char"><p>7.45</p></td><td char="." align="char"><p>16.0</p></td></tr><tr><td align="left"><p>2048</p></td><td align="left"><p>k = 1</p></td><td align="left"><p>356</p></td><td char="." align="char"><p>7.76</p></td><td char="." align="char"><p>21.8</p></td><td char="." align="char"><p>11.0</p></td><td char="." align="char"><p>5.29</p></td><td char="." align="char"><p>14.8</p></td><td char="." align="char"><p>16.1</p></td></tr><tr><td align="left"><p>2048</p></td><td align="left"><p>k = 1000</p></td><td align="left"><p>939</p></td><td char="." align="char"><p>21.2</p></td><td char="." align="char"><p>22.6</p></td><td char="." align="char"><p>10.6</p></td><td char="." align="char"><p>14.6</p></td><td char="." align="char"><p>15.5</p></td><td char="." align="char"><p>15.4</p></td></tr><tr><td align="left"><p>2048</p></td><td align="left"><p>T = 0.40</p></td><td align="left"><p>920</p></td><td char="." align="char"><p>19.9</p></td><td char="." align="char"><p>21.6</p></td><td char="." align="char"><p>11.1</p></td><td char="." align="char"><p>13.6</p></td><td char="." align="char"><p>14.8</p></td><td char="." align="char"><p>16.1</p></td></tr></tbody></table><table-wrap-foot><p>The timings use three different search methods to search the four different fingerprint types from the chemfp benchmark data set. The total number of Tanimoto evaluations is less than 1 billion because of BitBound pruning. T<sub>Tanimoto</sub> is the average time per Tanimoto evaluation, including storing the hits. The effective read bandwidth is calculated as #Tanimotos * storage_size (24, 112, 128, and 256 bytes respectively)/T<sub>Tanimoto</sub>. Note that while shorter fingerprints are faster and more compact, longer fingerprints tend to have better scientific usefulness</p></table-wrap-foot></table-wrap></p>
            <p id="Par105">Chemfp 3.3 is faster than chemfp 1.5 because of inlining, AVX2, and the use of explicit memory prefetching instructions. The geometric mean of the ratio of their search times is 1.35 indicating that chemfp 3.3 is about 35% faster than chemfp 1.5. Chemfp 3.3 uses 16 GiB/s of memory bandwidth, which is over half of the theoretical maximum of 25 GiB/s on the test machine and higher than the measured pmbw bandwidth. The current hypothesis is that the chemfp timings include some L3 cache reuse.</p>
          </sec>
          <sec id="Sec15">
            <title>Multiquery searches</title>
            <p id="Par106">The earlier description focused on single query performance. Many common search tasks require multiple queries, such as the <italic>N</italic> × <italic>M</italic> case of comparing two different data sets, or the <italic>N</italic> × <italic>N</italic> case of generating a similarity matrix for clustering, where the fingerprints are used as both queries and targets. In the <italic>N</italic> × <italic>N</italic> case the diagonal is not computed.</p>
            <p id="Par107">Chemfp uses the OpenMP “parallel for” pragma to parallelize each query on its own thread. The <italic>N</italic> × <italic>N</italic> threshold search computes the upper triangle in parallel then uses a single thread to fill in the lower triangle, which roughly doubles the performance. As a minor complication, the OpenMP implementation with one thread was slightly slower than the non-OpenMP version. Chemfp therefore compiles two code paths, and uses the non-OpenMP version for single-threaded use.</p>
            <p id="Par108">Table <xref rid="Tab5" ref-type="table">5</xref> shows the scalability in the number of processors for different search methods using the 2048 bit data files from the chemfp benchmark. Several of chemfp customers with access to more powerful hardware report successful Taylor–Butina clustering of ~ 3 million fingerprints at a threshold of 0.4 within several hours.<table-wrap id="Tab5"><label>Table 5</label><caption xml:lang="en"><p>Multiquery search performance</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="2"><p>Method</p></th><th align="left" rowspan="2"><p>Query size</p></th><th align="left"><p>1 thread</p></th><th align="left" colspan="2"><p>2 threads</p></th><th align="left" colspan="2"><p>4 threads</p></th></tr><tr><th align="left"><p>Time (s)</p></th><th align="left"><p>Time (s)</p></th><th align="left"><p>Scaling</p></th><th align="left"><p>Time (s)</p></th><th align="left"><p>Scaling</p></th></tr></thead><tbody><tr><td align="left"><p>k = 1</p></td><td align="left"><p>1000</p></td><td align="left"><p>5.31</p></td><td align="left"><p>3.93</p></td><td char="." align="char"><p>1.35</p></td><td align="left"><p>3.69</p></td><td char="." align="char"><p>1.44</p></td></tr><tr><td align="left"><p>k = 1</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>5.24</p></td><td align="left"><p>3.84</p></td><td char="." align="char"><p>1.36</p></td><td align="left"><p>3.50</p></td><td char="." align="char"><p>1.50</p></td></tr><tr><td align="left"><p>k = 1</p></td><td align="left"><p>N × N</p></td><td align="left"><p>7130 (= 1 h 58 m)</p></td><td align="left"><p>5200 (= 1 h 26 m)</p></td><td char="." align="char"><p>1.37</p></td><td align="left"><p>4640 (= 1 h 17 m)</p></td><td char="." align="char"><p>1.54</p></td></tr><tr><td align="left"><p>k = 1000</p></td><td align="left"><p>1000</p></td><td align="left"><p>14.6</p></td><td align="left"><p>10.5</p></td><td char="." align="char"><p>1.39</p></td><td align="left"><p>9.54</p></td><td char="." align="char"><p>1.53</p></td></tr><tr><td align="left"><p>k = 1000</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>14.5</p></td><td align="left"><p>8.42</p></td><td char="." align="char"><p>1.72</p></td><td align="left"><p>6.30</p></td><td char="." align="char"><p>2.30</p></td></tr><tr><td align="left"><p>k = 1000</p></td><td align="left"><p>N × N</p></td><td align="left"><p>15,300 (= 4 h 14 m)</p></td><td align="left"><p>8040 (= 2 h 13 m)</p></td><td char="." align="char"><p>1.90</p></td><td align="left"><p>4690 (= 1 h 18 m)</p></td><td char="." align="char"><p>3.26</p></td></tr><tr><td align="left"><p>T = 0.90</p></td><td align="left"><p>1000</p></td><td align="left"><p>2.95</p></td><td align="left"><p>2.19</p></td><td char="." align="char"><p>1.35</p></td><td align="left"><p>2.03</p></td><td char="." align="char"><p>1.45</p></td></tr><tr><td align="left"><p>T = 0.90</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>2.92</p></td><td align="left"><p>1.65</p></td><td char="." align="char"><p>1.77</p></td><td align="left"><p>1.04</p></td><td char="." align="char"><p>2.81</p></td></tr><tr><td align="left"><p>T = 0.90</p></td><td align="left"><p>N × N</p></td><td align="left"><p>1890 (= 31 m 34 s)</p></td><td align="left"><p>999 (= 16 m 39 s)</p></td><td char="." align="char"><p>1.90</p></td><td align="left"><p>550 (= 9 m 9 s)</p></td><td char="." align="char"><p>3.45</p></td></tr><tr><td align="left"><p>T = 0.80</p></td><td align="left"><p>1000</p></td><td align="left"><p>5.52</p></td><td align="left"><p>4.09</p></td><td char="." align="char"><p>1.35</p></td><td align="left"><p>3.77</p></td><td char="." align="char"><p>1.46</p></td></tr><tr><td align="left"><p>T = 0.80</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>5.47</p></td><td align="left"><p>2.96</p></td><td char="." align="char"><p>1.85</p></td><td align="left"><p>2.03</p></td><td char="." align="char"><p>2.69</p></td></tr><tr><td align="left"><p>T = 0.80</p></td><td align="left"><p>N × N</p></td><td align="left"><p>3490 (= 58 m 9 s)</p></td><td align="left"><p>1830 (= 30 m 25 s)</p></td><td char="." align="char"><p>1.91</p></td><td align="left"><p>1010 (= 16 m 47 s)</p></td><td char="." align="char"><p>3.46</p></td></tr><tr><td align="left"><p>T = 0.70</p></td><td align="left"><p>1000</p></td><td align="left"><p>8.09</p></td><td align="left"><p>5.95</p></td><td char="." align="char"><p>1.36</p></td><td align="left"><p>5.43</p></td><td char="." align="char"><p>1.49</p></td></tr><tr><td align="left"><p>T = 0.70</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>8.07</p></td><td align="left"><p>4.37</p></td><td char="." align="char"><p>1.85</p></td><td align="left"><p>2.80</p></td><td char="." align="char"><p>2.88</p></td></tr><tr><td align="left"><p>T = 0.70</p></td><td align="left"><p>N × N</p></td><td align="left"><p>4930 (= 1 h 22 m)</p></td><td align="left"><p>2580 (= 42 m 57 s)</p></td><td char="." align="char"><p>1.91</p></td><td align="left"><p>1430 (= 23 m 49 s)</p></td><td char="." align="char"><p>3.45</p></td></tr><tr><td align="left"><p>T = 0.40</p></td><td align="left"><p>1000</p></td><td align="left"><p>13.6</p></td><td align="left"><p>9.99</p></td><td char="." align="char"><p>1.36</p></td><td align="left"><p>8.28</p></td><td char="." align="char"><p>1.64</p></td></tr><tr><td align="left"><p>T = 0.40</p></td><td align="left"><p>Sorted</p></td><td align="left"><p>13.6</p></td><td align="left"><p>7.39</p></td><td char="." align="char"><p>1.83</p></td><td align="left"><p>4.54</p></td><td char="." align="char"><p>2.99</p></td></tr><tr><td align="left"><p>T = 0.40</p></td><td align="left"><p>N × N</p></td><td align="left"><p>7120 (= 1 h 58 m)</p></td><td align="left"><p>3710 (= 1 h 1 m)</p></td><td char="." align="char"><p>1.92</p></td><td align="left"><p>2100 (= 34 m 55 s)</p></td><td char="." align="char"><p>3.40</p></td></tr></tbody></table><table-wrap-foot><p>Time to search the 1 million 2048-bit Morgan fingerprints from the chemfp benchmark data set, for different numbers of threads. A query size of “1000” indicates that the first 1000 benchmark queries were used, “sorted” indicates the same 1000 queries sorted by popcount, and “N × N” generates the full sparse similarity matrix for the 1 million target fingerprints</p></table-wrap-foot></table-wrap></p>
          </sec>
        </sec>
        <sec id="Sec16">
          <title>Results and discussion</title>
          <sec id="Sec17">
            <title>Popcount performance</title>
            <p id="Par109">Some authors of previous papers on this topic argue that if two different algorithms are implemented by the same people then the resulting timing comparison of the implementations fairly characterizes the relative performance of the algorithms. Table <xref rid="Tab1" ref-type="table">1</xref> suggests this argument is not very strong. Several earlier papers characterize an 8-bit lookup table as a high performance implementation, but there is a sixfold or larger performance difference compared to a POPCNT-based solution, and an order of magnitude difference compared to an optimized AVX2 implementation. This highlights the need to compare a new algorithm implementation to a well-optimized baseline.</p>
            <p id="Par110">The performance difference makes it difficult to assess the validity of many published papers in this field. A paper might show that the authors’ implementation of a new algorithm is twice as fast as their implementation of the BitBound algorithm when both implementations use a 16-bit lookup table to compute the popcount. Yet if the BitBound implementation were replaced with an AVX2 version, the result may be twice as fast as the new algorithm. It’s tempting to believe that replacing the popcount for the new algorithm would also result in a four-fold speedup, but many of the algorithms perform extra work to avoid a slow popcount calculation. The time for that extra work does not change, reducing the overall speedup, and the extra work might not be as easily optimized as the popcount.</p>
          </sec>
          <sec id="Sec18">
            <title>Floating point issues</title>
            <p id="Par111">Testing of chemfp and fingerprint tools from other vendors shows that certain floating point issues are often overlooked. If the user specifies a threshold of 0.7 + 1E−17 then most systems will include matches with a score of 0.7 because the above number, when input as the full string and converted to a double or 32-bit float, has the same representation as 0.7. A more realistic version of this issue occurs in mixed 32/64-bit systems where the similarity search is implemented using 32-bit floats instead of doubles to reduce memory and improve performance. (32-bit division is significantly faster than 64-bit division). The 32-bit value of 0.7, when converted to a double, is smaller than the 64-bit value of 0.7. If the user specifies a threshold of 0.7 using a double, then a 32-bit system might end up returning values which, when converted to double, are slightly less than the double value of 0.7.</p>
            <p id="Par112">It is also possible for valid matches to be excluded, such as when the 32-bit value for 0.8 is slightly smaller than the 64-bit value used internally for the threshold test. While it is a direct consequence of mixed 32/64-bit systems, and well-known to programmers, it can be quite unexpected for non-programmers when one tool finds, say, 20 more hits than another due to tiny differences in numerical representation.</p>
            <p id="Par113">The Tversky similarity is perhaps the second most common similarity measure in cheminformatics, though it is a distant second. The Tversky calculation may cause problems even using homogenous floating point types because IEEE floating point operations do not exactly follow the normal arithmetic distribution rules. Figure <xref rid="Fig4" ref-type="fig">4</xref> shows an example where two seemingly equivalent ways to write the Tversky equation lead to slightly different results. Some values of alpha and beta may even cause the Tversky similarity of a fingerprint with itself to be slightly less than 1.0, which has occurred in both earlier versions of chemfp and other vendor libraries.<fig id="Fig4"><label>Fig. 4</label><caption xml:lang="en"><p>Example of how the non-distributive nature of IEEE 754 doubles results in different Tversky similarity scores</p></caption><graphic specific-use="HTML" mime-subtype="PNG" xlink:href="MediaObjects/13321_2019_398_Fig4_HTML.png" /></fig></p>
            <p id="Par114">Chemfp handles this issue by using integer calculations except for the final division. The values of values of alpha and beta, which are limited to a maximum of 10, are scaled by 10,000 then rounded to the nearest integer. While that introduces a new set of rounding errors, it works because there is no chemically justified reason to have values of alpha and beta with more than two decimal digits of precision.</p>
            <p id="Par115">A likely better design would use scaled decimals and rational values rather than floating point numbers. If the fingerprints have no more than 2<sup>16</sup> bits then the exact score can be stored in two 16-bit values, with no need for division during search. A post-search step could convert those ratios to 32- or 64-bit floats, as desired. If the Tanimoto threshold is given as a double then it could be converted to a ratio of equal value (which may require 64-bit integers for the numerator and denominator), or replaced by a ratio of two small integers constructed so a search with the new ratio gives the same search results as using the original double.</p>
          </sec>
          <sec id="Sec19">
            <title>Changed cost model</title>
            <p id="Par116">Many papers use an implicit cost model which minimizes the number of intersection popcount calculations and assumes the data structure overhead is small. One of the few explicit cost models in the literature is in Nasr et al. [<xref ref-type="bibr" rid="CR26">26</xref>], where it was used to optimize a two-stage filtering process.</p>
            <p id="Par117">This model was reasonable 10 years ago, but modern hardware changes one of the simplifications in that approach. The Tanimoto calculation is now fast enough that memory bandwidth and latency are important factors, so the time to compute a Tanimoto is not a constant nor simple distribution, but is a function of the specific data organization and access patterns used.</p>
            <p id="Par118">As an illustrative example, suppose each fingerprint has an associated value like a BitBound popcount or xor signature which is used in a fast filter test to prune obvious mismatches before doing the fingerprint Tanimoto calculation. Chemfp’s AVX2 implementation for 1024-bit fingerprints takes about 7.4 ns per Tanimoto, but if prefetching is disabled it drops to about 8.3 ns. Prefetching cannot be used with a per-fingerprint filter because the fingerprint shouldn’t be fetched until the filter test passes, which is exactly when the fingerprint is needed. In the most optimistic scenario, a filter must therefore be able to remove 10% of the candidates just to break even. A more complete analysis must consider the additional memory bandwidth overhead for the filter values and the higher latency (> 50 ns) of effectively random memory accesses once the fingerprint fetches are no longer easily predictable by the memory subsystem. A similar analysis holds for pruning methods which evaluate a partial fingerprint to determine if the entire fingerprint should be evaluated.</p>
            <p id="Par119">These extra costs can be amortized by grouping fingerprints with the same signature together, which implies either short signatures or a very large set of fingerprints. This conclusion can be derived from a modified version of the Nasr et al. cost model if T<sub>Tanimoto</sub> is allowed to grow as a function of M and starts with a value closer to T<sub>M=2</sub>.</p>
            <p id="Par120">These issues didn’t arise during the empirical testing in earlier papers because the baseline timings (typically brute-force linear search or a simple test like BitBound) did not come close to reaching bandwidth limitations. Chemfp’s BitBound implementation, for example, is roughly 9× faster than the fastest implementation used in Kristensen et al. [<xref ref-type="bibr" rid="CR27">27</xref>] for a 0.9 threshold search from the reference benchmark (see Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Table S4), in part because the latter depends on the relatively slow performance from representing fingerprints as Java set types. (The TanimotoQuery benchmark was run with OpenJDK 1.8. Additional file <xref ref-type="supplementary-material" rid="MOESM1">1</xref>: Table S5 shows the Kristensen KDGrid is faster than chemfp if the minimum threshold is above 0.97). Nasr et al. describe the time to compute the Tanimoto similarity as 48.8 ± 20.4 μs, which is over 1000× slower than chemfp. That paper uses compressed fingerprints on a machine which did not support the POPCNT instruction.</p>
            <p id="Par121">An alternative is to use deeper tree data structures, but trees tend to have poor data locality, and the effectively random access memory patterns are about an order of magnitude slower than linear access patterns. To be certain, these tree data structures have a finite depth, with linear search in the leaves, so they will be more effective than BitBound for sufficiently large data sets. It’s not clear, however, where that transition occurs.</p>
          </sec>
          <sec id="Sec20">
            <title>Multiquery scaling</title>
            <p id="Par122">Given that a single thread uses about half of the available bandwidth, the prediction is that chemfp’s multiquery search would scale by at most a factor of two, but several benchmarks in Table <xref rid="Tab5" ref-type="table">5</xref> shows a scaling factor of nearly 3.5 for 4 threads.</p>
            <p id="Par123">The key observation is that the query input order affects the timing. The query sizes of “1000” and “sorted” both use the first 1000 queries from the benchmark data set, though the “sorted” queries are further sorted by popcount. The unsorted queries never scale beyond about 1.6, while the sorted queries often scale beyond 2.0.</p>
            <p id="Par124">The difference can’t simply be due to a more effective use of cache because the single thread time doesn’t change significantly between the sorted and unsorted versions, and because the T = 0.4 search shows good scaling even though the target space is far larger than the ~ 32 K fingerprints which would fit into L3 cache.</p>
            <p id="Par125">The estimate of a maximum of 2× scaling assumes the threads mostly read data from different parts of memory. It appears that some of the search methods have a natural synchronization which causes the threads to read the same memory at nearly the same time. If the query fingerprints are unsorted then the BitBound algorithm causes neighboring threads to read from different fingerprint ranges. If instead the fingerprints are sorted so fingerprints with the same popcount occur together then it’s more likely that many search threads will test the same target fingerprints and in the same order. When one thread is slightly ahead of the other then it will need to wait for the fingerprints to be transferred from RAM, while the slightly slower threads access their data from the significantly faster L3 cache. This temporal coherence explains why the threshold searches, which always examine the same regions of memory for the same popcount, have better scaling than <italic>k</italic>-nearest searches, where the target search space is a function of the <italic>k</italic>th-nearest similarity score. It also explains why the <italic>k</italic> = 1000 searches, which by the law of large numbers will tend to explore the same amount of space, scales better than the more variable reads of <italic>k</italic> = 1 searches.</p>
            <p id="Par126">Some other search tools use more sophisticated methods to handle multiquery searches, for examples by making better use of cache by traversing memory in Morton/Z-order [<xref ref-type="bibr" rid="CR15">15</xref>] or by query set indexing [<xref ref-type="bibr" rid="CR44">44</xref>]. These will need to be examined more closely to see if they can be applied to chemfp.</p>
          </sec>
          <sec id="Sec21">
            <title>Benchmark data set density</title>
            <p id="Par127">The 1024-bit and 2048-bit fingerprints in the chemfp benchmark appear to be relatively sparse compared to most path fingerprints for the former, and compared to most fingerprints in general for the second. Density was not considered as part of the selection process because most dense search methods are insensitive to density. However, those choices may affect performance comparisons with sparse methods, which are more sensitive to density.</p>
            <p id="Par128">As a recent paper [<xref ref-type="bibr" rid="CR45">45</xref>] highlights, the 2048-bit Morgan fingerprints are sparse enough that the RISC algorithm, which uses sparse inverted indices, is faster than chemfp. A closer examination [<xref ref-type="bibr" rid="CR46">46</xref>] shows that the Morgan fingerprint bit density of only 0.024 for the ChEMBL data set is quite sparse compared to most other 2048-bit fingerprint types. For example, the standard RDKit fingerprint, based on paths and branches up to 7 bonds, has a density of 0.425, and many other fingerprint types have densities above 0.1.</p>
            <p id="Par129">Earlier work [<xref ref-type="bibr" rid="CR47">47</xref>] showed that clustering 2048-bit Morgan fingerprints using blocked inverted indices was about twice as fast as chemfp 1.1. Together these two papers strongly suggest that sparse methods will outperform dense ones for Morgan fingerprint search—and likely most ECFP-like circular fingerprints. Interestingly, bit position correlations also appear to play a role as RISC and chemfp have comparable performance for a path fingerprint data set with similar sparsity to the Morgan data set.</p>
            <p id="Par130">The Open Babel FP2 fingerprints, which are based on linear fragments of length 1 to 7 atoms, are also unusually sparse for a path fingerprint. Each FP2 hashed path sets only one bit of the fingerprint, while the equivalent fingerprint types from RDKit and OpenEye set more than one bit.</p>
            <p id="Par131">Thus, the chemfp benchmark data sets may not be useful for tasks beyond comparing dense fingerprint methods. On the other hand, while they may not be representative of most fingerprint types, circular fingerprints are widely used, so the benchmark may give more focus to improving their performance. There may also be ways to improve dense approaches to better handle relatively sparse fingerprints. One intriguing possibility is to store compressed fingerprints in memory, and decompress when needed, which has proven useful in other fields when an implementation is memory bandwidth limited [<xref ref-type="bibr" rid="CR48">48</xref>].</p>
          </sec>
          <sec id="Sec22">
            <title>Funding open source</title>
            <p id="Par132">Starting around 15 years ago a number of papers discussed the role of free and open source software (“FOSS”) in cheminformatics [<xref ref-type="bibr" rid="CR49">49</xref>–<xref ref-type="bibr" rid="CR53">53</xref>]. Most papers argued that FOSS was essential for scientific reproducibility and economically beneficial to organizations, but said little about how FOSS projects could be funded, or the effect of the funding model on the project. In practice, most projects are developed through direct research funding or through indirect funding of employees who contribute code to a project. One of the goals of the chemfp project was to explore the possibility of “selling free software” [<xref ref-type="bibr" rid="CR54">54</xref>] as an alternative funding source. Originally chemfp was only distributed under the MIT license, under the principles of free software. This proved to be financially unsustainable, with low income and poor income stability, so the current distribution also includes cheaper though proprietary licensing options. The rest of this section outlines the issues involved, in hopes of providing insights for future FOSS software projects.</p>
            <p id="Par133">Many FOSS projects are directly funded as part of a research effort. In academic projects, the funding typically comes from grants, and industrial funding typically comes from the R&amp;D budget. The main goal of these projects is the scientific result, and often there is no budget for effective end-user documentation, maintenance, or support, or even portability beyond the developers’ own system. Consequently reported bugs do not get fixed, user questions remain unanswered, and the software often “rots” as it gradually becomes incompatible with evolving software development practices. (There are rare exceptions, as when an academic group is funded as a long-term software resource).</p>
            <p id="Par134">These potential negatives are generally not a problem because most projects are not designed for long-term sustainability. The authors of a journal paper may include an open source implementation as a way for others to verify the result, or a developer may release a package that solved a specific in-house problem as a gift in case others might find it interesting. FOSS software generally doesn’t have the existential issues that a proprietary package may have, in that others can start with the source, though at the cost of rebuilding the lost institutional knowledge of how the software works.</p>
            <p id="Par135">Stability is more important for projects which are deeper in the cheminformatics software stack [<xref ref-type="bibr" rid="CR55">55</xref>] because users find them more indispensable and harder to maintain independently. The Open Babel, CDK [<xref ref-type="bibr" rid="CR56">56</xref>], and RDKit toolkits handle this by developing a “community”, that is, an association of people willing to share the labor costs for better stability, more effective impact, esprit de corps, an aversion to proprietary software, a form of apprenticeship, and so on.</p>
            <p id="Par136">These sorts of FOSS projects are generally indirectly funded. One common example is when an employee modifies a project to make it better suited for in-house use, and contributes the modifications back to the primary project maintainers rather than maintain a forked project. The employer indirectly funds the FOSS project, through the employee’s salary, and benefits economically from the exchange. Similar arrangements hold for students and academics. In general, this funding model assumes that participants find a single third party willing to pay them to work on the project. This may be a problem when the needs of the third party are not aligned with the needs of the project, such as when academic researchers find that their career progression is increasingly based on bibliometric counts, and not on leadership or participation in a widely used research software project [<xref ref-type="bibr" rid="CR57">57</xref>].</p>
            <p id="Par137">Experience across many FOSS projects shows that the community model is nearly always underfunded with respect to the economic and social benefit provided, even for successful projects [<xref ref-type="bibr" rid="CR58">58</xref>]. For example, a company may decide to use one of the FOSS toolkits instead of paying for a commercial toolkit, but not use any of the savings to help further toolkit development. This is often described as the “free rider problem” [<xref ref-type="bibr" rid="CR59">59</xref>] of FOSS development, though it is a problem only to the extent that FOSS developers need or expect some sort of compensation. While it’s true that many do not expect monetary payment, many FOSS developers hope for collaborators, contributions of patches and improvements, future consulting work, employment offers, or social or scientific recognition. Even if the developers regard their contribution as a pure gift, it would likely help the project if more of the cost savings from users could be directed towards improving the project. Then again, even if a company wants to contribute funding, it can be hard to figure out how, such as when most of the developers are employees of competing companies.</p>
            <p id="Par138">Many people aren’t even aware that most long-lived, widely deployed FOSS packages—some with millions of users—have only one or a few core developers, and some of these developers get burned out from the emotional stresses involved [<xref ref-type="bibr" rid="CR58">58</xref>, <xref ref-type="bibr" rid="CR60">60</xref>]. Nor is it easy to talk about the need for funding when FOSS development is so closely coupled to terms like “community” and “volunteer” and the software is nearly always available at no cost. Still, these are not completely incompatible topics as some non-software volunteer organizations have paid support staff, as do communities like villages. What are alternative models to pay for FOSS development in cheminformatics?</p>
          </sec>
          <sec id="Sec23">
            <title>Chemfp as commercial open source</title>
            <p id="Par139">Customers will pay for commercial proprietary software, for a price which includes the costs of long-term stability, testing, documentation, and support. Another goal of the chemfp project was to see if industry would pay for commercial FOSS software, where customers who have paid for a copy of the software are then free to use and redistribute it to others, including those who have not paid. Industrial users were the target customer in part because pharmaceutical companies rarely distribute software [<xref ref-type="bibr" rid="CR53">53</xref>], which reduces some of the economic risk involved.</p>
            <p id="Par140">The initial version of chemfp, which was subsidized by previous consulting income, was not a viable commercial product because it was too slow. It acted as a form of advertising, which lead to several development contracts with companies interested in improved performance, OpenMP parallelism, Tversky search, and the FPB format. Some of these features went into the no-cost version of chemfp, which was meant to promote the use of the FPS format and continue to act as an advertisement for the project, while others went into the commercial version. Both versions were FOSS.</p>
            <p id="Par141">It’s not surprising that the consulting model is one way to fund FOSS development, but its success depends on getting new work. In essence this model views software development as a labor cost, and disregards the capital value of the software. This places it at a disadvantage to commercial software which is able to sell the same software to multiple customers and use the funding to provide additional project support, including the marketing needed to let others know about the project. There is also a perverse incentive in the consulting model because if the software is ‘too good’ there will be less need for consulting [<xref ref-type="bibr" rid="CR58">58</xref>].</p>
            <p id="Par142">The consulting model doesn’t work well when a lot of work is needed for something which adds little benefit for any one client. Chemfp’s transition from Python 2 to 3 took nearly two months of effort, though to the user the only other difference was support for Unicode identifiers—which are rarely needed. This effort could be justified under the commercial model because the cost was split between customers. An alternative might be the consortium model, where the project doesn’t start until enough people have agreed to pay for it, though that requires additional marketing and sales expertise, and the risk that the effort to build a consortium fails. The consortium model should also be structured to minimize the free rider problem.</p>
            <p id="Par143">The patron model is another variant of the consulting model, where satisfied and supportive users voluntarily contribute to the project, and preferably on a continuing basis. This option was available for chemfp, perhaps designated as a support contract for accounting purposes, though the only contribution so far has been a bottle of wine. (The InChI project uses the patron model as it is funded primarily by membership subscription, though there is also considerable in-kind contributions of time and facilities from its members and other collaborators).</p>
            <p id="Par144">The original chemfp business plan was to use a delayed-release distribution model, where older releases of the commercial version would become the newest release of the no-cost version after, say, 2 years. It was quickly clear that this model would not work because chemfp would be its own competitor. The improvements after only 2 years were not enough to justify a commercial price that could support the entire project development, and many organizations who did not have a pressing need for performance could wait until it was available at no cost.</p>
            <p id="Par145">Instead, chemfp development changed to a two track model. Most new development goes into the commercial track, while the no-cost/open source track is mostly in maintenance mode. This means that chemfp uses a closed development model, while many FOSS projects use an open development model hosted on public servers like GitHub or BitBucket where anyone is free to observe or join. While the closed model may inhibit collaborations with those willing to contribute improvements, personal experience shows that it’s rare for most FOSS projects to get more than occasional patches. The disadvantages of the closed model may easily be outweighed by possible additional funding. For example, funding from chemfp sales was used to pay two people from the small community of popcount optimizers to improve chemfp performance.</p>
          </sec>
          <sec id="Sec24">
            <title>Problems selling free software</title>
            <p id="Par146">It may seem like a contradiction to “sell” free software, because one definition of “free” means available at no cost. There are differences between the social movement of free software and the development methodology of open source [<xref ref-type="bibr" rid="CR61">61</xref>]. To many they are like the doctrinaire differences between the People’s Front of Judea and the splitters of the Judean People’s Front [<xref ref-type="bibr" rid="CR62">62</xref>]. For purposes of this paper, the Four Freedoms [<xref ref-type="bibr" rid="CR63">63</xref>] of free software say that anyone who receives any software has a right to usable source code of that software and is free to use, modify, or redistribute the software and source—including for a fee—so long as the software remains free software. The open source methodology argues that useable source code with few restrictions is better than proprietary software because it results in better software, but it can be acceptable (if the license allows) to include open source software in a binary-only package, or in software which prohibits redistribution.</p>
            <p id="Par147">For many years chemfp followed the free software principles and only distributed under the MIT license, along with some third-party components under an equally permissive license. These principles made it much more difficult to sell chemfp. If a potential customer wants to evaluate the software before buying it, and the evaluation software is distributed under a free software license, then there is little other than a loss of good will which prevents the customer from continuing to use the software but not going through with the sale.</p>
            <p id="Par148">Commercial proprietary software uses market segmentation so that the sale price is a better match for what customers are willing to pay. It is common practice for academic groups to receive a copy of commercial proprietary software at no cost or a greatly reduced cost. However, while a developer at a large pharmaceutical is unlikely to redistribute software, a graduate student at a university is much more likely to make a copy of open source software available to the public. The price for an academic purchase, after factoring in the economic risk that the software may be redistributed, may be more expensive than an industrial purchase. For chemfp this meant that the commercial FOSS version was only sold to industrial customers.</p>
            <p id="Par149">These and similar problems lead to the conclusion that it is not possible to develop chemfp as a self-funded fully free software project. The latest business model assumes that people are mostly interested in FOSS because it is available for no cost, and not because of moral principles or an improved development methodology. All versions of chemfp are still available under the MIT license. What’s new are proprietary licensing options for those who do not wish to pay the full price, and pre-compiled binaries with a time-locked license key for evaluation purposes. The change to include proprietary licensing was only possible because chemfp does not depend on any components under a free software license like the GPL which requires that derived distributions always be free software.</p>
            <p id="Par150">This does not mean that self-supported commercial FOSS software for cheminformatics is impossible. There might not be enough demand for chemfp, it may have the wrong pricing model or insufficient marketing, or any of the many reasons which cause a product to fail.</p>
          </sec>
          <sec id="Sec25">
            <title>Open core</title>
            <p id="Par151">Chemfp is one of perhaps a handful of self-funded FOSS projects in cheminformatics or related fields. The best known was the early commercialization of PyMol [<xref ref-type="bibr" rid="CR64">64</xref>], which sought voluntary contributions from users. As an incentive, those who paid could download pre-compiled binaries (anyone could download and compile the source) and have access to features that were not generally available. PyMol was a very successful project in terms of the number of users, but DeLano Scientific never received enough funding to hire another full-time employee, and augmented its income by providing consulting services to produce publication quality structure images [Warren DeLano, personal communication]. Chemfp was influenced by PyMol’s model, though focusing on corporate sales and not end-users or academics.</p>
            <p id="Par152">Many more successful FOSS projects instead follow what is broadly referred to as “open core” [<xref ref-type="bibr" rid="CR65">65</xref>] where one product is available as FOSS, as part of a larger suite which includes proprietary software. The proprietary software may be a more advanced version of the product or plug-in extensions, or there may be easy integration between the FOSS product and other vendor products. From a business viewpoint, the FOSS product can be justified as a loss leader or as advertising for the proprietary products which fund development. Overall, open core seems the most successful alternative funding mechanism for developing FOSS products.</p>
            <p id="Par153">However, this approach requires giving up on the ideals of free software and coming up with multiple successful products. Since the core is likely funded with the expectation of future income from a proprietary product, there is also the economic risk that others will use the open core component to develop a competitor to the proprietary version but without taking on the development debt.</p>
          </sec>
          <sec id="Sec26">
            <title>Status and future</title>
            <p id="Par154">Chemfp is used at many companies, though most use the no-cost version. One of the more unusual examples is when one company used it in a comparison between two proprietary corporate compound libraries [<xref ref-type="bibr" rid="CR66">66</xref>]. Chemfp’s performance was fast enough that a full nearest-neighbor analysis could be done in less than a day on an isolated laptop; the hard drive was then reformatted after the analysis to preserve confidentiality [Thiery Kogej, private communication].</p>
            <p id="Par155">It is hard to get a sense of who uses the no-cost version of chemfp or the FPS format, in part because modern FOSS distribution is increasingly intermediated by package managers. There are about 20 anonymous downloads per month from the chemfp web server, and another 15 through BioConda. (The BioConda distribution is not maintained by the chemfp project). It’s likely that most people download chemfp through PyPI, the Python Package Index, which uses its own copy of the source and does not provide download statistics. A download may correspond to one user, or to a system administrator who installs it for an entire organization, or a continuous integration system which repeatedly downloads the package.</p>
            <p id="Par156">Informal conversations at conferences suggest that chemfp is well-known and widely deployed, but the FPS format has not started to replace the ad hoc internal formats that it was designed to replace.</p>
            <p id="Par157">Several packages do support the FPS format, including CACTVS [<xref ref-type="bibr" rid="CR67">67</xref>], Open Babel, and the ‘fingerprint’ package for R [<xref ref-type="bibr" rid="CR68">68</xref>]. ChEMBL includes pre-computed RDKit Morgan fingerprints in FPS format as part of the standard distribution, starting with version 24 from March 2018. The FPB format was not publicly documented until 2018. At present only RDKit and the commercial version of chemfp support it. The chemfp benchmark has been used to evaluate the RISC algorithm, and its implementation also supports the FPS format.</p>
            <p id="Par158">While chemfp handles most of the common similarity search tasks in cheminformatics, there is still much that can be done, like a diversity picker, or plugin support to make it easier to add new fingerprint types. Some analysis methods, like generating a histogram of all N × M similarities between two large data sets, are a natural fit for Morton/Z-ordering and seem like an excellent candidate for future inclusion in chemfp.</p>
            <p id="Par159">Computing hardware continues to improve. Chemfp will add support for the 512-bit VPOPCNTDQ instruction, which should be a good complement to the higher bandwidth of DDR4 memory. Future research will likely evaluate the effectiveness of other pruning methods, with particular attention on M = 2 pruning. This research will also inform the changes to the FPB format which are needed to effectively support real-world data sets, which are approaching 1 billion compounds.</p>
            <p id="Par160">GPU memory bandwidth is an order of magnitude higher than CPU bandwidth, so a GPU implementation of the Tanimoto search kernel should be about ten times faster. Chemfp has avoided GPU support so far because it’s not clear that the demand for similarity search justifies dedicated hardware, especially if the time to load the data into the GPU is slower than the time to search it on the CPU. GPUs are more likely to be appropriate for clustering mid-sized datasets where the fingerprints fit into GPU memory.</p>
            <p id="Par161">Those are mostly engineering topics. One of the more interesting scientific topics in chemfp’s long-term future is support for sparse fingerprints and sparse count fingerprints. Dense fingerprints are often created by folding a sparse fingerprint (typically with a few hundred bits set in the range 2<sup>32</sup> or 2<sup>64</sup>) down to 1024 or 2048 bits. Some authors suggest that significantly larger folded fingerprints—as long as 16,384 bits—are more appropriate for some tasks [<xref ref-type="bibr" rid="CR69">69</xref>]. While chemfp can handle these longer fingerprints, the increased length requires more memory and decreases search performance.</p>
            <p id="Par162">It seems that a better solution would be to develop tools designed to work directly on sparse count fingerprints. While such tools already exist, they are not widely used. Informal discussions suggest that people aren’t using them because the tools don’t have anywhere near the same performance or level of maturity as dense fingerprint search tools, which makes it harder to gain the experience to judge when sparse count fingerprints are useful, which in turn reduces the push to improve the tools. This is another chicken-and-egg problem which seems a natural fit for the chemfp project.</p>
          </sec>
        </sec>
        <sec id="Sec27" sec-type="conclusions">
          <title>Conclusions</title>
          <p id="Par163">Tanimoto similarity search on modern hardware is essentially limited by memory bandwidth, which means a rough estimate of the maximum search time is roughly the number of fingerprints times the number of bits divided by the RAM bandwidth. Further improvements are possible by pruning the search space, and there many publications along these lines. Few of those papers used a Tanimoto calculation implementation which approaches the bandwidth limits, in part because popcount evaluation on older hardware was not fast enough, and in part because many implementations did not use the fastest available methods.</p>
          <p id="Par164">That does not mean these more sophisticated methods are invalid. Instead, it shows how difficult is is to compare two algorithms through specific implementations. Some algorithms are a better fit to the hardware, and two people of the same skill may produce implementations of the same algorithm with a several-fold difference in performance. Empirical testing shows that chemfp’s basic BitBound implementation is around nine times faster than an implementation of MultibitTree. It may be that a more optimized version of MultibitTree is even faster; at present we don’t know.</p>
          <p id="Par165">Chemfp is not the first program to approach memory bandwidth bounds, but it is the first one available as a general-purpose toolkit. The no-cost, MIT-licensed version, while about 25–35% slower than the commercial version, should provide a useful reference baseline for new work, and the chemfp benchmark should make it easier to do head-to-head comparisons. Using chemfp in this way will also promote the FPS format, which is the main reason for starting the chemfp project.</p>
          <p id="Par166">Chemfp was organized as commercial FOSS project, to experiment with an alternative way to fund FOSS software development. It was not financially successful so proprietary licensing models were added. While some of the difficulties are specific to chemfp, others will be true for any commercial project with a pure FOSS business model. It’s still unclear how FOSS can be funded in a way that reflects its importance to a large number of users. Without some sort of funding mechanism, the only people who will be able to work on FOSS projects are those who can convince their employer that it is worthwhile, and those who do it as a hobby. This is unlikely to scale as more and more people use FOSS in cheminformatics. We already see how the lack of funding has lead to problems in the larger world of FOSS. The author hopes others are able to come up with a better solution for our field.</p>
        </sec>
      </body>
      <back>
        <ack>
          <title>Acknowledgements</title>
          <p>The chemfp project could not have been done without support from many people and organizations. Foremost among them are the OpenEye, Open Babel and RDKit toolkit developers who provide the foundations that chemfp builds upon, and the paying customers of chemfp licenses. Thanks to Daniel Lemire from University of Quebec (TELUQ) for providing the benchmarking hardware, and Nathan Kurz and Dave Cosgrove for reviewing early drafts. Nathan also wrote the AVX2 implementation. Thanks to Niklas Ekström for providing the graphical abstract.</p>
        </ack>
        <sec sec-type="author-contribution">
          <title>Authors’ contributions</title>
          <p>The author read and approved the final manuscript.</p>
        </sec>
        <sec>
          <title>Funding</title>
          <p>This project was self-funded from profits made by commercializing chemfp. OpenEye provided a no-cost commercial license to use their toolkits.</p>
        </sec>
        <sec sec-type="data-availability">
          <title>Availability of data and materials</title>
          <p>Both the no-cost and commercial versions of chemfp are available from <ext-link xlink:href="http://www.chemfp.com/" ext-link-type="uri">http://www.chemfp.com/</ext-link> as well as the FPS and FPB format specifications. A no-cost license is available from the author on reasonable request for those wishing to verify the results of this paper. The chemfp benchmark is available from <ext-link xlink:href="https://bitbucket.org/dalke/chemfp_benchmark" ext-link-type="uri">https://bitbucket.org/dalke/chemfp_benchmark</ext-link>. The data sets generated during the current study, along with code used to produce and analyze them, are available at <ext-link xlink:href="https://bitbucket.org/dalke/chemfp_paper_reproducibles/" ext-link-type="uri">https://bitbucket.org/dalke/chemfp_paper_reproducibles/</ext-link>.</p>
        </sec>
        <sec sec-type="ethics-statement">
          <sec id="FPar1" sec-type="COI-statement">
            <title>Competing interests</title>
            <p id="Par167">The author declares no competing interests.</p>
          </sec>
        </sec>
        <ref-list id="Bib1">
          <title>References</title>
          <ref-list>
            <ref id="CR1">
              <label>1.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Willett</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Winterman</surname>
                    <given-names>V</given-names>
                  </name>
                  <name>
                    <surname>Bawden</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Implementation of nearest-neighbor searching in an online chemical structure search system</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1986</year>
                <volume>26</volume>
                <fpage>36</fpage>
                <lpage>41</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaL28XoslOlsg%3D%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00049a008</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR2">
              <label>2.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Adamson</surname>
                    <given-names>GW</given-names>
                  </name>
                  <name>
                    <surname>Bush</surname>
                    <given-names>JA</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A comparison of the performance of some similarity and dissimilarity measures in the automatic classification of chemical structures</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1975</year>
                <volume>15</volume>
                <fpage>55</fpage>
                <lpage>58</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaE2MXhtlymu7s%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci60001a016</pub-id>
                <pub-id pub-id-type="pmid">1127038</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR3">
              <label>3.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Barnard</surname>
                    <given-names>JM</given-names>
                  </name>
                  <name>
                    <surname>Downs</surname>
                    <given-names>GM</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Clustering of chemical structures on the basis of two-dimensional similarity measures</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1992</year>
                <volume>32</volume>
                <fpage>644</fpage>
                <lpage>649</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK38XmtlejtLo%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00010a010</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR4">
              <label>4.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Willett</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Barnard</surname>
                    <given-names>JM</given-names>
                  </name>
                  <name>
                    <surname>Downs</surname>
                    <given-names>GM</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Chemical similarity searching</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1998</year>
                <volume>38</volume>
                <fpage>983</fpage>
                <lpage>996</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK1cXks1ynu74%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci9800211</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR5">
              <label>5.</label>
              <mixed-citation publication-type="other">MACCS Structural Keys, Molecular Design Ltd., San Leandro, California, USA</mixed-citation>
            </ref>
            <ref id="CR6">
              <label>6.</label>
              <mixed-citation publication-type="other">James CA, Weininger D, Delaney J (1997) Fingerprints—screening and similarity. In: Daylight theory manual. <ext-link xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.finger.html" ext-link-type="uri">http://www.daylight.com/dayhtml/doc/theory/theory.finger.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR7">
              <label>7.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Rogers</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Hahn</surname>
                    <given-names>M</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Extended-connectivity fingerprints</article-title>
                <source>J Chem Inf Model</source>
                <year>2010</year>
                <volume>50</volume>
                <fpage>742</fpage>
                <lpage>754</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3cXlt1Onsbg%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci100050t</pub-id>
                <pub-id pub-id-type="pmid">20426451</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR8">
              <label>8.</label>
              <mixed-citation publication-type="other">(2009) PubChem substructure fingerprint V1.3. <ext-link xlink:href="ftp://ftp.ncbi.nlm.nih.gov/pubchem/specifications/pubchem_fingerprints.txt" ext-link-type="uri">ftp://ftp.ncbi.nlm.nih.gov/pubchem/specifications/pubchem_fingerprints.txt</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR9">
              <label>9.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Cereto-Massagué</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Ojeda</surname>
                    <given-names>MJ</given-names>
                  </name>
                  <name>
                    <surname>Valls</surname>
                    <given-names>C</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">Molecular fingerprint similarity search in virtual screening</article-title>
                <source>Methods</source>
                <year>2015</year>
                <volume>71</volume>
                <fpage>58</fpage>
                <lpage>63</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2cXhsVSmsbrN</pub-id>
                <pub-id pub-id-type="doi">10.1016/j.ymeth.2014.08.005</pub-id>
                <pub-id pub-id-type="pmid">25132639</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR10">
              <label>10.</label>
              <mixed-citation publication-type="other">Miller RB (1968) Response time in man-computer conversational transactions. In: Proceedings of the December 9–11, 1968, fall joint computer conference, part I. ACM, San Francisco, California, pp 267–277</mixed-citation>
            </ref>
            <ref id="CR11">
              <label>11.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Taylor</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Simulation analysis of experimental design strategies for screening random compounds as potential new drugs and agrochemicals</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1995</year>
                <volume>35</volume>
                <fpage>59</fpage>
                <lpage>67</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK2MXjt1yntro%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00023a009</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR12">
              <label>12.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Butina</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Unsupervised data base clustering based on Daylight’s fingerprint and Tanimoto similarity: a fast and automated way to cluster small and large data sets</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1999</year>
                <volume>39</volume>
                <fpage>747</fpage>
                <lpage>750</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK1MXktVWhtLw%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci9803381</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR13">
              <label>13.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Cao</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Jiang</surname>
                    <given-names>T</given-names>
                  </name>
                  <name>
                    <surname>Girke</surname>
                    <given-names>T</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Accelerated similarity searching and clustering of large compound sets by geometric embedding and locality sensitive hashing</article-title>
                <source>Bioinformatics</source>
                <year>2010</year>
                <volume>26</volume>
                <fpage>953</fpage>
                <lpage>959</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3cXjvFyrsrk%3D</pub-id>
                <pub-id pub-id-type="doi">10.1093/bioinformatics/btq067</pub-id>
                <pub-id pub-id-type="pmid">20179075</pub-id>
                <pub-id pub-id-type="pmcid">2844998</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR14">
              <label>14.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Tabei</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Tsuda</surname>
                    <given-names>K</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">SketchSort: fast all pairs similarity search for large databases of molecular fingerprints</article-title>
                <source>Mol Inform</source>
                <year>2011</year>
                <volume>30</volume>
                <fpage>801</fpage>
                <lpage>807</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3MXhtFGltLbJ</pub-id>
                <pub-id pub-id-type="doi">10.1002/minf.201100050</pub-id>
                <pub-id pub-id-type="pmid">27467412</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR15">
              <label>15.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Haque</surname>
                    <given-names>IS</given-names>
                  </name>
                  <name>
                    <surname>Pande</surname>
                    <given-names>VS</given-names>
                  </name>
                  <name>
                    <surname>Walters</surname>
                    <given-names>WP</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Anatomy of high-performance 2D similarity calculations</article-title>
                <source>J Chem Inf Model</source>
                <year>2011</year>
                <volume>51</volume>
                <fpage>2345</fpage>
                <lpage>2351</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3MXhtFeiurbM</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci200235e</pub-id>
                <pub-id pub-id-type="pmid">21854053</pub-id>
                <pub-id pub-id-type="pmcid">4839782</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR16">
              <label>16.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Ma</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Wang</surname>
                    <given-names>L</given-names>
                  </name>
                  <name>
                    <surname>Xie</surname>
                    <given-names>X-Q</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">GPU accelerated chemical similarity calculation for compound library comparison</article-title>
                <source>J Chem Inf Model</source>
                <year>2011</year>
                <volume>51</volume>
                <fpage>1521</fpage>
                <lpage>1527</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3MXot1Clt74%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci1004948</pub-id>
                <pub-id pub-id-type="pmid">21692447</pub-id>
                <pub-id pub-id-type="pmcid">3445263</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR17">
              <label>17.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Warren</surname>
                    <given-names>HS</given-names>
                    <suffix>Jr</suffix>
                  </name>
                </person-group>
                <article-title xml:lang="en">The quest for an accelerated population count</article-title>
                <source>Beautiful code: leading programmers explain how they think</source>
                <year>2007</year>
                <publisher-loc>Sebastopol</publisher-loc>
                <publisher-name>O’Reilly and Associates</publisher-name>
                <fpage>147</fpage>
                <lpage>160</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR18">
              <label>18.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Wilkes</surname>
                    <given-names>MV</given-names>
                  </name>
                  <name>
                    <surname>Wheeler</surname>
                    <given-names>DJ</given-names>
                  </name>
                  <name>
                    <surname>Gill</surname>
                    <given-names>S</given-names>
                  </name>
                </person-group>
                <source>The preparation of programs for an electronic digital computer</source>
                <year>1957</year>
                <edition>2</edition>
                <publisher-loc>Reading</publisher-loc>
                <publisher-name>Addison-Wesley Publishing Company Inc.</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR19">
              <label>19.</label>
              <mixed-citation publication-type="other">Lauradoux C (2008) Hamming weight. An archived version is available from <ext-link xlink:href="https://web.archive.org/web/20110331231405/" ext-link-type="uri">https://web.archive.org/web/20110331231405/</ext-link><ext-link xlink:href="http://perso.citi.insa-lyon.fr/claurado/ham/overview.pdf" ext-link-type="uri">http://perso.citi.insa-lyon.fr/claurado/ham/overview.pdf</ext-link> as the original is no longer available. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR20">
              <label>20.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Muła</surname>
                    <given-names>W</given-names>
                  </name>
                  <name>
                    <surname>Kurz</surname>
                    <given-names>N</given-names>
                  </name>
                  <name>
                    <surname>Lemire</surname>
                    <given-names>D</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Faster population counts using AVX2 instructions</article-title>
                <source>Comput J</source>
                <year>2018</year>
                <volume>61</volume>
                <fpage>111</fpage>
                <lpage>120</lpage>
                <pub-id pub-id-type="doi">10.1093/comjnl/bxx046</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR21">
              <label>21.</label>
              <mixed-citation publication-type="other">Sayle RA (2018) Recent advances in chemical &amp; biological search systems: evolution vs revolution. In: 11th International conference on chemical structures</mixed-citation>
            </ref>
            <ref id="CR22">
              <label>22.</label>
              <mixed-citation publication-type="other">Williams SW (2008) Auto-tuning performance on multicore computers. Ph.D. Dissertation, University of California at Berkeley</mixed-citation>
            </ref>
            <ref id="CR23">
              <label>23.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Swamidass</surname>
                    <given-names>SJ</given-names>
                  </name>
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Bounds and algorithms for fast exact searches of chemical fingerprints in linear and sublinear time</article-title>
                <source>J Chem Inf Model</source>
                <year>2007</year>
                <volume>47</volume>
                <fpage>302</fpage>
                <lpage>317</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2sXitFCms7w%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci600358f</pub-id>
                <pub-id pub-id-type="pmid">17326616</pub-id>
                <pub-id pub-id-type="pmcid">2527184</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR24">
              <label>24.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Hirschberg</surname>
                    <given-names>DS</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">An intersection inequality sharper than the Tanimoto triangle inequality for efficiently searching large databases</article-title>
                <source>J Chem Inf Model</source>
                <year>2009</year>
                <volume>49</volume>
                <fpage>1866</fpage>
                <lpage>1870</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD1MXosVOgtr4%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci900133j</pub-id>
                <pub-id pub-id-type="pmid">19601605</pub-id>
                <pub-id pub-id-type="pmcid">2758932</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR25">
              <label>25.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Hirschberg</surname>
                    <given-names>DS</given-names>
                  </name>
                  <name>
                    <surname>Nasr</surname>
                    <given-names>RJ</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Speeding up chemical database searches using a proximity filter based on the logical exclusive OR</article-title>
                <source>J Chem Inf Model</source>
                <year>2008</year>
                <volume>48</volume>
                <fpage>1367</fpage>
                <lpage>1378</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD1cXnvFGjsr4%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci800076s</pub-id>
                <pub-id pub-id-type="pmid">18593143</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR26">
              <label>26.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Nasr</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Hirschberg</surname>
                    <given-names>DS</given-names>
                  </name>
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Hashing algorithms and data structures for rapid searches of fingerprint vectors</article-title>
                <source>J Chem Inf Model</source>
                <year>2010</year>
                <volume>50</volume>
                <fpage>1358</fpage>
                <lpage>1368</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3cXps1Whsbo%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci100132g</pub-id>
                <pub-id pub-id-type="pmid">20681581</pub-id>
                <pub-id pub-id-type="pmcid">2926297</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR27">
              <label>27.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Kristensen</surname>
                    <given-names>TG</given-names>
                  </name>
                  <name>
                    <surname>Nielsen</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Pedersen</surname>
                    <given-names>CN</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">A tree-based method for the rapid screening of chemical fingerprints</article-title>
                <source>Algorithms Mol Biol</source>
                <year>2010</year>
                <volume>5</volume>
                <fpage>9</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3cXmtlequw%3D%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/1748-7188-5-9</pub-id>
                <pub-id pub-id-type="pmid">20047665</pub-id>
                <pub-id pub-id-type="pmcid">2830925</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR28">
              <label>28.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Aung</surname>
                    <given-names>Zeyar</given-names>
                  </name>
                  <name>
                    <surname>Ng</surname>
                    <given-names>See-Kiong</given-names>
                  </name>
                </person-group>
                <article-title>An Indexing Scheme for Fast and Accurate Chemical Fingerprint Database Searching</article-title>
                <source>Lecture Notes in Computer Science</source>
                <year>2010</year>
                <publisher-loc>Berlin, Heidelberg</publisher-loc>
                <publisher-name>Springer Berlin Heidelberg</publisher-name>
                <fpage>288</fpage>
                <lpage>305</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR29">
              <label>29.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Smellie</surname>
                    <given-names>A</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Compressed binary bit trees: a new data structure for accelerating database searching</article-title>
                <source>J Chem Inf Model</source>
                <year>2009</year>
                <volume>49</volume>
                <fpage>257</fpage>
                <lpage>262</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD1MXhsVCktro%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci800325v</pub-id>
                <pub-id pub-id-type="pmid">19434827</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR30">
              <label>30.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Tabei</surname>
                    <given-names>Y</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Raphael</surname>
                    <given-names>B</given-names>
                  </name>
                  <name>
                    <surname>Tang</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Succinct multibit tree: compact representation of multibit trees by using succinct data structures in chemical fingerprint searches</article-title>
                <source>Algorithms in bioinformatics</source>
                <year>2012</year>
                <publisher-loc>Berlin</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>201</fpage>
                <lpage>213</lpage>
                <pub-id pub-id-type="doi">10.1007/978-3-642-33122-0_16</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR31">
              <label>31.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Downs</surname>
                    <given-names>GM</given-names>
                  </name>
                  <name>
                    <surname>Willett</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Fisanick</surname>
                    <given-names>W</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Similarity searching and clustering of chemical-structure databases using molecular property data</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1994</year>
                <volume>34</volume>
                <fpage>1094</fpage>
                <lpage>1102</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK2cXlslyktL0%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00021a011</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR32">
              <label>32.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Napolitano</surname>
                    <given-names>F</given-names>
                  </name>
                  <name>
                    <surname>Tagliaferri</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Baldi</surname>
                    <given-names>P</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">An adaptive reference point approach to efficiently search large chemical databases</article-title>
                <source>Recent advances of neural network models and applications</source>
                <year>2014</year>
                <publisher-loc>New York</publisher-loc>
                <publisher-name>Springer</publisher-name>
                <fpage>63</fpage>
                <lpage>74</lpage>
                <pub-id pub-id-type="doi">10.1007/978-3-319-04129-2_7</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR33">
              <label>33.</label>
              <mixed-citation publication-type="other">MACCS II. Molecular Design Ltd., San Leandro, California, USA</mixed-citation>
            </ref>
            <ref id="CR34">
              <label>34.</label>
              <mixed-citation publication-type="other">Daylight Chemical Information Systems, Inc., Irvine, CA, USA</mixed-citation>
            </ref>
            <ref id="CR35">
              <label>35.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Pearson</surname>
                    <given-names>WR</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Searching protein sequence libraries: comparison of the sensitivity and selectivity of the Smith-Waterman and FASTA algorithms</article-title>
                <source>Genomics</source>
                <year>1991</year>
                <volume>11</volume>
                <fpage>635</fpage>
                <lpage>650</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK38XlvV2k</pub-id>
                <pub-id pub-id-type="doi">10.1016/0888-7543(91)90071-L</pub-id>
                <pub-id pub-id-type="pmid">1774068</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR36">
              <label>36.</label>
              <mixed-citation publication-type="other">Bingmann T (2013) pmbw—Parallel memory bandwidth benchmark/measurement. <ext-link xlink:href="https://panthema.net/2013/pmbw/" ext-link-type="uri">https://panthema.net/2013/pmbw/</ext-link> Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR37">
              <label>37.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Gaulton</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Hersey</surname>
                    <given-names>A</given-names>
                  </name>
                  <name>
                    <surname>Nowotka</surname>
                    <given-names>M</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">The ChEMBL database in 2017</article-title>
                <source>Nucleic Acids Res</source>
                <year>2017</year>
                <volume>45</volume>
                <fpage>D945</fpage>
                <lpage>D954</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC1cXhslWhurs%3D</pub-id>
                <pub-id pub-id-type="doi">10.1093/nar/gkw1074</pub-id>
                <pub-id pub-id-type="pmid">27899562</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR38">
              <label>38.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Bolton</surname>
                    <given-names>EE</given-names>
                  </name>
                  <name>
                    <surname>Wang</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Thiessen</surname>
                    <given-names>PA</given-names>
                  </name>
                  <name>
                    <surname>Bryant</surname>
                    <given-names>SH</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Wheeler</surname>
                    <given-names>RA</given-names>
                  </name>
                  <name>
                    <surname>Spellmeyer</surname>
                    <given-names>DC</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Chapter 12—PubChem: integrated platform of small molecules and biological activities</article-title>
                <source>Annual reports in computational chemistry</source>
                <year>2008</year>
                <publisher-loc>Amsterdam</publisher-loc>
                <publisher-name>Elsevier</publisher-name>
                <fpage>217</fpage>
                <lpage>241</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR39">
              <label>39.</label>
              <mixed-citation publication-type="other">Bernstein DJ cdb. <ext-link xlink:href="http://cr.yp.to/cdb.html" ext-link-type="uri">http://cr.yp.to/cdb.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR40">
              <label>40.</label>
              <mixed-citation publication-type="other">OEChem and GraphSim Toolkits. OpenEye Scientific Software Inc., Santa Fe, NM, USA</mixed-citation>
            </ref>
            <ref id="CR41">
              <label>41.</label>
              <mixed-citation publication-type="other">Landrum G (2006) RDKit: open-source cheminformatics. <ext-link xlink:href="http://rdkit.org/" ext-link-type="uri">http://rdkit.org/</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR42">
              <label>42.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>O’Boyle</surname>
                    <given-names>NM</given-names>
                  </name>
                  <name>
                    <surname>Banck</surname>
                    <given-names>M</given-names>
                  </name>
                  <name>
                    <surname>James</surname>
                    <given-names>CA</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">Open Babel: an open chemical toolbox</article-title>
                <source>J Cheminform</source>
                <year>2011</year>
                <volume>3</volume>
                <fpage>33</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC3MXhsVWjurbF</pub-id>
                <pub-id pub-id-type="doi">10.1186/1758-2946-3-33</pub-id>
                <pub-id pub-id-type="pmid">21982300</pub-id>
                <pub-id pub-id-type="pmcid">3198950</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR43">
              <label>43.</label>
              <mixed-citation publication-type="other">Bradshaw J (1997) Introduction to the Tversky similarity measure. In: 11th annual Daylight user group meeting. <ext-link xlink:href="http://www.daylight.com/meetings/mug97/Bradshaw/MUG97/tv_tversky.html" ext-link-type="uri">http://www.daylight.com/meetings/mug97/Bradshaw/MUG97/tv_tversky.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR44">
              <label>44.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Tai</surname>
                    <given-names>D</given-names>
                  </name>
                  <name>
                    <surname>Fang</surname>
                    <given-names>J</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">SymDex: increasing the efficiency of chemical fingerprint similarity searches for comparing large chemical libraries by using query set indexing</article-title>
                <source>J Chem Inf Model</source>
                <year>2012</year>
                <volume>52</volume>
                <fpage>1926</fpage>
                <lpage>1935</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC38XhtFWiu7vK</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci200606t</pub-id>
                <pub-id pub-id-type="pmid">22849555</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR45">
              <label>45.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Vachery</surname>
                    <given-names>J</given-names>
                  </name>
                  <name>
                    <surname>Ranu</surname>
                    <given-names>S</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">RISC: rapid inverted-index based search of chemical fingerprints</article-title>
                <source>J Chem Inf Model</source>
                <year>2019</year>
                <pub-id pub-id-type="doi">10.1021/acs.jcim.9b00069</pub-id>
                <pub-id pub-id-type="pmid">30908028</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR46">
              <label>46.</label>
              <mixed-citation publication-type="other">Dalke A (2019) RISC and dense fingerprints. <ext-link xlink:href="10.26434/chemrxiv.8218517.v1" ext-link-type="doi">https://doi.org/10.26434/chemrxiv.8218517.v1</ext-link></mixed-citation>
            </ref>
            <ref id="CR47">
              <label>47.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Thiel</surname>
                    <given-names>P</given-names>
                  </name>
                  <name>
                    <surname>Sach-Peltason</surname>
                    <given-names>L</given-names>
                  </name>
                  <name>
                    <surname>Ottmann</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Kohlbacher</surname>
                    <given-names>O</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Blocked inverted indices for exact clustering of large chemical spaces</article-title>
                <source>J Chem Inf Model</source>
                <year>2014</year>
                <volume>54</volume>
                <fpage>2395</fpage>
                <lpage>2401</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC2cXhtlOnu73J</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci500150t</pub-id>
                <pub-id pub-id-type="pmid">25136755</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR48">
              <label>48.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Alted</surname>
                    <given-names>F</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Why modern CPUs are starving and what can be done about it</article-title>
                <source>Comput Sci Eng</source>
                <year>2010</year>
                <volume>12</volume>
                <fpage>68</fpage>
                <lpage>71</lpage>
                <pub-id pub-id-type="doi">10.1109/MCSE.2010.51</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR49">
              <label>49.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>DeLano</surname>
                    <given-names>WL</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The case for open-source software in drug discovery</article-title>
                <source>Drug Discov Today</source>
                <year>2005</year>
                <volume>10</volume>
                <fpage>213</fpage>
                <lpage>217</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2MXhtlajtr4%3D</pub-id>
                <pub-id pub-id-type="doi">10.1016/S1359-6446(04)03363-X</pub-id>
                <pub-id pub-id-type="pmid">15708536</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR50">
              <label>50.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Guha</surname>
                    <given-names>R</given-names>
                  </name>
                  <name>
                    <surname>Howard</surname>
                    <given-names>MT</given-names>
                  </name>
                  <name>
                    <surname>Hutchison</surname>
                    <given-names>GR</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">The Blue Obelisk—interoperability in chemical informatics</article-title>
                <source>J Chem Inf Model</source>
                <year>2006</year>
                <volume>46</volume>
                <fpage>991</fpage>
                <lpage>998</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD28Xhs1Wjsbw%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci050400b</pub-id>
                <pub-id pub-id-type="pmid">16711717</pub-id>
                <pub-id pub-id-type="pmcid">4878861</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR51">
              <label>51.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Todd</surname>
                    <given-names>MH</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Open access and open source in chemistry</article-title>
                <source>Chem Cent J</source>
                <year>2007</year>
                <pub-id pub-id-type="doi">10.1186/1752-153X-1-3</pub-id>
                <pub-id pub-id-type="pmid">17939849</pub-id>
                <pub-id pub-id-type="pmcid">1975827</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR52">
              <label>52.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Geldenhuys</surname>
                    <given-names>WJ</given-names>
                  </name>
                  <name>
                    <surname>Gaasch</surname>
                    <given-names>KE</given-names>
                  </name>
                  <name>
                    <surname>Watson</surname>
                    <given-names>M</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">Optimizing the use of open-source software applications in drug discovery</article-title>
                <source>Drug Discov Today</source>
                <year>2006</year>
                <volume>11</volume>
                <fpage>127</fpage>
                <lpage>132</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD28Xit1Cktbs%3D</pub-id>
                <pub-id pub-id-type="doi">10.1016/S1359-6446(05)03692-5</pub-id>
                <pub-id pub-id-type="pmid">16533710</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR53">
              <label>53.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Stahl</surname>
                    <given-names>MT</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Open-source software: not quite endsville</article-title>
                <source>Drug Discov Today</source>
                <year>2005</year>
                <volume>10</volume>
                <fpage>219</fpage>
                <lpage>222</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD2MXhtlajtr8%3D</pub-id>
                <pub-id pub-id-type="doi">10.1016/S1359-6446(04)03364-1</pub-id>
                <pub-id pub-id-type="pmid">15708537</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR54">
              <label>54.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Stallman</surname>
                    <given-names>RM</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Selling free software</article-title>
                <source>Free software, free society: selected essays of Richard M. Stallman</source>
                <year>2002</year>
                <publisher-loc>Boston</publisher-loc>
                <publisher-name>GNU Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR55">
              <label>55.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Rajarshi</surname>
                    <given-names>G</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Open source chemoinformatics software and database technologies</article-title>
                <source>Handbook of chemoinformatics algorithms</source>
                <year>2010</year>
                <publisher-loc>Boca Raton</publisher-loc>
                <publisher-name>CRC Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR56">
              <label>56.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Steinbeck</surname>
                    <given-names>C</given-names>
                  </name>
                  <name>
                    <surname>Han</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Kuhn</surname>
                    <given-names>S</given-names>
                  </name>
                  <etal />
                </person-group>
                <article-title xml:lang="en">The Chemistry Development Kit (CDK): an open-source java library for chemo- and bioinformatics</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>2003</year>
                <volume>43</volume>
                <fpage>493</fpage>
                <lpage>500</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BD3sXhtVaktbg%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci025584y</pub-id>
                <pub-id pub-id-type="pmid">12653513</pub-id>
                <pub-id pub-id-type="pmcid">4901983</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR57">
              <label>57.</label>
              <mixed-citation publication-type="other">Stein W (2016) The origins of SageMath—creating a viable open source alternative to Magma, Maple, Mathematica, and Matlab. <ext-link xlink:href="https://wstein.org/papers/talks/2016-06-sage-bp/bp.pdf" ext-link-type="uri">https://wstein.org/papers/talks/2016-06-sage-bp/bp.pdf</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR58">
              <label>58.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Eghbal</surname>
                    <given-names>N</given-names>
                  </name>
                </person-group>
                <source>Roads and bridges: the unseen labor behind our digital infrastructure</source>
                <year>2016</year>
                <publisher-loc>New York</publisher-loc>
                <publisher-name>Ford Foundation Center for Social Justice</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR59">
              <label>59.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Hardin</surname>
                    <given-names>R</given-names>
                  </name>
                </person-group>
                <person-group person-group-type="editor">
                  <name>
                    <surname>Zalta</surname>
                    <given-names>EN</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">The free rider problem</article-title>
                <source>The Stanford encyclopedia of philosophy, spring 2013</source>
                <year>2013</year>
                <publisher-loc>Stanford</publisher-loc>
                <publisher-name>Metaphysics Research Lab, Stanford University</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR60">
              <label>60.</label>
              <mixed-citation publication-type="other">Cannon B (2018) Setting expectations for open source participation. PyCon 2018 keynote. <ext-link xlink:href="https://youtu.be/tzFWz5fiVKU?t=2970" ext-link-type="uri">https://youtu.be/tzFWz5fiVKU?t=2970</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR61">
              <label>61.</label>
              <mixed-citation publication-type="other">Stallman RM (2007) Why open source misses the point of free software. <ext-link xlink:href="https://www.gnu.org/philosophy/open-source-misses-the-point.html" ext-link-type="uri">https://www.gnu.org/philosophy/open-source-misses-the-point.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR62">
              <label>62.</label>
              <mixed-citation publication-type="other">Jones T (1979) Life of Brian. Cinema International Corporation</mixed-citation>
            </ref>
            <ref id="CR63">
              <label>63.</label>
              <mixed-citation publication-type="book">
                <person-group person-group-type="author">
                  <name>
                    <surname>Stallman</surname>
                    <given-names>RM</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Free software definition</article-title>
                <source>Free software, free society: selected essays of Richard M. Stallman</source>
                <year>2002</year>
                <publisher-loc>Boston</publisher-loc>
                <publisher-name>GNU Press</publisher-name>
              </mixed-citation>
            </ref>
            <ref id="CR64">
              <label>64.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>DeLano</surname>
                    <given-names>WL</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">PyMol: an open-source molecular graphics tool</article-title>
                <source>CCP4 Newsl Protein Crystallogr</source>
                <year>2002</year>
                <volume>40</volume>
                <fpage>44</fpage>
                <lpage>53</lpage>
              </mixed-citation>
            </ref>
            <ref id="CR65">
              <label>65.</label>
              <mixed-citation publication-type="other">Lampitt A (2008) Open-core licensing (OCL): is this version of the dual license open source business model the new standard? In: Lampitt or leave it. <ext-link xlink:href="https://alampitt.typepad.com/lampitt_or_leave_it/2008/08/open-core-licen.html" ext-link-type="uri">https://alampitt.typepad.com/lampitt_or_leave_it/2008/08/open-core-licen.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR66">
              <label>66.</label>
              <mixed-citation publication-type="other">AstraZeneca (2015) AstraZeneca and Sanofi exchange over 200,000 chemical compounds. <ext-link xlink:href="https://www.astrazeneca.com/media-centre/press-releases/2015/AstraZeneca-and-Sanofi-exchange-over-200000-chemical-compounds-20112015.html" ext-link-type="uri">https://www.astrazeneca.com/media-centre/press-releases/2015/AstraZeneca-and-Sanofi-exchange-over-200000-chemical-compounds-20112015.html</ext-link>. Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR67">
              <label>67.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>Ihlenfeldt</surname>
                    <given-names>WD</given-names>
                  </name>
                  <name>
                    <surname>Takahashi</surname>
                    <given-names>Y</given-names>
                  </name>
                  <name>
                    <surname>Abe</surname>
                    <given-names>H</given-names>
                  </name>
                  <name>
                    <surname>Sasaki</surname>
                    <given-names>S</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Computation and management of chemical properties in CACTVS: an extensible networked approach toward modularity and compatibility</article-title>
                <source>J Chem Inf Comput Sci</source>
                <year>1994</year>
                <volume>34</volume>
                <fpage>109</fpage>
                <lpage>116</lpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DyaK2cXns1GrtQ%3D%3D</pub-id>
                <pub-id pub-id-type="doi">10.1021/ci00017a013</pub-id>
              </mixed-citation>
            </ref>
            <ref id="CR68">
              <label>68.</label>
              <mixed-citation publication-type="other">Guha R (2018) fingerprint: Functions to operate on binary fingerprint data. <ext-link xlink:href="https://cran.r-project.org/package%3dfingerprint" ext-link-type="uri">https://cran.r-project.org/package=fingerprint</ext-link> Accessed 5 June 2019</mixed-citation>
            </ref>
            <ref id="CR69">
              <label>69.</label>
              <mixed-citation publication-type="journal">
                <person-group person-group-type="author">
                  <name>
                    <surname>O’Boyle</surname>
                    <given-names>NM</given-names>
                  </name>
                  <name>
                    <surname>Sayle</surname>
                    <given-names>RA</given-names>
                  </name>
                </person-group>
                <article-title xml:lang="en">Comparing structural fingerprints using a literature-based similarity benchmark</article-title>
                <source>J Cheminform</source>
                <year>2016</year>
                <volume>8</volume>
                <fpage>36</fpage>
                <pub-id pub-id-type="other" assigning-authority="ChemPort ( Chemical Abstract Service )">1:CAS:528:DC%2BC1cXkvFejtLk%3D</pub-id>
                <pub-id pub-id-type="doi">10.1186/s13321-016-0148-0</pub-id>
                <pub-id pub-id-type="pmid">27382417</pub-id>
                <pub-id pub-id-type="pmcid">4932683</pub-id>
              </mixed-citation>
            </ref>
          </ref-list>
        </ref-list>
        <app-group>
          <app id="App1">
            <sec id="Sec28">
              <title>Supplementary information</title>
              <p>
                <supplementary-material content-type="local-data" id="MOESM1" xlink:title="Supplementary information">
                  <media mimetype="application" mime-subtype="pdf" xlink:href="MediaObjects/13321_2019_398_MOESM1_ESM.pdf" position="anchor">
                    <caption xml:lang="en">
                      <p><bold>Additional file 1: Table S1.</bold> Performance of different popcount implementations, in milliseconds and relative to the 8-bit lookup table time, measured using the threshold searches from the chemfp benchmark suite (<italic>T</italic> = 0.4 for 2048 bit searches, otherwise <italic>T</italic> = 0.7). In most cases the search algorithm uses a function pointer to dispatch to the appropriate popcount function, without memory prefetching. The POPCNT and AVX2 versions show times using loops of different sizes and “fully unrolled” versions which implement the fingerprint popcount without a loop. The ‘inline’ and ‘prefetch’ variants inline the calculation and use memory prefetching, respectively. Timings were made with chemfp 3.3. <bold>Figure S1.</bold> Scaling of <italic>k</italic> = 1 nearest neighbor searches as a function of the number of targets, for different fingerprint types. MACCS and FP2 fingerprints scales as <italic>O</italic>(<italic>n</italic><sup>~0.65</sup>) and the PubChem/CACTVS and Morgan searches scale as <italic>O</italic>(<italic>n</italic><sup>~0.8</sup>) in the number of fingerprints in the dataset, which is the sublinear scaling expected from using BitBound. Timings made with chemfp 1.5. <bold>Table S2.</bold> Chemfp file scan search performance for 100 queries from each of the data sets in the chemfp benchmark. The search time shows chemfp processes 500–600 MiB/s. The GNU program “wc” version 8.25 can count the number of lines in about 1/10th the time indicating that chemfp is not disk I/O bound. <bold>Table S3.</bold> Number of Tanimotos evaluated for an in-memory search of each of the test cases in the chemfp benchmark suite. The number of Tanimotos is much less than the expected 1 billion (1000 queries * 1 million targets) because of the BitBound limits. The number of divisions is the number of tests which passed the fast rational rejection test so require a 64-bit division. It shows the effectiveness of the rational rejection test. <bold>Table S4.</bold> Performance comparison as a function of the number of fingerprints between the fastest implementation from Kristensen et al. [<xref ref-type="bibr" rid="CR28">28</xref>] and chemfp 3.3, using the Kristensen benchmark data set. The benchmark does a threshold = 0.9 search using the first 100 fingerprints in the data set. <bold>Table S5.</bold> Performance comparison as a function of minimum Tanimoto threshold between the fastest implementation from Kristensen et al. and chemfp 3.3, using the Kristensen benchmark data set. The benchmark uses the first 100 fingerprints in the data set to search the first 1,999,998 fingerprints. LinearSearcher is the fastest Kristensen method for all Tanimoto thresholds at or below 0.76. Some thresholds timings are omitted here as they add little useful information. The full table for each threshold step of 0.01 is available from this paper’s BitBucket repository.</p>
                    </caption>
                  </media>
                </supplementary-material>
              </p>
            </sec>
          </app>
        </app-group>
        <glossary>
          <title>Abbreviation</title>
          <def-list>
            <def-item>
              <term>FOSS</term>
              <def>
                <p id="Par2">free and open source software</p>
              </def>
            </def-item>
          </def-list>
        </glossary>
        <notes notes-type="ESMHint">
          <title>Supplementary information</title>
          <p><bold>Supplementary information</bold> accompanies this paper at <ext-link xlink:href="10.1186/s13321-019-0398-8" ext-link-type="doi">https://doi.org/10.1186/s13321-019-0398-8</ext-link>.</p>
        </notes>
        <notes notes-type="Misc">
          <title>Publisher's Note</title>
          <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
        </notes>
      </back>
    </article>
